linux timers:
	rtc: used to get wall time, from startup and from userspace clock() syscall
		at irq8
	pit : programmasble interval timer, used to program to issue timer at fixed time interval(16bit)
			at irq0 
	tsc: rdtsc get more accurate tick
	hpet: high precision event timer:( issue timer at irq0(preferable than pit, handle software timer)
	apic local timer: only used to issue timer for local cpu(more preferable for cpu specific timer work if exists)
			sometimes mayby buggy
	acpi power manage timer: some fix timer issue, less preferable than hpet

in multicore:
	global event use global timer
	local event use apic local timer

time_keeping struct:
	the cur_time used to select best timer for system when boot, usually hpet is preferable
			then apci, tsc, pic
	struct:				delay
		timer_hpet		hpet
		timer_pmtmr		tsc
		timer_tsc		tsc
		timer_pic		tight loop
		timer_none

jiffie: update every timer interrupt
		the 32bit version will wrap in 5 min after boot, to check buggy code
		64bit not atomic, use seqlock to read
xtime: used by gettimeofday to get current utc time,

kernel timeinit:
	in time_init():
		initialize xtime from rtc, 
		initialize wall_to_monothonic(used to add to xtime) for monothonic time request from kernel
		enable hpet if exists(query bios provided memmap), else use pit
		use select_timer() to select best time and fill timer_keeping(some mark and delay function set)
			set cur_time
		set interrupt of irq0 for it, when occurred, will disable irq

for multicore: global time interrupt used to update global statistic, local  timer from apic used
	to do cpu spedific statistic

interrupt occurred:
	for uniprocessor:
		fetch xtimerlock, use timerkeeping related method update jiffies to compensate to lost interrupts
			record count 
		call do_interrupt
			increase jiffies
			update_times()
			update_process_time()
			profile_tick() do profile statistic info collect
			adjxtime()'s time drift handle
	for multicore : local interrupts  number 239
		apic_timer_init calibrate time for interrupt inteval and set it to local apic
		update_timer: called by global interrupt, update jiffies, calculate system load:
			this means how many TASK_RUNNING in current system
		update_process_timer(): called by local interrupt
			used to update current process's running time
			and cpu-related statistic 
			wake TIMER_SOFTIRQtasklet
			check schedule_tick() for current process if schedule needed
				(may then check in ret_from_intr() to schedule)
			profile_tick(): check which mem is used by esp from stack saved, used by
							read profile and oprofile
	nmi watchdog:
		done to check apic_timer_irqs if same in two watchdog interrupt, then something wrong, kill process

software timer:
	struct timer_list:
		init_timer() to init it
		add_timer() to add to global list(bound to local cpu to run)
		mod_timer() to update expire time of already on cpu and add_timer is being called()
			use this to modify already expired timer
		del_timer() can delete timer even not on that cpu
		del_time_sync() use this if timer will reacitivate itself
		del_singleshort_timer_sync() use this if timer will not reacitivate itself
