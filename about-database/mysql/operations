引用类型一般用单引号的！！
双引号用在使用数据库的程序中，用来包含数据库语句，所以这里坚持单引号
跳脱引号 \  或者 '

create database:
	create database xxx;

into database:
	use database_name
create table:
	create table name (attr type (可选　not null)(可选　default xxx), attr type, ...)
		not null 表示insert的时候必须填值，不然报错
	
	type:
		INT DEC(allnum, 小数数量), BLOB(大容量文本）　，varchar(num), char(num) (后者固定长度，前者变长，再前者无限)
		DATE, DATETIME 这个表示固定的当前时间

查看表的描述：
	desc table_name

delete table:
	drop table name;

insert: (表中插入的顺序没有意义，内部会调整）
	insert into table_name (column,...) values ('value1',....) 数字不用加引号，其他要, column不用加引号
	
	1 有列名时，可以颠倒顺序
	２没有列名时，必须顺序写值，全部填入
	３　不能漏填
	3 可以指定列名，然后只填入一小部分，剩下的会是null (这个不能互相比较）

select:
	select xx from table_name where  xx='xx'   
	查询：
		dec可以用引号，可以不同，float 查询匹配可以没有０的小数部分，可以有
	查询条件： (null 不能用在条件里面，因为不能比较） 
		可以　where xx is null , 使用其他的where条件是找不出来的！！！，除非select * from table 这个返回全表的
		where  xx=xx AND yy = yy; 可以多个条件
					or   选择其一个条件
		操作符:
			= < > <>(!=) <= >= 
			字符比较
				name > 'L' and name < 'M'  找到所有首字母大于L,小于M的元素
			between xx and yy :
				这个方便 >= <= 如果小于某个字母，那么那个字母以及以他开头的单词都没了,所以要向后跳一个，到下一个字母

			like:
				where xx like '%aa%' %任意多个(0到多个），　_ 表示只有一个　未知字符

			in ('xxx','yyy'..)  , not in (...)
				这个用在有多个取值，省去使用or的麻烦

			not :
				放在and, or, in, bewteen, null 等之前即可，还可以放在where后面，直接对后面的式子去否定
				xxx is not null  



select 字符串匹配：
    substring_index(name, seperator, 第几个分隔符）返回分隔符前面的部分
    right(name, number) 取从右边数的几个字符
    left（xxxx）
    substring(string, start, count) 取指定位置字符串
    upper
    lower
    reverse
    ltrim, rtrim 去掉左右空格
    length()返回字符串长度
    这些都用再select

    配合update
        update xxx set xx=upper(xxxx)

这个很危险，一般可以先select,确定了再delete
delete from tablename where 
	where 这个很重要，如果没有，整个表都删掉了！！

update:
    update tablename set xxx=xxx, yy = yy where xxxxxx
    可以利用计算 set  cost = cost + 1
    update的顺序很重要，不然同一个语句中，后面的udpate会覆盖前面的动作

    多个语句同时更新，where会显得麻烦，使用case
    update table_name set xxx = 
    case
        when xxx = xx then xxx
        when yyy = yy and zz =zzz then yyy
        else xxxx
    end where ...; 加where也是可以的


order by 获取的输出按字符顺序排列, 可以排列多个列,按先后顺序以不同的列排,
        这样最后的大类是后面的
    放在最后，where条件表达的后面
    order by xxx desc;  
        desc: 表示反转这一项的排序

limit start, count
    这个搭配order by ，可以在顺序返回的数据的基础上，选择取第几个到第几个数据


select sum(xxx) from table_name; 这样会把匹配的列项相加
        group by xxx 可以分组，这个结合sum，可以最组内sum
        order by sum(xx) desc; 这样可以逆序排列所有的加总
        select count(distinct xxx) from xxx group by xxx
            这样，会对分组后的数据进行计数
select distinct column_name from table_name order by table_name
        获取的是不同的值的数量

avg :
    平均函数
sum:    
    加总函数
min, max 最大最小
count: 计算行的数量

