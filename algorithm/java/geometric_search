range search:
    数量，这个具体应该是i进行中序遍历，过程中给每个处理到的值赋值，同时返回剩下的可用最小值，
        给调用者继续赋值用
    具体区间，
        这个利用递归，检测每个current node，如果在范围外，只检测右子树，否则左右，总
        时间是  需要的节点的数量+lgN

水平垂直线交点
    有一堆水平，垂直线段，找到所有交点，如果暴力，n^2,
    这里使用：
        所有横线按照两边的点以及首尾特性分成2n个点加入到优先队列，以x为key
        所有的竖线也加入，或者加入另一个，每次比较两个队列的顶端，取出最小的那个，优先
            竖线的，  
        如果横线头，加入bst，以y为key
        如果横线尾，取出bst，
        如果纵线，以总线的y范围在bst中查找范围内的点，
            这些找到的x可以和这个 y形成交点，over，找到交点，
            整个过程nlogn + 交点的数量，很高效

2d range:
    查找范围内的点集
    划网格，所有点加入各个网格，网格数量不能过大过小，推荐 根号N
        简单，但是如果有点集群，而不是平均分布，会低效

    所以我们使用2d tree
        偶数层（从0开始）使用垂直线，奇数层使用水平线，
            所有在垂直左边的的放左子树，水平下面的左子树，这样
            就把所有点放到了二叉树里面去了
        比较范围：
            只需从root点开始比对，根据当前是纵横以及范围方块的相应xy位置
            确定下次需要比较左右或者全部，递归进行
            R + lgN

    查找距离指定点最近的点：
        也使用2d tree，从根开始，中序遍历，每次中序到进行右子树的时候，比较当前最短和
            到当前的垂直距离，如果比这个短，右子树就不用查了，直接返回
        缺点：
            如果图形是圆的，那么距离圆心可能要查看所有的点

    flocking biods:
        每个点都在k个邻近点中心，方向是中心, 速度也是平均中心方向和速度

kd-tree:
     每一坐标都可以用来当作分割，轮询

interval-tree:
    store interval lines (lo, hi),
    key is start point, also store the last end point of the subtree rooted at that node
      
    find one intersection:
        if root intersects : return
        if left null, search right
        if left sub's max endpoint less that query start point, go right
        else go left


    
