apm and acpi are two power manager subsystem, we now use acpi
	device model make power manager more convenient


generally have two operations: suspend, resume
	state: when suspending, do not transport data, dma, interrupt, accept request
	two power suspend mode:
	os layer: if os want to sleep, notify device and call their suspend func
	device layer: if device want to sleep ,just do it

have two type of suspend: STR STD  
	store to disk
	store to ram
	in /sys/power/disk we can echo in "shutdown" or "reboot"
	after that: echo disk > /sys/power/state (suspend)
	then your system's state will be stored to disk, if power on again,things are continued as same(resume)

every bus_type will have their own suspend and resume func, which will continue to traverse
	their subsystem's device driver to call those specific suspend func

take usb as an example:
	usb_suspend will suspend a device,and in that device's suspend,will suspend a interface
	and set that suspend state, after all intf, suspend that device
	if one stop error, resume all as if nothing happened

have several power state:
	on: after resume, normally run state
	suspend: low power not work state
	freeze: not work, used to take snapshot
	prethaw: just like freeze, but used to fix kexec bug, reset before resume

remote_wake_up:
	this is a feature means eg. if you press key when system suspend,
		system will wake up,feature can be tested if supported and 
		can be enable or disabled
FUNCTIONS:

suspend sequence:
	from power manager core system, call usb_suspend on a specific device;
	set auto_pm to 0;means we are not in autosuspend(a work queue explained later);
	call usb_suspend_both:
		this func will be called both in autosuspend(interval suspend work)
		and external suspend(manual suspend).
		the former one will first check if suspend can be done(child is in using or not);
			if in work, just return as failed
		the latter one will enforce suspend interface, but if failed, both will
		resume previous operations as resume, internal one will again try autosuspend.
		(this one can also be used in resume routine)
		then suspend the whole device of bunch of interface. 
		usb_suspend_device:
			if device has driver, call that driver's suspend func(actually the same as below)
			if hasn't, do a hub_port_suspend on the upstream port 
				connecting this device(just  send a suspend feature command)
		if all success, call a autosuspend to its parent(it he can suspend,do it,
			if can not,just leave it alone, so auto)
		
resume sequence:
	first cancel autosuspend kworker,because we now to resume;
	then if state is suspend, resume father first, then itself, then its interface


usb_device_driver's resume and suspend:
	just  the same as not exist(like that use port suspend part)
	will call usb_port_suspend(set suspend feature of port)
		   usb_port_resume(clear suspend feature of port):
		   	check if is not suspended ,just  done
			then clear suspend featrue and wait a little time,
			then again get status and check ,if succeed,again wait a time,
			then finish_port_resume:
				just set port status to configured or address
				then clear wakeup feature(we are waked up now)
			if get hub port status failed ,tell hub_event to reset port
			clear busy_bits(which means we are in resume)

usb_resume_both:
	will resume parent first , then self (using usb_port_resume),
	but if is roothub, then if hcd is sleptd ,return error,
	then resume all interfaces:
		will resume using intf's driver's resume func if exist

hub_suspend, hub_resume:
	these two will do nothing but call hcd_bus_resume/suspend to deal with roothub's status


autosuspend, autoresume:
	these two will properly deal with suspend && resume sequence

autosuspend_check:
	this func used to check if suspend work func should be scheduled to work
	autosuspend_check(activate)=>usb_autosuspend_work=> autosuspend_do_device(depends on what
		status , call usb_resume_both or usb_suspend_both)

auto_pm:
	set in usb_autopm_do_device:(this called by four funcs)
		and in the usb_suspend_both called by this func, will autosuspend_check if this is
			set, then usb_autopm_do_device will again be called(in two seconds)
		but if should suspend,that work will be canceled, and *both* func must be 
		called holding a lock ,so do no worry about recursive call of these func

last_busy:
	this bit used to record a time meaninig that after a delay of that time,we can try
		to suspend, this record point it suspend && resume point
