usb's state:
	default means no address attached, and readly for that
	configured means in a state that has get configure desc
	address means in a state that have been set an address

once inset a device, sysfs will have at least two device model:
	the device itself, device's interface
	4-0:1.0  means  root hub 4's port0; use conf No.1 and interface No.0
		roob hub is on bus, every one has a number, its port(or its devpath from that root hub);
		then conf must choose one for whole device; then one intf for one function(eg.a mass storage)
usb_init:
	first create a work queue for powermanager(autosuspend)
	register bus,so we can add device on that bus 
	register host controller
	register usb bus as a char device
	register all usb devices possible as chrdevs
	register hub, usbfs, 
	then over


usb_driver:
	this struct has a dynamic id, this one is ids you can set in run time.
	in /sys/bus/usb/drivers/...
	the struct drvwrap, in usb_device_driver or in usb_driver has an additional
		field besides struct device_driver, that is used to judge if this driver
		is for device or interface
usb_device_driver:
	this structure's probe will accept all usb dev to run its probe,it's a generic driver



struct urb:
	kref:
	in it, we have a kref atomic, this used 
	to represent if this urb is used by any
	endpoint(as a count)(if zero,then urb be destroyed)
	use_count:
	we also has use_count var, this represent
	the urb is using by hcd
	the usb_unlink_urb usb_kill_urb use use_count
		to judge success or wait
	kill_urb will call unlink_urb,which will use
		usb_hcd_unlink_urb to tell hcd want killing
	reject:
		in usb_kill_urb we have this set to tell
		that we are in killing, now do not resubmit
	pipe:(to specify a specific endpoint to comunicate)
		direction  	bit 7
		device address	bit 8-14
		endpoint	bit 15-18
		pipe type	bit 30-31
	transfer flag:
		short not ok: if some one transfer(read) shorter than maxpacket size, return error
		iso asap: used for iso transport to auto start and record start frame in hcd
		no map(transport,setup): set, so that hcd will consider using dma buffer(allocated by driver)
		zero packet :  when send out xfer,the last must be a shorter packet, if no, add one
		no interrupt: not call complete func when xfer succeeded immediately.
	context:used by complete func
	complete: the complete func
	usb_iso_packet_descriptor: used for iso xfer, iso xfer will transport mulple times of data
				in one urb, this array include one urb's whole times of data,
	number of packet: number of packets


usb control msg
usb interrrupt msg: just call bulk msg
usb bulk msg:
	alloc, depend on attribute to decide to call interrupt or  bulk
	wait

device life time:
	once device inserted in, hub_event be wakedup by kick_khubd by hcd's interrupt bulk poll,
	then detect that is a connect in change, so invoke a usb_alloc_dev to allocate device struct for
	new dev:
		alloc struct usb_device;
		initialize usb_bus_type and usb_device_type
		organize device busid-type name,
			if current allocated dev is for a root hub(called from hcd)
				devpath[0] = '0'(used by child to identify)
				dev->dev.bus_id[0] = usb"busnum", so in /sys is usb0/usb1/...
			if current is a dev connect directly to roothub
				devpath is port num
				and bus_id is busnum-portnum  like   2-1(bus2's root hub's port 2)
			if current is a dev not directly connect to roothub
				devpath is parent's devpath.current_dev's linked upstream port
				rest is like above
				
		set connection to the hub's port and dev's struct
		then hub set dev's attach status, choose for it and set it in
		get usb's control edp's maxpacketsize, then 
		use usb_control_msg to set address of device

			usb_control_msg:
				set up usb_ctrlrequest struct and add to urb struct and send
				them to usb core then send to hcd; then wait for complete
				in transaction:(一个会话)
					setup:
						one setup token packet, one data packet(optional),
						one status from dev
					data:
						data0, data1, data0, data1 for error checking
					status:
						dev return transport status

				in this func, we call usb_internal_control_msg:
					usb_alloc_urb: just alloc and init the kref to 1
					usb_fill_*_urb(*: control,int,bulk),fill most special fileds
					usb_start_wait_urb: used to fill rest fields and send urb and wait
						usb_submit_urb:
							check if some field are set or not set
							check the state of the dev and power
							usb_maxpacket: used to get maxpacketsize of specific edp
							if is high speed xfer and iso xfer:
								every micro fram will transport multi packet,
								the 11 and 12 bit of maxpkt is number of packets
								0~10 is max size of every xfer, so multiple 
								together to get every fram's xfer size
							then depend on speed and xfer type to decide interval
								a little diff from spec
							then submit to hcd
							during submit to hcd, just add queue into endpoint's queue,
							 	then notify specific hcd controller

						after complete, the complete func passed in by driver will
							be called
							
								
				
			after set address, we will call get  configuration to get conf,intf, edp descriptors
			this func will get every conf desc,
				for each conf  desc, get every interface desc's altseting desc
					in every altsetting desc, get every endpoint's desc
					
		after get conf, we will get usb string of diff language if specified:(in usb_new_device)
			use usb_cache_string:
				this will try a large  buf to get string and again allocate
					a smaller buffer to actually store that string and return
					in sub calls:
						use the language id and string id to get strings,
						string is unicode, so should converto to iso-8891,
						then print out, if not adapted to ascii, just
						print '?' instead
		after all that ,we will call device add , and will calling that usb's generic_device_probe
		(see in file usb_driver)
