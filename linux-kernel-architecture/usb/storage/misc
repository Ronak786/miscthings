about register driver:
	fill a struct usb_driver, then register with usb_register, this will register
		the struct driver in usb_driver, into driver model in usb_bus_type,
		then scan devices matching id_table, if so , call the probe function

id match:
	to usb storage: matching is just  interface's class subclass, protocal matching.
			for unusual devs, have their own match method, use UNUSUAL_DEV macro
			to set match fields, including in a unusual_dev.h file

usb_interface:
	one interface fullfills one function, so talk to one driver,
	in the struct usb_interface, we have a struct device, its parent is the
	device of the usb_deivce's struct device.

	one interface has several settings, we choose one, it has multiple endpoints
		with it: struct usb_host_interface

probe function:
	allocate a struct us_data to store all data related to this storage device and its transport;
	initialize all locks and sems, 
	associate us_data with interface struct, allocate control and io transfer buffer;
	get device info: will get subclass and protocal infos from interface description;
			get vendor productor serail infos from devcie desc,
			if not get, will from unusual id tables(manually set by driver designer)
			these info will be shown in /sys ? or lsusb ? 
	set us_data's transport && protocal_handler function and set pipes to us's fields

transfer buffer dma:
	this will normally be used as a map of transfer buffer by host controller,
	if you pass a NO_MAP flag, then hcd will just use that dma buffer you provided

usb acquire resource:

usb urb:
	a struct repersent the whole transfer related data, usb use this as a transfer unit

usb_stor_control_msg:
	used to transfer control msg, pass command,use params to fullfill setup packet struct,
	then transfer data buf if needed,  (use usb_fill_control_urb,the setup packet adheres spec)
	sub_stor_msg_common, used to transfer command to system and wait respond

usb_stor_msg_common:
	fullfill common fields in urb, submit urb, then add a timer, wait complete,
	the completetion variable will be waked up by scsi's function use ;
		(use urb's complete to wake up urb's context)
	if timeout, will also wake up the complete(otherwise this function not return forever);
		then unlink the request.

scsi host alloc:
	define a virtual scsi card, because usb attached to scsi layer in linux
	scsi_host_alloc, scsi_add_host , scsi_scan_host

kernel_thread  contorl thread:
	set to nonfreeze, then begin wait/sleep,until a command comes,
	parent comtinue

kernel_thread scsi_scan:
	this first wait a little time making sure no one disconnect it,then scai_scan_host,
	now scsi layer know this virtual scsi host card, then complete a scsi_scan_done;
		which is used when disconnect is called,(to make sure threads are stopped 
		when disconnect( synchronize))

usb_stor_control_thread: (main work thread of usb storage):
	when comnd com, first in queuecommand of scsi_host_template, this will make sure
	now no other command is exec, and not in disconnect, then wakeup control thread

	in thread, judge command state, if right && if device do not have inquery command,
		then fake one inquery comnd, 
	in another branch(main), call proto_handler to do main transfer job

	true transport:
		us->proto_handler from  get_protocal() -> us->transport from get transport
		the whole transport divided into three stage: bcw data bsw(command data state)
		in data transfer ,we may choose use sglist or normal block transfer
			sglist: sg init , sg wait
			normal: usb_submit_urb
		then bsw, get result , return state

	back into transport func:
		if transport failed, do a sense inquery to get error state
		then print out send data for debug if error,
		then return
