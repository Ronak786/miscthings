kmalloc return logical addr: an offset from physical addr
vmalloc return virtual addr: just virtually continous

struct page:
	better than just vaddr, because this struct include vaddr if needed,
	or just no map of that page, then no addr
	but every physical mem included in one page

virt_to_phys
struct page *virt_to_page();
pfn_to_page(int num)
vaddr * page_address(struct page*); // not good for nonmapped pages
kmap/kunmap[_atomic]: better than above, will do the map for high mem(those have no
		direct map)

vma:
	for mmap: offset must align pagesize!!
	#include <<asm/pgtable.h> for virt_to_page,
	virtual memory area: every single area have same permission, see /proc/self/mmap

	remap_pfn_range():
	io_remap_page_range():
		if you use this, and just vma->pg_off send to it, then driver do not provide mem,
		kernel will just use zero page to support you every time open dev a new empty page
	or you just implement vm_operations_ops
		and implement your fault, just like ldd, scullp/mmap.c
		map your page in it

	map range:
		vma->vm_start ~ vma->vm_end, offset: vma->vm_pgoff << PAGE_SHIFT, size: vma->vm_size

	simple implementation:
		remap_pfn_range()
		vma->vm_ops = your_ops of (open close fault)
		vm_ops->open()

	vm_operation_ops:
		fault:	 called when page fault happened
			usually you allocate a page and call get_page() increment reference,
				get_page()must call, avoid free page when using
				if error, should return NOPAGE_SIGBUS
			then assign to vm_fault->page, then return 0
			if reutrn vm_fault_error, will cause OOM

		if fault is NULL:
			a zero page's copy on write will occurred, also when mremap,
			you will get a fullly zeroed private page
			if mremap expand excess end of your virtual memory, and you do not have fault func,
				simply zero page will got
			so you can set fault to NOPAGE_SIGBUS

		note:
			pages allcated by vmalloc can not use virt_to_page, should use 
				vmalloc_to_page !! virt used only in physical fixd offset address!!

	ioremap:
		also use remap_pfn_range() to map to userspace instead of using vmalloc_to_page

aio:
	asyncio
	file_operations:
		aio_read/aio_write

dma:
	#include <linux/dma-mapping.h>
	coherent buffer:
		dma_alloc_coherent()
		dma_free_conherent()
		dma_pool_create/alloc()
		dma_pool_free/destroy() used to create a pool for size less than one page alloc(coherent alloc will use
				at least one page)

	stream type: recommended
		dma_map_single() map your buffer and return bus addr, pass into your device
		dma_unmap_single()
		dma_sync_single_for_cpu() temporarily get mapped buffer from dev
		dma_sync_single_for_device() temporarily return mapped buffer to dev
		dma_[un]map_page() :process with struct page, (from get_user_page())

	scatter-gether:
		#include <linux/scatterlist.h>
		dma_map_sg
		dma_unmap_sg
		sg_dma_len
		sg_dma_address
		dma_sync_sg_for_cpu/device
