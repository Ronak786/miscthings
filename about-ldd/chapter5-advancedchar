ioctl:
	kernel linux/fs.h (#include<asm/ioctl.h>)
	user   linux/ioctl.h(for define ionumber)
			sys/ioctl.h(for use ioctl syscall)
	doc: Documentation/ioctl/ioctl-number.txt

	combination:
		type number direction size
		direction: in perspective of user
		combination:
			_IO(type,nr)
			_IOR(type,nr,size)
			_IOW(type,nr,size)
			_IORW(type,nr,size)
		parse
			_IOC_DIR(nr)
			_IOC_TYPE(nr)
			_IOC_NR(nr)
			_IOC_SIZE(nr)

		error should return ENOTTY
			posix: in appropriape ioctl for device

	check:
		_ioc_type(cmd)  check magic
		_ioc_nr(cmd)    check number code within range

		access_ok(verify_write/read, ptr, _ioc_size(cmd)) check read/write is permitted
			depending on _ioc_dir(cmd) is ioc_read or write
				write includes read check
			commonly not needed, will be used by memory subsystem


		if specific ioctl cmd check:
			include <sys/sched.h>
			if write into: check capable(CAP_SYS_ADMIN)
			cap_net_admin
			cap_sys_module  insmod/rmmod
			cap_sys_rawio
			cap_sys_ttyconfig
			cap_dac_override  ignore rwx permission on file/dir

	copy_funcs: these funcs will sleep, but kernel handle it, our device may not worry about it 
		copy_to/from_user
		__get_user/ __put_user: used for small types like char int long ....
		put_user/get_user: will use access_ok, above will not use

	kernel used ioctl cmd:  parse before enter your ioctl func
		fioclex: close when exec
		fioncloex: opposite of above
		fioasync: use fcntl instead
		fionbio: non blocking io: use fcntl instead
		fioqsize:  query file/dir size, dev file return ENOTTY

fcntl:
	compatibility used, just like ioctl, but for file instead of for device
	O_NONBLOCK 
		kernel check in file->f_flags, if set: read/write -> -EAGAIN, and user should check errno 
												open: immediately begin init, but return -EAGAIN, then
													you can do otherthing and openagain, now will opensuccess
													otherwise open will block which is not what you want


blocking and sleep:
	do not sleep when in atomic context:
		inside spinlock,rcu lock, seqlock ...
	after wake up: Must check resource is available
	before sleep: should check sleep is needed

	wait_queue_head : used to hold waiting processes for one event
	wait_event[_interruptible[_timeout]|_timeout](wait_queue_head, condition) ,(no pointer)
	wake_up[_interruptbile](wait_queue_head*)  interruptible version only wake up processes waited interruptible
		attention:
			wait queue head can be reused
			wakup test should be in atomic
	wake_up_nr
	wake_up_interrible_nr  used to wake up nr number's excluesive wait process, nr == 0 then wake up all excluesive
	wake_up_all 
	wake_up_interrible_all all will be wakeup
	wake_up_interrible_sync:  all above wake_up will make wakeed_up process being scheduled,(except in atmoic context, eg.
				spinlock), we can use this to forcely disable this behavior

	wait queue use:
		condition test Must be done in hold of mutex!!
		one method:
			declare a wait queue head
			lock mutex
			while(condition_not_right) {
				unlock mutex
				if (wait_event_interruptible(queue, condition)){
						singal pending, just return
				}
				//after wakeup
				lock mutex
			}
			// now condition fullfilled and mutex locked, do your job....
		
		two method:
			declare a wait queue head
			while(condition_not_right) {
				define_wait(yourwait_var)  // this represent your process
				unlock_mutex
				if onblock
					return -again
				prepare_to_wait(&your queue head, &your_wait_var, TASK_INTERRUPTIBLE); // set state to interruptible
				if (condition_not_right) // in case condition is set when we are preparing wait
					schedule()
					need_explanation:
						if other thread's wake up happened between if_check and schedule() call,
							nothing is wrong, because now your process is already in wait queue, so will
							be wakeuped correctly----schedule() just return and set to running state
							this check only used to avoid chances you haven't put yourself into queue_head
							and wake up is comming, in which case you will wait infinitly
				finish_wait(&queue_head, &your_wait) // remove wait and set state to running
				if signal_pending(current)
					return -restartsys
				if mutex_lock
					return -restartsys
				// now again from loop up check condition
			}

			attention:
				in method two, if your resource will be consumed by one reader,
				you can use prepare_to_wait_exclusive, wake_up will wakeup only one 
				excusive waiting process and all other non excusive waiting process

	poll epoll select:
		requirement:
			when availiable, return immediately,
			when not available, if nonblock, return eagain, if block, just block

		io mutiplex, 
		driver impletemnt  poll method and inside it, add your waitqueue head using poll_wait method,
		then test your current available status and return mask as POLL_IN|POLL_RDNORM POLLOUT|POLL_WRNORM
		then return

		after one loop, poll, select will just remove all entry from process and recreate again, epoll
		will reserver and so more efficient

		epoll_mechanism:
			user create a epoll fd, kernel will sleep on that process wait entry on a single list,
			then for each fd added, use epoll_ctl to add and will create a wait entry for it and 
			sleep on that fd's wait queue, set a callback which will be waken up by that fd's wake up
			event and add itself to global epoll's ready list, then epoll process wakeup and search each
			one on ready list using driver's poll() func in file_operation and check epollin/epollout message
			and return userspace,

		userspace example:
			see man 7 epoll , man 2 epoll_wait for example

	user async:
		1, set your signal handler for SIGIO
		2, fcntl(fd, F_SETOWN, getpid()) //set current process as the process getting sigio
		3, fcntl(fd, F_SETFL, fcntl(fd, F_GETFL) | FASYNC) 
	kernel async:
		1 f_setow will set file->f_owner
		2 when setting fasync using fcntl, driver's fasync method will be called
			in which you shoud call fasync_helper(args..., your_self's async queue)
			the fd arg is informed when you use sigaction and SA_SIGINFO is specified in sa_flags
		3 when data available, offen in write, you call kill_fasync(queue, SIGIO, poll_in), to sendsignal
		4 in release, use fasync_helper with fd=-1, mode=0

techniques:
	how to use sigaction:
	memset a sigaction structure,
	set sa_handler to your handler
	set flag to 0 if no use
	use sigaction(SIGIO, &action, NULL) to register

	how to allow special access of device:
		1. only once can open: 
			use atomic variable, and init to 1, then every open
			dec_and_test, if not zero inc, and return -ebusy
			every release, inc
		2. only one user can open:
			in open, spinlock, if count not 0,testusing uid_eq with current->uid/current->euid or capable(CAP_DAC_OVERRIDE)
					if count 0, then new user, just record it
			in release, lock, count--
		3 blocking open for one user
			lock , test, if success , just continue set count and user and unlock
						 if fail, unlock, if nonblock, return again, else wait event for condition test ,then lock and check again
			in release, lock, count--,unlock if count 0, wakeupinterruptbile_sync()
		4 open in each different tty:
			check current->signal->tty for process tty has or not, if not , just return -einval
			use key = tty_devnum(current->signal->tty); to get corresponding tty device's devnumber,
			use this as key in a user constructed list to track newly allocated device
				
