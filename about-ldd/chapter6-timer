techniques:
	read from /proc files, use cat can not determine how much data to read
		so use dd bs=20  < /proc/your_file is better
timer:
	include <linux/sched.h>
	HZ in userspace always 100, actually number is not hidden and converted in kernel
		the actually HZ is the timer interrupts in one second, and jiffies will inc by 1

	use jiffies to get jiffies:
		use jiffies / HZ to get seconds
		use time[_after|_before][_eq] to compare two jiffies
		use diff = (long)t2 - (long)t1 to get diff of two jiffies

	or get timespece using
		current_kernel_time()
	or get wall time:
		do_gettimeofday()

	convert from/to struct timespec/timeval to/from jiffies
		timespec_to_jiffies
		timeval_to_jiffies
		jiffies_to_timespec  nanosecond
		jiffies_to_timeval	 microsecond 10^-6
		mktime(...) wall time convert to jiffie

	high_resolution_clock:
		in kernel
		#include <asm/timex.h>
		get_cycles(); if no rdtsc, return 0, otherwise, return rdtsc()
			rdtscll(time)  get clocks

how to wait time:
	long delay: more than one jiffie
		1 use a while loop to check jiffie using timebefore and cpu_relax()
		2 use a while loop to check jiffie using timebefore and schedule() these two both not well, cost too much energy
		3 use wait_event_interruptbile_timeout, just schedule_timeout() (because no one know that wait_queue)
		4 set state to TASK_INTERRUPTBILE and use schedule_timeout, set state is required ,otherwise timer not take effect
	shot delay: 
		busy wait: ndelay udelay mdelay
		msleep[_interruptible]  no busy wait
		ssleep   sleep in second

	
kernel timer: delay execute, may be in interrupt context instead of user process
	#include <linux/timer.h>
	delay execute:
		use in_atomic() in_interrupt()(include<asm/hardirq.h> to judge if we are in environment sleep or schedule NOT permitted,
			if in_interrupt() also current should not be used, and in_atomic() including in_interrupt() and
			spinlock environment;

	NOTE:
		one timerfunc can add itself into timerlist, and added one will run on the same cpu with adding one
			for cache effcient

	usage:
		init_timer
			set function, expire time(final jiffie value),function data
		add_timer  : now start
		del_time   : if you want to cancel, otherwise when timer occurren, it will be removed
		mod_timer :modify expire time of timer
		del_timer_sync: used make sure after return, timer not exucuting,, but will sleep and have lock is dangerous,
						and should make sure timer will not register itself
		timer_pending: if is running

tasklet: it is percpu,  CAN NOT sleep
	just like kernel timer, running on interrupt context, except no timer specified,
		kernel will run it in soft interrupt context in a "proper" time

	assure:
		will not later than the next jiffie comes
		have two level of priority
		can register itself

	api:
		tasklet_init
		tasklet[_hi]_schedule  begin
		tasklet_disable (event schedule will not run, until enable): will wait if current is running
		tasklet_disable_nosync  return immediately
		tasklet_kill will wait if running, and will then remove it, (should disable  adding itself first)
				
work queue:
	create_workqueue (create one on each cpu)
	create_singlethread_workqueue  (only create one on a cpu)

	DECLARE_WORK() define a work statically
	INIT_WORK() init a work  first time
	PREPARE_WORK()  reinit a work after adding into workqueue, will not zero that queu ptr

	queue_work()
	queue_delayed_work()  used to queue work on that workquque
	schedule_work()
	schedule_delayed_work() queue into default workqueue

	cancel_delayed_work() return 1 will not run, return 0 :is running on other cpu
	used together with  
		flush_workqueue(), 
	but flush shared workqueue should use flush_scheduled_work

	destroy_workqueue()  destroy workqueue


	NOTE:
		we can share workqueue with others, and make sure not sleep toomuch time on it,
		otherwise others will hungry
