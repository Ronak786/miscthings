open debug configs
	debug_kernel debug_slab debug_pagealloc debug_spinlock debug_spinlock_sleep init_debug
	debug_info magic_sysrq debug_stackoverflow debug_stack_usage  kallsym
	ikconfig ikconfig_proc acpi_debug debug_driver scsi_contants input_evbug profiling

kernel log:
	/proc/sys/kernel/printk  see man 2 syslog
		echo 8 > xxx  will make all log show on consol

specify other console to get input:
	bytes[2] = {11, number of tty you want};
	ioctl(STDIN_FILENO, TIOCLINUX, bytes);  // not work on fedora28, just for tobe work .....................

printk related:
	if(printk_ratelimite())
		do  your print .....
	config /proc/sys/kernel/printk_ratelimit        interval during output of burst number
			/proc/sys/kenrel/printk_ratelimit_burst how many can output

	printk should append \n for log flush

	print_dev_t(buf, dev_t dev) / format_dev_t(buffer, dev_t dev)
		used to format device number in an uniform formal

	dynamic_printk


proc read function:
	#include <linux/proc_fs.h>  for proc_create
	seq functions:
	1. proc_create(name, file_operations)
		ops = { 
			.open = your_open, in youropen, use single_open(struct file*, your show function, NULL);
			.read, .lseek = seq read, seq_lseek
			.release = single_release
		}
	2. proc_create(name, file_operations)
		ops = {
			.open = seq_open
				in open, use seq_open(struct  file*, your seq_operations)
			.read = seq_read
			.llseek = seq_lseek
			.release = seq_release
		} 
		seq_operations = {
			.start,  just return start place, maybe first time pos is 0 ??, just add it!!
			.next, 
			.stop, 
			.show
		}

		in seq_show, use seq_printf, seq_putc seq_puts seq_escape seq_path to do print things

ioctl:
	used as debug interfaces

track strace:
	use -e specify which syscall to trace
	use -t tell time, 
	use -T tell running time of each syscall

oops:
	open slab debug, will see non inited data as 0xa5a5a5a5, 
	open kallsym, will see which function ,which instruction failed
	if you see on data in stack repeated occurred, may be a buffer addr passed
		across multiple calls

hang:
	insert schedule() func in driver to detect which place is hanging

sysrq:
	use /proc/sysrq-trigger  to trigger
	    /proc/sys/kernel/sysrq

readprofile
	kernel cmdline: profile=2 , then readprofile
oprofile
	have userspace util and shoud config kernel option

LTTng:
	super powerful  kernel and system tracing tool

gdb
	gdb   vmlinux  /proc/kcore  
		see inside a dump of core dynamically, but can not modify
		
		commands:
			print *(addr) this will show that addr's file and line



lock: make policy outer func acquire lock and call inner __locked_func
	mutex
	semaphore:
		declare_mutex(for mutex)
		sema_init      
		down/down_interruptible/down_trylock : most used interruptible,  trylock will only return can or cannot(nonzero)
		up

	rwsem: read write semaphore
		down_read uninterruptible
		down_read_trylock  success return nonzero, will return immediately
		up_read

		down_write
		down_write_trylock
		up_write
		downgrade_write

	completion: a wait and notify mechanism
		wait_for_completion
		wait_for_completion_interruptible
		complete_all
		complete
		complete_and_exit-> wait complete and exit thread

	spinlock: will not sleep, continue waiting until lock is available
			kernel will disable preempt on current cpu if spinlock is locked,
			and developer should make sure code in lock is atomic and can not sleep(like copy from user,kmalloc)
		spin_lock_init
		spin_lock  will not disable irq, if you make sure irq will not use that spinlock ,use this is better
		spin_unlock
		spin_lock_irqsave
		spin_lock_irqrestore
		spin_lock_bh just disable bottom half soft interrupt
		spin_lock_irq   if you make sure only you in THIS line of code will disable and enable irq,
							you may not save irq flags
		spin_trylock
		spin_trylock_bh  this two will try, if success ,return nonzero and locked, otherwise zero

		usually method:
			spin_lock_irqsave(&xxx_lock, flags);
			... critical section here ..
			spin_unlock_irqrestore(&xxx_lock, flags);

	rw_lock:
		spinlock rw version, if not much benefit, just use spinlock


lock-free:
	loop buffer:  read index, write index...
	atomic_t operations
	bit operations:
		#include <asm/bitops.h>
		test_and_set/clear_bit:  someone use this as lock, but recommend using spinlock
	seqlock: must not used to protect structure containing ptr
			most read, seldom write
		seqlock_t lock;
		int number;

		read :
			do {
				number =  read_seqbegin(&lock);
				do your thing ...
			} while (read_seqretry(&lock, number);  // if number is not the same, retry reading 

		write :
			write_seqlock[_irqsave|_irq|_bh](&lock)
			write_sequnlock[_irqsave|_irq|_bh](&lock)
			write_tryseqlock
			
	RCU: most read, seldom write, resource refer using atomic ptr
		read:
			rcu_read_lock/unlock  ,just disable irq and read
		write:
			modify should complete in one step:
				allocate a new strucure,
				replace ptr, now new reader will see new ptr
				prepare a callback after all cpu core finished schedule, invoking this callback
					and free the old ptr
