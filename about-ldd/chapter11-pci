tree /sys/bus/pci/devices
	number format:  [region]:[bus]:[device.num]
					16         8      5    3bit
	we can see irq and other things

io mem access
	seen by all device in one bus
conf access
	seen only by that device of all function

after firware init pci, every device hav different region, so can securitly access
	and get config info from config space

driver use pci id to search device, which get from pci config region
every func has 256byte in config


config register:
	every dev has at least 256byte info, first 64 byte is fixed format like id ....
	pci data is little_endian

	vendor:device  used as a signature for dev
	class:	used as a class of dev, every dev belongs to a class, some driver support a class of dev

	subsystem vendor/deviceid
		for interface chip

structures:
	struct pci_device_id array:
		vendor PCI_ANY_ID to support all dev
		device PCI_ANY_ID
		subvendor PCI_ANY_ID
		subdevice PCI_ANY_ID
		class PCI_ANY_ID
		class_mask
		driver_data

		use PCI_DEVICE(vid, pid) or PCI_DEVICE_CLASS(class, mask) to combine into a structure

		struct array end with a {0,} struct 

		MODULE_DEVICE_TABLE(type(pci|usb...), your_id_struct)
			use this to export your id table of your module to userspace, used by hotplug

	struct pci_driver:
			name : module name
			struct pci_device_id * table
			probe(dev, id)
				if error, return minus
				if success(this dev I want to handle), return 0
			remove()
				when dev removed
			suspend
			resume

	structure pci_dev:
		include <linux/pci_regs.h>
		then use pci_read_config_byte... to manipulate macros offset and mask in above header file
				== dev->bus->ops->read(bus, devfn, where, size, val);
			base addresses can be prefetchable (optimize by compiler) or unprefetchable (only used 
			have side effect)

		get bar resource:
			pci_resource_start(dev, barnumber[0-5])
			pci_resource_end(dev, barnum) return the last availabel addr in that bar
			pci_resource_flags( return flags)
				flags in #include <linux/ioport.h> :IORESOURCE_IO IORESOURCE_MEM/[PREFETCH]/READONLY

		get irq:
			pci_read_config_byte(dev, PCI_INTERRUPT_LINE, &irq);
			pci_read_config_byte(dev, PCI_INTERRUPT_PIN, &pin); // if 0, no support interrupt


register driver:
	pci_register_driver
	pci_unregister_driver

search device manually:
	pci_get_device(vendor, devid, struct pci_dev *): after using 
	should use pci_dev_put(dev) to decrease count
	pci_get_subsys(...) specify subdevid..
	pci_get_slot(pci_bus*, devfn)  search by bus and devnum & func number
													 
	activate:
		should be done after get device or in probe
		pci_enable_device()



