#include <linux/usb.h>
structure:
	device : many config(one time only one config)
	config : many interface
	interface: many setting(switch among)
	interface: some number of end point

	one usb_device: /sys/devices/pci0000\:00/0000\:00\:1a.0/usb3/
	one interface : /sys/devices/pci0000\:00/0000\:00\:1a.0/usb3/3-0:1.0
		usb3 is a roothub, this is a controller, connect usb bus and pci bus , is a  bridge
			be allocated a number , here is 3
			bConfigurationValue  this config value can be written into
		3-0:1.0
			3 is hub number above, 0 is id of hub port, so 3-0 is our usb_device
			1 is config's number, 0 is interface's number

hirechery:
	vfs block ....
	usb device driver (use function provided by core)
	usb core driver
	usb host controller

	driver in hardware (gadget)

endpoint:
	control  : command info
	interrupt : fix speed ,small data
	bulk:	batch of data
	isochronous: no guarantee of data comming

	struct usb_host_endpoint:
		have struct usb_endpoint_descriptor
			endpointaddr(8bit)
			type
			maxpackagesize
			interval(used for interrupt)
interface:
		one interface has multiple endpoint and combine into one function
		one dev has multiple alternating interface settings can switch between

		struct usb_host_interface

		driver need to convert from struct usb_interface to struct usb_device

config:
		struct usb_host_config: store config
		struct usb_device: a usb device



usb request block:
	#include <linux/usb.h>
	driver communicate with device

	driver create urb
			bind to specific endport
			tell usb core
			core tell host controller
			controller finish jobs with device, respond to your driver code with
				callback func
			
	struct urb:
			usb_device *dev,
			int pipe,   usb_cndctrl/bulk/int/isocpipe()/usb_rcvctrlpip
			transflag:
					URB_SHORT_NOT_OK :read short not permitted
					iso_asps:
					no_transfer_dma_map : will use user setted dma buffer
					async unlink : unlink return immediately
					usb_zero_packet :used by some device bulk transfer
					urb_no_interrupt: no interrupt when transfer clear

			transfer_buffer
			transfer_dma : used one of these two
			transfer_buffer_length: 
				size of one of above two
			char *setup_packet :
				used by control urb
				 setup_dma : like above
			usb_complete:
				 a call back from usb driver called by usb core
			void *context:
				user defined data
			actual_length:
				realy received / send length
			status:
				in callback, check success or not
				isoc transfer should use is_frame_desc to check

				val: 0, 
					-enoent,  usb_kill_urb()
					-econnrest, usb_unlink_urb() and transfer_flag to urb_async_Unlnk
					-einprogress: should not this ,means code has problem
					-eilseq : crc fail
					-epipe:
						usb_clear_hatl() to clear this

			start_frame: isoc transfer
			interval : interrupt and isoc
			number_of_packets: isoc

		allocate:
			usb_alloc_urb
			usb_free_urb

		init:
			usb_fill_int/bulk/control_urb
				set transfer flag your self for control
			isoc must init yourself

		submit:
			usb_submit_urb (flag):
				GFP_ATOMIC:
					caller in a complete function, interrupt, bottom half, tasklet, timer
				GFP_NOIO:
					in block io
				GFP_KERNEL:
					others

		return:
			check submit functions return val
			and in complete func, check status val

		cancel:
			usb_kill_urb()
			usb_unlink_urb() better, pass URB_ASYNC_uNLINK in urb and will return immediately,
				canbe used in interrupt

transfer without urb:
	usb_control_msg
	usb_bulk_msg

get descriptor from usb device:
	usb_get_descriptor
	usb_get_string
	usb_string


id :
	struct usb_device_id:
		match_flag:
			decide which below fields be used to match
		vendor,deviceid,  deviceclass, subclass, protocal,  interfaceclass, subclass, protocal

		use USB_DEVICE_XX MACROS to make id,

		then MODULE_DEVICE_TABLE(usb, table);

struct usb_driver:
	owner
	name
	id_table
		if want to probe all device, just set one entry with driver_info as 42 and another emtpy one
	probe
	disconnect
		running in usb kernel thread, so sleep is permitted

	register into system:
		usb_register
		usb_deregister

	in probe:
		query interface for endpoint info, init your own struct, use usb_set_infdata(intf, your_dev_struct);//save private date
		use usb_get_infdate to get it

		usb_register_dev(intf, &usb_class_driver)
			class driver used to communicate with userspace using file operation 
		usb_deregister_dev(...)
