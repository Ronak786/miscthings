其他：
    libc++是mac的
    libstdc++是gnu的，一般都是这个 ,在clang -stdlib=libc++ = libstdc++可以修改, 默认好像是gnu的
    共享名称
        使用设计模式共享名称，交流方便，
        库给了你方便的调用实现
        模式给了你组织函数调用的方法
        即使没有模式使用，也可以利用抽象封装继承多态，提前想到需要的部分预防
    针对接口而不是实现编程
    多用组合，少用继承
    把多变的部分抽离出来，保持耦合和复用性
    设计原则：
        对扩展开放，对修改关闭


现象
    把易于变化的部分封装起来，作为一个单独的类，这样不用每次修改，每个子类继承的时候都重复修改了，直接复用变化部分的类的继承体系中的
    某个就行了. 行为也可以是某种类，因为行为也有状态，也有具体的动作 
    复用的类可以作为参数，可以直接在内部构造中用作初始化
    用虚函数用继承，不如使用这种额外类的方法,而且这样可以动态改变使用的组合类成员
tip：
    少用继承，多用组合
    继承要秉持is-a的关系注意，一般组合比较好而且可以动态修改

学名 策略模式 多种选择的模式
    把动态可改变的部分提取出来，作为算法族，组合起来
        使用java的名称，算法族中是实现关系，实现算法的抽象接口
        而类里面是继承关系，以及和算法是组合关系


现象
    需要在某件事情发生的时候执行一系列动作，还要保证动作的可扩展性
学名 观察者模式, 一对多模式通知模式
    主题就是观察对象，接受通知的就是观察者
做法：
    分为观察者以及主题，主题有公共的订阅，删除订阅和通知函数，利用抽象基类
                        观察者有公共的可被调用函数
                        把观察者注册到主题上，观察者本身留一个指针
                        这样观察者可以控制删除
                        同时可以在主题上留有接口和改变标记，让观察者主动去“拉”
    注意
        不要依赖观察者的顺序


现象：
    需要多种添加产品共通构造，而且添加需要动态，以后
    还会一直添加或删除
学名 装饰者模式
方法：
    首先是你的正常的基本物品的类继承体系，然后对于
        附加的点缀品，也从抽象基类继承出来一个抽象的点缀
        类，这个抽象的目的是提供后面具体装饰类可以
        进行多态调用的函数指针可用性的基础
    然后对于每个装饰类，包含一个基类指针，
        每个装饰类都可以在其他装饰的基础上进行动作了.
    注意针对抽象类编程
举例
    java中的inputstream类体系就是装饰器，利用装饰器在
    普通的派生类上包装一层功能
    注意给类加函数调用的时候，真真使用的类是
        装饰器里的成员的那个类，不是装饰器作为继承
        部分的那个类！！

现象：
    我需要在多个类似的对象中选择创建一个
学名 
    1 简单工厂方法
        使用一个对象把创建过程封装，返回具体的对象，
            使用基类指针引用，这样对接口编程，
            把变化缩小到最小
        工厂对象是固有唯一的，内部实现具体的创造某个类的对象
            的过程
    2 另一种工厂方法
        只提供一个create的接口，由每个子类自己负责实现具体的
        创造流程
     
