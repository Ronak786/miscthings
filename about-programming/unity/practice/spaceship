从asset 下载插件
    然后可以再创建项目的时候add asset，会自动加到asset目录里面

save
    这个会保存当前的scene，标题会放到顶上
build target
    file->build sesetting
        选择，然后switch platform
    还可以player setting        
        同样在edit prjectsettting  player
                可以设定project级别或者平台相关必须分辨率
            还可以再game预览的地方进行开发时候测试的时候的设置

    物理效果，需要加一个rigidbody， 不需要重力就取消勾选
    碰撞区域划分，加一个collider(capsule collider) ,也需要rigidbody
        通过调节direction调节height的增长方向
        r 调节体积面上原的半径，目的是正好包住，
        屏幕右上那个轴点击可以调整哪一边是面向屏幕上方的
        还有其他collider box sphere mesh等，

        使用mesh collider要选中convex 记住
            mesh collider使用mesh slot from  mesh filter
                也可以自制collider然后拖入框中
            计算消耗大,大游戏不推荐
            选择is trigger，碰撞就只会有一个触发，而不是物理效果，
                我们需要的就是一个碰撞信号1

        目的是网格的覆盖判定，增加其他collider要手动删掉原来的
        edit collider 可以直接屏幕 拖拽

camera
    默认有一个，可以调整位置
        有两种模式，聚焦模式和orthographic
    根据实际画面调整初始位置，可以调整caremra或者物体，建议camera
    clear flags是默认背景吧，skybox 默认有一个
        再window lighting 里面，如果没有，会默认使用background

light
    记住取消默认light
    direction light 这个是平行光，和位置无关，和角度相关
        可以跟着camrea角度设置
    intensity 调整光密度，可以模仿阳光，大概1.5
    光源可以放在各种角度，造成边缘微亮（超底部照）等，不同颜色效果

    把所有相同东西放入同一个文件夹，可以一起移动

3d->quad
    这个用来存放一张图片可以，直接把dff图片拖上去就行了
    shader用来处理光泽的显示
        unlit->texture表示i独立，不需要光照，默认是有光照的

设置速度
    GetComponent<Rigidbody>() 
    rb.velocity = (xx,xx,xx)直接设置速度，和add force不同，这个
        直接改变速度方向

Mathf 
    数学函数类
        Clamp(限定值的范围）

[System.Serializable]
    放在自己定义的类上面，这样unity才会认识这个类：
    想要public变量不占用多个行，可以折叠，要放在一个单独类里面

根据速度小幅度翻转
    rb = Quaternion.Euler(0, 0, rb.velocity.x * tilt)
        在bank角度上反转 注意偏转方向和移动方向相反，左手坐标系

new gameobject
    ctrl shift n
texture material
    把文本和物体放在一起
    在material的albedo左边可以找不同的texture放进去
    然后把material放到指定的project里

    shader
        particle additive 这个把颜色值加到已有的上面去，黑色加0，白色加255等

local z axis: transform.forward
rotation:
    注意如果rotate这个，包裹网点方向也会反转，会出错，
        可以搞个父节点来包裹

在播放状态下改变的所有会回复的

飞船发射头
    新建一个gameobject作为player的child然后放在相对位移的头部即可

object.Instantiate () as xxxobjtype
    生成一个对象作为某个对象，返回一个gameobject
    用于动态生成

要经常使用变量然后拖入的形式，应为更灵活
    如果声明transform拖入object，因为继承了transform所以
        接口指针转换成功！！

    在edti project setting input里可以调整每个按键的电脑设置

cube
    可以作为边界
    内置box collider 这个默认只在scene可见，game的时候不可见

ontriggerexit
    不碰到是销毁

旋转
    angularvelocity， 计算
    random。insideunitsphere * xxx 可以自定义角速度
    angular drag 阻力，需要清空，不然会变慢的

gameobject
    默认脚本里引用当前对象
    destry 是标记，frame函数全部做完才destroy，所以顺序不重要

debug
    debug.log可以记录然后底下或者console查看

拖动脚本到指定的object，可以在他地下生成一个同样的脚本

要控制游戏，可以设置一个空的gameobject
    然后再里面instan 生成一个你要的对象

产生对象，等待，
    等待的函数作为coroutine存在才不会导致游戏死机，这
        就需要返回值IEnumerator，
        具体的函数前 yield return new func(param);
        然后外面调用出 StartCoroutine( func());

        这种函数可以放在start里面的，会不断进入调用，start只是说开始
            这些调用

对于存在的隐藏物体
    可以挂接一个destroy脚本，设置destroy时间，
        比如爆炸，再爆炸图上destroy一个时间，就会delete资源了

增加音频
    直接拖拽音频文件到object上，或者手动创建audiosource放进去

需要和其他对象的函数交互
    提供publicscore

模板，prefab中不能放置实例的引用，
    需要再start的时候进行动态加载
    gameobject.findwithtag 可以找到实例
    uitext 使用 Text获取文本框，然后放置文本，

    如果需要其他脚本的合作，就提供函数，
        需要按键，就inputkeydown，然后keycode.xxx判断
        SceneManager.LoadScene("xxx") 重新载入某个场景

使用数组
    然后random.range获取其中一个也是可以的

starfield
    用来布满星星，记住prewarm，这样预先布满屏幕
    利用math repeat来再一个范围内循环数字，可以作为屏幕的挪动
        其实就是每个udpate里设置渐进的坐标


增加物体的守则
    增加一个空物体，然后把模型附着到地下，而不是直接放模型

invokerepeating
    重复调用某个函数

父子
    子的方向是基于父的，所以父的改变会改变子自己的上下左右，也就是原来
        子的上变成了父看来的下

对于asset frefab里的东西的脚本，如果想要获取某个实例的引用，需要再内部
    使用getobjectwithtag然后检查null
