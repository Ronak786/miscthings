using namespace::name 
    的形式可以直接写name，不用加空间 using std::cin
    cin >> xxx xxx 就行了， 每个类名字都要这么写，注意头文件里不要搞

#include <string>
    string: 默认初始化为空串
        初始话： s("hhhe"0)  s(10, 'c') s = "hehehe",  s = q, s(q)
        s1=s2是赋值，给的是副本，不是引用
        os << s
        is >> s
        getline(is, s)
            读取丢弃换行
        s.empty()
        s.size()
        s[n]
        s1 + s2
            s1 + "hehe" + s2 + '\n'
            可以混加，条件按顺序加的符号两边至少一个是string类型，“xxx” 不是string类型注意，不一样
        s1 = s2
        s1 == s2
        s1 != s2
        < <= > >=
        string::size_type size（）返回的类型，可以用auto定义出来，适合存储
            注意有size的地方就全部使用无符号型，因为size（）本身返回无符号

        遍历：
            范围for   for (var : expr)
            for (auto c : str)
            for (auto &c : str) 可以使用引用，可以实时修改
                cout << c << endl;
            for (decltype(s.size()) index = 0; index < s.size(); index++)
                or string::size_type index = 0; 使用这类型保证了非负，这样只要检验是否超额就行了

            for 下标（size_type 类型的）

    cctype 
        头文件，ctype一样的，有isnum之类的
        c++的头文件中标准库的部分都是c的头文件 xx.h =>  cxx 没有h,而且都在std：：里面


    cin
        这个会跳过空白字符

#include <vector> 容纳同类型的多个变量
    类模板，和java类似的通用类
    能包含多数对象，但引用不是对象，不行, 内置也可以
    vector<vector<int> > 也可以，老式编译器需要右边的空格
    vector<T> ivec{1,2,3,4}   = {1,2,3,4}
                ivec(10, -1) 10个-1
                ivec(initializer_list<xxx>) 类型也可以
                ivec(10) 那么初始化10个默认初始化的元素,注意不能ivec = 10
                用话括号表示初始的是元素
                用袁括号表示创建的元素数量
                    当然使用花括号，出现类型不匹配的情况，会自动尝试圆括号的行为
        所有的拷贝初始化只能初始化一个值，列表需要用花括号，而且不拷贝

    添加元素：
        s.emplace_back(xx,xx,xx,xx)
            接受可变参数，直接构造，不用任何括号，只能构造一个每次，然后插入，默认构造就留空
        s.push_back(xx) 
            这个比预先设定大小好，除非具有默认值,而且量一定
        注意，范围for里面不应该添加vector，不然不能用
        s.empty()
        s.size()
        s[n]
        s1 = s2 
            s1 = {1,2,3,4,5} 
            拷贝替换
        s1 == s2 s1 != s2  > >= < <=
        vector<int>::size_type 要这样使用
            这里的大小和等于关系和字符串一样，要考虑顺序和长短, 需要元素可比较才能比较
        
        下标只能用来访问，不能添加元素

迭代器 使用中不能添加元素！！
    string vector都支持迭代器操作，
    auto b = s.begin(),  auto e = s.end() 
            s.cbegin  cend() 这两个返回常量类型，固定
        end是尾部元素的后面一个地址，用于判断结尾的
        迭代器的操作和指针类似：
            *iter,  iter->mem, ++iter --iter iter == end iter!=end
            *iter 返回的是引用，可以就地修改
                注意 == ！= 的判断比大于小于要好，因为不是所有容器的迭代都支持
                大于小于的
                如果要访问元素的成员，可以直接iter->mem  (*iter).mem
        一般这种不知道的类型，比如size，比如迭代器都用auto，，其实他们都是
            vector<string>::iterator or  string::iterator              
            const_iterator ,iterator, 如果对象是常量返回的就是const_iterator
                const vector<int> xxxx

    string vector 的迭代器运算
        iter +n  iter -n
        it1 < it2,  距离的类型是difference_type ,都在各自定义了

数组
    数量必须是常量表达式或者constexpr
    数量固定，不能使用auto， 元素不能使引用
    int a[] = {xx,xx,xx,xx}
    char a[] = "xxxx" 注意空字符也存储进去了
    数组不能拷贝赋值
    int (*arr) [10]  
    int (&arr) [10]  数组的引用，数组的指针
        解释的时候由内向外

    下标的类型是size_t, in cstddef
    for (auto xx: arr) 遍历

    指针与数组
        如果使用auto 那么用来拷贝的对象是数组的话，得到的类型是个指针
        decltype得到的则是完成的同样类型同样成员数量的数组
        可以迭代
            int *e = &arr[end] 可以i获取最后之后一个位置的地址作为迭代结尾
        对一个数组对象赋值给一个指针，获得是对数组地一个元素的指针，
            这个想法可以扩展到多维数组
        数组也可以迭代
            int a[] = xxxx
            int * = begin(a) int * = end(a) 即可
            指针相减结果是ptrdiff_t类型的 in cstddef,  size_t also in that

    cstring
        string.h 的c++版本，
        string对象可以用char数组0结尾的初始化
        string s,  s.c_str() 可以获得对应的char数组
        vector<int> a(begin(arr), end(arr)), 可以利用数组迭代来初始化vector，
                这里可以直接用数组指针

    多维数组‘
        int (*arr)[4]  这个获得是指向二维数组地一个元素的指针
        遍历
            for (auto &j: arr2) 范围for要注意
                for(auto &i: j)
                    可以在这里对每个元素操作，  最外层的引用一定要，不然auto会把
                    一维数组对象解释为一个指针
                    如果使用begin end的话要简洁一些
                    for(auto p = begin(arr2); p != end(arr2); ++p)
                    for (auto q = begin(*p); q != end(*p) ; ++q)
                        *q ....
            int ia[3][4]
            int (*p)[4]
            p = &ia[2]  因为p是指向一维数组对象的指针，所以要一维对象取址

        别名
            using int_array = int[4];
            typedef int  int_array[4] 这种都可以简化的

        多维的遍历：
            １传统便利，第一层的对象应该声明指向第二层数组的指针，然后条件结尾是最后一个数组后面的那个的地址
                第二层循环是数组元素的指针，然后结尾是最后一个元素的地址
                   for (int (*p)[3] = ia; p != &ia[2]; p++)  {
                       for (int *q = *p; q != &(*p)[3]; q++) {
                           cout << *q << " ";
                       }
                using int_arr = int[3] 这个可以省略一点，用for(int_arr &k : ia)即可j
            2 使用范围for
                第一层是对第二层数组的引用，第二层是对每个数值，可以不引用，地一层一定要引用，不引用的话，
                就退化成数组地一个元素的指针了，也就是普通int*
                    for (int (&p)[3] : ia){
                        for (int  q : p) {
                            cout << q << " ";
                        }
                    }


