注意：
    设计的时候，对于需要共享的在某个类中额成员，使用new或者shareptr表示，这样
    可以自动进行计算引用,即使本类被销毁，但是这个额外分配的指针还是可以被其他人正常引用，就要保证这一点
new delete
    分配释放

智能指针 in <memory> 这个指针搞出来的和new出来的一样，默认就是不会自动销毁的了，记住不需要再new了，也没有delete了
    unique_ptr
    shared_ptr
    weak_ptr 三种指针，表示独占，共享以及弱指针
    和容器一样的模板声明
        unique_ptr<string> sptr;

    操作
        通用
            p, *p p->mem  像指针一样使用
            p.get()返回指针本体 
                这个是用来给不能接受share的函数传递指针用的，注意不要被释放，不要被再次变为share
            p.swap(q)
            swap(q,p)交换指针
        share独有
            make_shared<T>(args) 初始化并返回一个指针, args就是构造的时候的参数，直接写
            shared_ptr<T> p(q) copy并增加q的引用计数
            p = q 减少p的，增加q的计数如果p的引用为0 就自动释放,(这里的p说的额是p原来的值）
            p.unique() 是否只有自己咋引用
            p.use_count() 返回引用总数 较慢
        引用
            无论何时产生引用，包括函数参数，return 返回值，都会增加引用计数
            为0的时候会自动调用析构函数

目的是让单个内存位置共享

手动管理方式
    new delete
    type * xx = new type(初始化的地方，留空就是默认初始化，最好有括号不然值未定义）
    type *xx = new type{initializer_list}
    const type *xx = new const type() 必须初始化，不然就默认了
    you can
        auto p = new auto(obj) 
            限制是括号里只能有一个对象，这样编译器自动判断你要的类型

    分配失败， in <new>
        throw  bad_alloc
        可以 type *xx = new (nothrow) type() 来抑制异常，这样返回空指针 叫定位new
    释放
        delete只能释放一次，释放null没问题
        delete后养成习惯重置为nullptr这样更安全

    结合shareptr
        shared_ptr<int> p2(new int(42)); 只能直接初始化，不能赋值，因为这个是explicit
            所以不能在返回shareptr的函数中返回new xxx, 要shared_ptr<int>(new xxxx) 这样返回
        shared_ptr<T> p(q) (new的q指针传给p）
        sahred_ptr<T> p(u) pass unque_ptr to shared_ptr and null the unque
        shared_ptr<T> p(q, d) use d as the 析构函数
        shared_ptr<T> p(p2,d) 拷贝p2,用d系够函数
        p.reset()
        p.reset(q) 这个接受一个new出来的指针，而不是share指针，不然直接赋值就行了
        p.reset(p.d)  这三个如果p是唯一的，就释放，然后把q复制给p，然后析构函数用q
                主要是用来重新给shareptr分配指针值的
            自己编写系够delete
                void xxx(type *ptr) { }

    优点：
        如果异常发生，在当前函数产生的new出来的会自己释放，很好的
    注意
        不要初始化多个智能指针到同一个指针上
        不要delete get返回的
        不要reset一个get返回的
        注意get使用时只能智能指针不能无效
        如果使用只能指针管理非new资源，要传递delete函数！！
            可以lambda,方便

unique_ptr
    初始化 unique_ptr<type> p1(new int(42)) 这样，只能这样
    因为唯一所以不能拷贝
    unique_ptr<int[]> up(new int[10]) 动态数组分配，释放只需要release
    unique_ptr<T> u(p)
    unique_ptr<T,D> u
    unique_ptr<T,D> u(d) 设定d为D类型的系够使用
        这里和share不一样，和关联容器重载hash，等于符号一样，需要在尖括号声明的
    u.release()  取消控制，返回指针本身
    u.reset() 释放指针
    u.reset(q)
    u.reset(nullptr)
        eg. u.reset(u2.release())
    例外
        可以拷贝即将销毁的对象，如函数的返回值可以是unique_ptr,因为返回后原来的就销毁了

weak_ptr
    指向一个shareptr，但是不增加引用引用共用
    weak_ptr<T> w(share_ptr)
    w = p (share or weak)
    w.reset()
    w.use_count() 
    w.expired() 对应的share是否已经释放
    w.lock  如果释放了，返回空，不然返回share 
        正确的访问方法

动态数组
    type * xx = new type[size()];
    new type[]() 默认初始化0
    new type[]{xxx,xx,xx} 初始化列表
        throw bad_array_new_length in <new>
        只能使用值初始化，不能迭代其，返回的仅仅是一个指针，你要自己管理删除所有空间
        new int[0]也是可以的，的到的就是尾后迭代其--一个指针，不能deref
    delete [] p 即使使用了类型别名分配，还是需要[]额释放

    使用unique的时候里面的元素需要用下标直接访问指针，不能解引用进去，

    shared_ptr<int> sp(new int[20], [](int *p) (delete [] p;));
    shared_ptr不支持自动管理删除动态数组，所以要传入删除函数 
        访问元素 *(sp.get() +i) = i 这样访问，因为不支持动态数组，获得的是一个指针

allocator in <memory>
    分离内存分配和对象初始化，等需要的时候再初始化
    vector之类的应该更好，除非需要分离初始化和分配内存

    allocator<T> a
    a.allocate(n)  返回实际的指针
    a.deallocate(p,n)  这个和malloc free一样用注意对象本省的desctory要先调用
    a.destroy(p) 
    a.construct(p, args) 在p指向的区域用args构造一个对象
        construct(p, std::move(oldelem))  表示旧的元素的移动，使用std的版本对标准类型操作
        这里分配的位置都是未构造的位置，所以要一个一个去construct以及destroy

    批量copy fill
        uninitialized_copy(b,e,b2) copy到b2迭代其的地方
        uninitialized_copy_n(b,n,b2)
        uninitialized_fill(b,e,t)
        uninitialized_fill_n(b,n,t)
            返回的是接下来的位置
