左值，右值
    作为左值使用的地址，右值使用的是里面的内容
    decltype 对左值的到引用，  因为表达式也是左值类型，所以获得引用　
    如果函数返回一个指针的解引用，那么也是左值，返回类型应该用引用

优先级，结合率，还有求职顺序
    最后那个是不一定的注意

%
    余数和被除数的符号一致，商向０靠拢
!  
<>
== !=
&&
||  按这个优先级

++ -- 
    建议使用前置版本，不用存储旧值
    后置会先执行，但是返回的值是原来的值
    *beg = *beg++ 这个有问题的，＋＋不知道是赋值前还是后生效
    . 比＊优先级高

:? 
    放咋ｃｏｕｔ里注意，括号，因为优先级比<< 低

bit :
    ~  << >> & ^ | 优先级降低 注意对象小整数会自动提升，最后赋值再降低
        使用带符号的数值以来具体机器，最好不要用
        移位要小于提升后的位数不然为定义
        注意变量使用后缀如UL  L
        移位比算数低，比比较关系高

sizeof
    这个可以sizeof *p 不会实际去解引用，可以放心使用
    可以获取数组的大小，可以获取引用对应的类型的大小
    这个是常量，可以用来声明数组大小
    sizeof vector
        返回固定部分，没有后面的每个元素的部分

整形提升
    小的提升到int 或者unsigned  如果int不够的话
    转换中小的变成大的，有符号变成无符号如果无符号范围够大，否则无符号转成带符号(如long => unsigned, 如果
        机器上两个一样大）

    隐式
        数组赋值给指针，会转成指针
        decltype 引用  sizeof不会转化
    强制
        static_cast<double*>p  就是明确的去转换
        const_cast ... 去掉常量const因素
        reinterpert_cast 位模式上的转化
            也就是并非只是赋值一个新的，而是在以前地址上
            重新解释，这个和前面两个不一样
            ，int *ip, char *pc = reinterpert_cast<char*>pc  不太好

优先级
1  ::xxx  class::xxx  namespace::xxx  作用域
2 . -> [] ()
3 a++ a--(右结合，如果多个同样的符号，从右向左结合） typeid() 显示转换
4 ++a --a - ! ~ + - & ()  sizeof new delete 
5 ->*  .* 指向成员的指针？？
6 * / %
7 + -  
8 << >>
9 < > 
10 == != 
11 &
12 ^  抑或
13 |
14 &&
15 ||
16 ? :
17 =
18 *= ....
19 throw
20 ,



