责任链
    共同继承一个base，然后每个人判断自己是否处理，处理直接返回，
    不处理就地交给其他人

static
    除了全局，其他private等限制一样，和virtual排斥，构造，某些重载不能声明这个
    声明定义
        只要不是整形或者enum char等，就不能在类内部直接定义，内部相当与extern，
        外面的定义才是定义，外面不需要static
        记住不要头文件定义
    调用
        classname::func() 内部可以传势力名字之类的

    对于构造私有的函数，可以通过内置静态来调用生成，或者重载及friend某个外部函数

重载操作符（内部的不能static）
    如果内部外部都有，选择class的（更特定的）
    ++x operator++()
    x++ operator++(int{}) 参数用于区分前后
    可外内
        + - 
    只能内部
        赋值

    = 复制会自动生成和构造一样，但是如果某个成员的这个没有，就不会生成
    外部caozuofu 重载可以放在任何名字空间
    注意写重载时候哪些要const！！！ ostream之类的不要的

重载类型转换
    operator type() const {
        return type;
    }
    如果强制显式转换，前面加explicit

    可以i重载operator-> 编译器会一直调用下去直到返回指针
    . ->* .*不行
    写的时候要考虑和原来的操作副效果一致

成员和函数指针 .* 高于（）优先级
   membertype classname::* ptr = &classname::member
     int Vector::* p1 = &Vector::data1; 成员指针
    使用
        obj.*p1 即可
            ->*
    成员函数指针 支持虚函数，记住，所以赋值好之后调用还是会调用到虚函数最顶层那个的
        func: int GetX() const;
        指针： int(classname::*p)()const = &class::funcname; 要这样写
        传入   &classname::GetX
    typedef int(class::*p)()const ; 然后使用 p xxx;
    或者 using p = int(class::*)()const ;然后 p xxx;

迭代器
    std::begin()  cbegin end cend rbegin rend 可以取出迭代器
    rbegin 属于 c++14
    prev()  next() 可以获得前后迭代器，不会修改本身

    如果自己实现迭代器的函数
        注意使用next prev代替各种+1 -1, ++ -- 这两个是可以的
        像list的+1之类是没有的，

    冒泡
        这个从后往前更好，外层从前往后，内曾从后往前，每次到达外层的那个index位置，
            再往前就是拍好的了q

    stack
        pop top push emptpy size
    queue
        front back push pop empty size
    list
        push_front push_back pop_...   size
        clear insert erase
        emplace 这个现在有右值引用，其实可以不用了


map
    map<xx,xx> xxx;
    xxx.insert(make_pair(xx,xx));
set
	insert
	find erase clear count

算法函数
    transform(begin ,end, begin2, lambda)
        把begin到end通过lambda计算放入beign2开始的地方o
        返回最后的位置，如果插入原位，那么返回的也刚好是结束的位置
    copy_if(begin, end, iterator, lambda)
        满足函数就复制到it的地方，这里可以使用backinserter来做到插入复制
    partition(begin, end, lambda)
        满足的放前面，不满足的后面，返回第一个ｆａｌｓｅ的位置
    accumulate(begin, end, init, lamda)
        再初始值上不断+ lambda处理过的元素 ,lambda(int a, int b) 第一个参数从init开始
    std::plus<T>() 返回一个加法函数某个特定类型

auto prefix =  accumulate(begin(xs)+1, end(xs),
        end(first), [&](auto it, auto str) {
            return mismatch(begin(first), it, begin(str), end(str)).first;
        });
    解释
        这段的意思是从xs的vectorstring数组中从第二个开始取出，然后逐个和第一个比较，一开始比较到尾部，所以end（first）
        后面比较的都是mismatch返回第一个不匹配迭代器位置，
        所以最后得到的是所有字符串的公共前缀，


异常：
    try {
        throw xxx;
    } catch (type xx) { 也可以没有xx
        xxx;
        throw;
    }  可以是任何东西被跑出来，类型相同的catch会接受，也可以throw再抛出
    多个catch不能捕获相同异常 比如int  int& 这些捕获是一样的

    构造里的异常
        如果构造里发生异常，（函数体执行前） 那么按照逆序执行析构
                                函数体内ｔｈｒｏｗ，　也是一样的，初始化的变量都会自动析构
        构造线初始化，然后才你的函数体，
            析构先函数体，然后才销毁,如果throw，那直接就停了

        准则
            构造函数里，如果不用shared unique ptr， 那么手动try catch每个new出来的，放置出错，
            构造的资源析构处理
            析构不要抛出异常
            构造异常之后catch要throw，让外面知道

        标准库
            标准的，看一下
            无法分配都会throw  bad alloc
            异常安全，就是不会泄露内存, 如果除了问题，会恢复原样
        除0， 读0指针都是崩溃，os相关，不是异样，不能捕获




