new delete
内存泄漏查看 visual studio
    #define _CRTDBG_MAP_ALLOC
    #include <stdlib.h>
    #include <crtdbg.h>
    #define NEW_WITH_MEMORY_LEAK_CHECKING new(_NORMAL_BLOCK, __FILE__, __LINE__)
    #define new NEW_WITH_MEMORY_LEAK_CHECKING

    放文件开头
    _CrtDumpMemoryLeaks();
    放主函数结尾return之前

    这样，运行完后，会显示new malloc 没有free delete的所有位置等信息

继承
    dynamic cast
    static cast  两者都可以用于父子类之间转换，
        但是前者更好，如果确实不可以转，会返回nullptr，后者不检查
        没有继承关系这两种都是不可以转的，第二种会编译报错

    子类使用virtual函数：
        xxx override；表明确实是覆盖父类函数, 可以不写virtual
        构造 subclass(xxx):superclass{xxxx}初始化
            如果父类没有默认构造，那子类一定要这么写，子类也不会有默认构造，
                写=default也没有

        纯虚函数 =0; 子类一定要实现这个

    调用重载函数的的时候类别一定要对上

设计模式初探
    visitor访问者模式
        好处是增加新的东西比dynamiccast之后到处ifelse方便，
            只要在子类调用的地方放入外置的访问器类，内部根据不同的子类设计不同的重载函数，
                然后统一在每个子类里有一个函数以这个类或者这个访问其类的子类的指针为参数，
                1,继承访问器类可以实现不同子功能
                2 只要每个子类统一一样调用就行了，这样就可以用父类指针搞定这件事情了


public private等
    类静态成员的外部访问需要 classname:: funcname
    public继承
        public成员可以访问
    定义和使用者一样，定义在直接本类里面的public protected private
        可以访问
    定义在定义者的直接基类里,使用者和定义这一样，可以访问public protected，不能private
    
    定义在定义者的基类里，使用者不同与定义者， public可访问，protected private不可访问，而且不能转化基类
        派生类指针
    定义在基类里，使用者继承子定义类，通过自身来访问定义类：
        定义类public基类：public protected可访问 注意！！！
            protected 基类：同上
            private ： 不行，也不能转换指针
    内部类，不论public protected private 和主类看到的一样

    private继承的任务就是组织某些构造函数的出现默认，以及防止无意义的基类指针转换

    虚析构函数用来防止内存泄漏
        注意，派生类的数组这样转换指针的话，不要轻易delete
            因为某些实现的基类派生类指针长度不一样，vc++没这个问题

    防止继承
        基类析构函数纯虚，可以继承，不能正常释放
        基类析构函数 = delete 或者在private里， 不能继承
        直接防止构造也是可以的



    子类调用父类的被覆盖函数
        obj.superclassname::func

虚函数与ｖｉｓｉｔｏｒ模式
    前者解决问题通过增加继承类的自定义函数，缺点是要修改所有子类
    后者通过一个额外的接口放在基类里来筛选调用子类的何种功能，通过子类ｔｈｉｓ指针来选择进入重载的哪个函数，
        方便，但是ｖｉｓｉｔｏｒ里要对所有子类做探讨

    里式转换原则
        凡是子类的地方都可以用父类代替，不然不应该为子类

    构造释放准则
        为满足设计模式，谁构造谁释放，构造利用函数，释放也要函数
        shared_ptr 利用这个可以避免释放，可以传入自己的析构函数

    智能指针推荐
		shared_ptr 代表了共有所有权,代表了共享，么有共享意义的地方不该用
        unique: make_unique<xxx>  obj.release() 释放并返回ｕｎｉｑｕｅ指针内容，用来初始化另一个
        weak_ptr 这个使用前要ｌｏｃｋ返回给一个ｓｈａｒｅｐｔｒ才能判断使用之类的
            利用shared 来创造weak
        unique shared
            get() return the ptr
            从一个unique构造其他需要release自己
        waek_ptr
            expired() 判断时候没了
            lock() 返回一个share指针
            只能从shared来初始化，不能从unique

            这个在树形里面用做指向父节点的指针，不能shared，因为这样构成环形，
                而任何环形的shared都不会释放内存，一定会泄漏

	#ifndef NDEBUG
#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>
#define CHECK_MEMORY_LEAKS_NEW new(_NORMAL_BLOCK, __FILE__, __LINE__)
#define new CHECK_MEMORY_LEAKS_NEW
#endif

_CrtDumpMemoryLeaks() 用于内存泄漏检查，在保证已经全部释放后调用这个

类型转换注意
    要使用dynamiccast，base至少有一个vurtial函数才行
    数值解释的转换使用reinterpret
    

对于继承中父类函数的调用
    obj->classname::func()
    如果一个类同时继承自两个类
        那么拥有其中一个的base指针（指向child的）
            可以dynamic转换到另一个base上的，（当然dynamic要求有ivirtual函数存在）

虚拟继承
   如果不使用的话，菱形继承会有多分原始base代码 
   class A;
   class B:virtual A;
   class C:virtual A;
   class D:B,C
    就行了
    如果从bc继承了同样的函数,那么需要在D里面也有一个，作为final override，不然编译就过不去
        使用可以classname::xxx来特别选择某个类里面的

friend 无法被继承类使用
    赋予函数访问protected private的能力
    写在类里面即可，外面定义的时候不用写
    friend func
    friend struct...
    不受public等影响

    内部类
        这个想要访问外部类，不需要friend定义标签，直接函数里就可以使用外部类
        当然是可其他类一样要传类引用进去的，不是直接使用内部成员，毕竟不知道外部类有没有生成过，
        内外只是名字空间的差别罢了

    重载标准函数
        在std里，所以要打开std空间
        模板重载需要 template<>func() 的形式,参数要符合
        如果放在class内，还需要原本的声明friend后放在类里面

        通过隐藏构造和系够，然后利用其他friend方法介入控制可构造方法
            可以避免必须本地构造，只允许堆构造,也可以避免继承
