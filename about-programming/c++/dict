关联容器

map multimap  in <map>
set multiset  in <set>
unordered_map unordered_set  以及multi版本在 unordered_map  unordered_set

unorder代表无序，multi代表；关键字可以重复

map:
    map<string, size_t> xxx;
    xxx[string] = aaa;  每个值会有默认值，如果不存在，获取的时候就是默认值
    for(xxx:xxxxx) 
        获得的对象是一个pair对象，first保存key second保存value

set:
    set<xxx> = {xx,xx,xx,xx} 
    set.find(xxx) == set.end()表示不存在 或者返回一个指向的迭代其

关联容器i
    支持普通容器的操作于295页，swap 赋值，初始化，iterator begin end等
        map = { {xx,xx},{xx,xx}}
        set = {xx,xx,xx,xx} (beg, end)
        但是不支持insert，构造等函数,push_xxx
        迭代其双向的
        支持传递比较操作，和算法一样
    关键字
        必须支持<运算符 所以传入vector容器的iter做key可以，传入list的不可以，不支持《
            但是可以利用函数初始化
        如果双方都不满足，视为等于，而等于在关联容器里指向同一个位置元素

        使用函数初始化
        define func(xxx)
        multiset<class_type, decltype(func) *>  name(func) / name(&func)
            首先声明里是函数指针类型的声明，那里只放类型记住，后面指定用特定的函数指针赋值过去
        
    pair类型
        in <utility>
        pair<type, type> 创建两个类型 成员public直接访问first, second
        pair<type ,tyep>p(v1,v2)  p{v1,v2}
        make_pair(v1,v2) 自动推断类型，返回pair
        p1 < > >= <= p2
        p1 == p2 
        p1!= p2

        创建pair的方法
            可以利用{}初始化作为返回，而返回类型定义为pair，新标准可以的
            make_pair()
            pair<xx,xx> aaa(xxx,xxx)
        pair<string, int> func { return {string("xxx"), 20};}

        类类型 类名类型
            key_type mapped_type 两种类型
            value_type 这个set和keytype一样 map是 pair<const keytype, mapped_type> 类型
                所有只有map类型有mappedtype
            对于迭代解引用的到的是引用
                注意key是不能变的
        set不能改变值是const

        遍历：
            iter迭代器使用，直接用就行了，注意map的对象是pair的指针，set的对象是对应对象的指针
                说指针其实就是迭代其，不一定是指针的
            默认是字典升序

        方法：
            一般自带的算法如find， inserter插入器也可以用的，不过字典不是默认可插入的吗？？

        添加
            insert
                set:
                    插入可以 set.insert(begin, end) , set.insert({xxx,xx,xx,xx})
                map
                    map.insert({xx,xx}) map.insert(make_pair(xx,xx)) map.insert(pair<xx,xx>(xx,xx))
                            map.insert(map<xx,xx>::value_type(xx,xx));
                c.insert(v) 返回pair<iter, bool>iter表示新值的位置，bool表示陈宫与否
                c.emplace(xx)  

                c.insert(b,e)
                c.insert({xx,xx,xx})  return void

                c.insert(iter, v)
                    emplace(iiter, v) 提示具体插在哪里 return插入的位置
                        这样就可以不按照顺序了

                    multimap 
                        插入，返回新的迭代器，没有bool因为总是成功
                erase(key) 删除所有匹配key的元素，返回数量multi会大于1
                erase(iter) 必须是一个存在的元素
                erase(begin, end) 这两个返回删除之后的一个元素或者end

                index: multi版本没有下标
                    c[k] 返回或者创建初始化一个
                    c.at(k) 没有的返回out_of_range异常
                    下标和at只适用于非const的map和unorderedmap 其他都不行

                map, set:
                    find(k) return the iter or end() 所以比单纯下标索引好，因为不会不小心插入或者异常
                        找到第一个
                    cout(k) return cout numbers 0 or xxx
                    lower_bound()
                    upper_bound() 返回地一个不小于或者不大于制定元素的迭代其pair
                    equal range（）返回等于关键字k的元素的范围
                        如果不存在，返回的位置上下界是一样的，都是可以用来插入的位置

                    如果在multi里寻找：（默认是i排序版本的）: 注意返回的是元素类型，就是一个pair对于map
                        find找到地一个的迭代其，
                        cout找到数量，
                        然后循环递增打印

                        或者：
                        lower_bound() 起点
                        upper_bound() 终点
                            如果不存在，会返回end如果过大，或者相等只想某个位置，可以用来插入的位置

                        或者
                        equal_range() 直接返回pair of 迭代器，直接使用
            无序关联容器
                使用hash
                unorderd map可以用下标
                接口
                    bucket_cout() 桶数量
                    max_bucket_count
                    bucket_size(n) 第n个桶的元素数量
                    bucket(k) key 在几号桶
                    local_iterator
                    const_local_iterator 桶中元素迭代其
                    c.begin(n) c.end(n) n号桶的迭代
                        cbeing cend

                    c.load_factor 平均元素数量
                    c.max_load_factor 最大大小，超出会调整桶
                    c.rehash(n)
                        重新分桶，是的大于n并且 bucketcout < size / max_load_factor
                    c.reserve(n)
                        保留的桶足够n个元素而不用hash

                unordered_multiset<class, decltype(hashfunc)*, decltype(eqOp)*>
                    需要两个函数，一个返回size_t, 一个返回bool，
                    前者是hash值，可以利用对于内置类型的hash<string>()(xxx) 这里产生一个函数，然后
                        利用这个函数对string操作，返回hash值
                    然后声明的地方放入2个指针就行了
                        如果有类有等于的实现,可以没有eqop
