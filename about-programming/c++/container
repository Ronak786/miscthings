顺序容器
    vector 尾部之外插入删除慢，地址连续，随机访问快
    deque  头尾查删快，中间很慢，随机快
    list   双向link list 
    forward_list 单向link list  这两个空间消耗大，单向的没有size功能
            致力于达到手写link list速度
    array  就是抽象的数组，更安全
    string 中间慢，地址连续和vector一样

    选择：
        默认用vecotr，
            如果中间插入多用list
            开销要求高不要用list
            头尾改动多用deque
            如果有中间插入又有随机访问
                看哪边比重大，又或者可以先添加末尾再排序，最后放入vector
                或者先list再copy到vector


    头文件
        每个容器在自己的头文件里
        初始化，因为类型可以是容器，或者类，所以某些必须初始化的，你要
            提供初始化值

    通用操作：
        类型名称：
            iterator, const_iterator
            size_type, difference_type
            value_type, reference const_reference 这三个表示内部值的类型，值的引用类型，常量引用类型
        构造：
            C c; C c(d); C c(begin, end);(using iterator)(这个array不行）
            C c{a,b,c,d,e}
        赋值
            c1 = c2
            c1 = {xxx,xx,xx,xx}
            a.swap(b)
            swap(a,b) 神奇
        size:
            c.size()  forward_list not support
            c.max_size() 最大可容纳数目
            c.empty()
        insert/del:
            c.insert c.emplace, c.erase , c.clear()  这几个不太明白
        == != < > 
        c.begin c.end c.cbegin c.cend
        c.rbegin c.rend c.crbegin c.crend
            非c开头的版本对于常量对象仍然返回const类型的迭代其
        reverse_iterator
        const_reverse_iterator 反向，  单向链表不支持

    顺序容器特有操作
        forwardlist have no: 这个只能头上操作。。。。
            insert, emplace, push_back emplace_back, pop_back, erase
        vector, string have no:
            push_front, emplace_front,pop_front

        push_back, emplace_back   list deque vector string
        push_front .....  list deque  forward list
        insert(p,t), emplace
        insert(p, n ,t)
        insert(p,begin, end)
        insert(p, {....})  在迭代其之前插入，返回新的第一个元素，空返回原来的，
            插入后deque vector string迭代其立刻失效（新返回的失效吗, 不会的，可以一直用） 因为这些可能重新分配位置的
            insert(begin()) == push_front,
            insert(end()) == push_back
            注意插入的不能和被插之相同一个容器
        emplace() 
            这个传入元素的构造函数需要的参数，可以可变长度的

        pop_back, pop_front 注意检查空，return void
        erase(p) 如果p是end，有问题,不然删除当前所在元素，返回后一个
        erase(begin, end)  返回被删元素之后的元素iter，如果end是end（），返回也是end（）
            vector string 当前位置之后会失效, 返回最后删除之后的那个的那个
                gcc里面好像有保护，尝试了一下如果仍然用原来的话后面访问都是同一个最后值，
                    所以最好还是实时更新vi.end()  ,可以在循环头里这么干
                看到的是没删除一个，vector都会把end提前一些说明在复制
        clear()删除所有，
            dequee 会失效


        front  == *begin() 需要先判断empty！！
        back 这个forwardlist 没有 == *(--end()) auto &v = c.back() 注意了，不然v不能修改
        c.[n], c.at(n) 
            这两个后面的越界会安全报错out of range

                这里返回的都是引用，可以改值的

        resize(n[, default])
            array不行，用来resize可大可小，大了默认值，小了删掉，不会影响没被改动的值
                vector string deque可能会导致失效，因为可能移动内存
                其他的删除的地方会失效

        forward_list特殊操作
            before_begin() cbefore_begin()  返回开头之前的一个迭代器用于插入地一个元素
            insert_after(p, t) (p, n , t)  (p, begin, end) (p, {xxxxx})
                返回指向最后插入元素的迭代, end()的话未定义不能用
                插入是按照顺序批量插入的，返回的是你插入列表里的最后一个
            emplace_after(p, args) 返回插入
            erase_after(p)  (b,e) p不能是end()
                返回之后的元素,可以用来循环end作为判断

        vector string deque
            shrink_to_fit()  保留的内存减小到正好size,这个是请求，不是必须
        vector string:
            capacity 当前预留的内存一共可以放多少个
            reverse  通知至少预留的内存,如果当前很大，不会做什么
                resize 只改变数量，不会减少容量

        string 特殊操作 这些记不住记得看书p324
            init:
                string s(char pointer, number) 指针开始的多少个字符,不然到\0
                string s(s2, start_index)
                string s(s2, start_index, length) length不管多大，最多到结尾
            s.substr(start [,length])  
                最多到结尾 ,默认是全部长度
            insert(insert_index, number, char)
            erase(del index, number)
            assign(char ptr, number)
            insert(index, charptr)  这些都是可以的，比较宽泛
            insert(index, char ptr, start, len)
            insert(iter, n, c)  insert(iter, begin, end)  
            append(添加字符串)
                这个添加char ptr，返回引用
            replace(start, len, 字符串）
                对于操作下标的，返回的是原string的新引用
                这里字符串的地方是arg可以是：
                    string
                    string, pos, len
                    char ptr
                    charptr, len
                    n, char
                    begin, end
                    {xxxxxx.,xx,x,,xx,,}

            注：
                assign, append 无须制定替换的地方

            注意
                似乎这里所有的所说的引用失效指的都是元素的引用，对象本身的引用和地址更换无关的

            搜索：
                name.find(char ptr) return pos string::size_type , if not found , return string::npos, it si unsigned
                find ,rfind , find_first_of  find_last_of find_first_not_of find_last_not_of
                args:
                    char, pos
                    string, pos
                    charptr, pos
                    charptr, pos, len 这里pos都是stirng的pos len是chaptr里的开头的len
                        注意判断条件是npos ,不是默认的非0！！

                compare
                    s2
                    pos, n1, s2  from s1's pos's n1 chars to compare with s2
                    pos1, n1, s2, pos2, n2
                    char ptr
                    pos1, n1, cptr
                    pos1, n1, cptr, n2

                转换
                    to_string(val)
                    stoi(s, size_t * pos , base)
                        base 基数， pos可选，默认0,保存非可转换字符的位置，
                        如果一开始就不行，会报错
                    stol stoul stoll stoull  stof stod stold

    迭代器
        * -> ++ --  == != 是都支持的，除了单项链表不支持--
        +n -n  > < >= <= 这些链表不支持，其他支持
        注意，这些是 标准库才有的东西

    const:
        如果需要const容器，就在最外面加const，在里面加的话会编译不过去，好像也不能初始化和修改

    初始化：
        string没有 C seq(n) 这种操作，其他的除了array都有
            这个只有顺序容器有，关联容器没有的
        array 没有 c(begin, end)这种
        列表初始化array不会指定数量，因为确定了

            如果使用赋值匹配，那么容器的类型必须匹配，元素也要匹配
            如果使用迭代其，那么只要元素类型可以转换就行了
        eg.
               vector<int> vs = {1,2,3,4,5,6};
               vector<int> vi1(vs);
               vector<int> vi2 = vs; 
               vector<int> vi3{1,2,3,4,5};
               vector<int> vi4 = {1,2,3,4,5};
               vector<int> vi5(vs.cbegin(), vs.cend());
               vector<int> vi6(20);
               vector<int> vi7(20, 222);


    array:
        array<type, number>:;size_type 记住需要number制定
            这个好处是可以赋值拷贝，比内置数组好,只要类型完全一样,当然是指array赋值array
            不能赋值初始化列表，只能在初始化的时候这个干
            不能begin end

    swap: 建议用全局的swap
        这个比赋值快，可以a.swap(b)  swap(a,b) ,除了array和string，其他都不会导致引用，指针。迭代器失效
            string会失效，array则因为swap会完全复制移动，所以指向的元素不对头了,而且慢
    seq.assign(begin,end)
    seq.assign(n)
    seq.assign(n,default)  用来赋值和初始化的时候一样，会导致引用指针迭代失效，array和关联容器不能用
                                可以用来执行不同类型的赋值,
                            const char *  => string, 而不是char *

    size forward_list no support of this
    maxsize
    empty

    容器比较
        相同类型的可以== ！= < > <= >=
            前提是元素必须支持 ==  < 这两个操作

    容器失效：
        添加元素
            vector string 如果重新分配位置那么全部失效，不然动作之前的位置不失效
            deque 不是首尾动作都会失效，否则迭代其还是失效，但是引用指针没事
            list forward list没事
        删除元素
            list forward 没事
            deque 首尾以外的动了全失效，不然动头头迭代失效，动尾尾部失效
            vector string这两个删除之前位置的没事
        建议每次修改后重新管理迭代器
            end() 每次获取这个比较快没事，不然删改end会变


    适配器：
        就是利用容器的高层实现功能
        通用操作
            size_type value_type container_type
            A a A a(container) == != >= <=  a.empty() a.size() swap(a,b) a.swap(b)
            stack<string, vector<string>> str(deq)
                初始化一个栈，要求哦那个vector实现，拷贝deq里面的元素
                每个适配器有默认的实现方案，也可以自己定义

            各种request:
                array 不行
                stack: push_back pop_back back
                    support: except forward_list, array
                queue: front back pushback push front
                    deque, list
                priority queu:front push_back popback随机访问
                    vector, deque 不能list因为不能随机访问

            stack: default deque
                push pop emplace top
            queue default deque / list, vector 尾部进头部出
            priority: default vector / deque 
                pop, front(), back()(only queue)
                top() (only pq)
                push()
                emplace
