堆栈：
    堆上面存放生成的对象，包括对象内部的实例变量，(所有）
    栈存放局部变量，包括局部的对象引用，对象本身
        只会在堆上

构造函数：
    默认一个空的，会在赋值之前调用，无返回值!!! 
    同名类方法则会有返回值

    建议有一个无参数的构造函数
    一旦你写了构造函数，编译器就不会自动帮你加了
	private 方法，　可以阻止生成类,这样这个类只能使用静态方法了 

实例变量的默认值是“0” 

构造函数链
    如果没有显式编写构造函数，编译器会写一个无参版本，
        顺便调用super（）
    如果没有显式调用super，编译器会在执行内部先调用super
        而且只会调用无参版本，如果没有，会报错

    super的调用必须是构造的第一句
        自己调用的意义是调用传参的构造函数

    this:
        同样只能是构造第一句，和super二选一，
        这个来调用其他的构造函数

不用的对象要释放引用


静态变量：
	最先初始化，加载类的时候哦ｕ
	静态函数，用类名调用
		不能调用非静态函数
	static {
		} 静态块

final:
	一旦初始化，不能改变(声明不算）　
		final 的静态一定要初始化的，可以在静态中另外初始化，但是不能不初始化
	方法不能覆盖
	变量不能改变(可以初始化，声明之后）
	类不能继承
	
	常量＝static + final

primitive 包装：
	Integer X 
	iWrap.intValue(X)  可以得到原值

autobox, autounbox:
	编译器会自动把ｉｎｔ转换成ｉｎｔｅｇｅｒ，或者反之，所以不用强制转化或显式调用构造
	函数参数传递也可以
	返回值也可以
	甚至可以进行运算，就和数值一样

Integer.parseInt()
Integer.toString()  相反的操作
