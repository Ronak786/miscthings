fileoutputstream
objectoutputstream(fileoutputstream)  后者是在前者的基础上获得的对象存取功能，可以存取对象
	保存对象的时候，内部引用的其他对象一并保存

	所有需要保存的类都要实现一个Serializable　接口，不用干任何事情，但是要实现这个，
		不想保存的变量用transient声明
	如果父类不能序列化，回复的时候会重做一边构造
	父类序列化，子类自动序列化

	这个只能保存对象的数据，不能保存类的数据
	解包顺序要相同

FileWriter  
	写文字
		
File
	用于路径操作，非读写操作
BufferedReader(FileReader(File))
BufferedWriter(FileWriter(File))


socket: 客户端
	input:
		Socket = new Socket(ip, port)(ip is string)
		inputstreamreader(socket.getinputstream)
		bufferedreader(inputstreamreader)
	output:
		socket ....
		printwriter(socket.getoutputstream)
		printwriter.println(....)
	
	服务端：
		ServerSocker(port);
		ServerSocker.accept() wait.....


Thread
Runnable  后者是一个接口，你把自己的类实现里面的ｒｕｎ函数，传给前者，就可以开线程了
		前者也可以继承开线程，但是设计概念不好，没有继承的意义，我需要的不是更加特殊的线程，而是任务
		Thread.sleep  should catch  InterruptedException
		setName 设定名称 
		thread.currentthread.name 获取名字

		synchronized 修饰 方法，表示这个方法只能一个线程调用
			锁是在对象上的，每个对象有一个，会在指定了的同步方法上其作用，每个类也有一个锁，给静态变量的
			所以这个synchronized 可以用在方法定义上，也可以放在调用时，作为一个块
				synchronized(this) {
					call xxx
					call yyy
				} 这样可以只同步一个小块
