in java, every thing is base type OR reference !!!

basic type :boolean char(16) byte int long float double void, has corresponding  autobox reference type

class:
	random:
		rand = new Random(base_num); rand.nextInt(up_limit); rand.nextFloat();

	array:
		int[] a = {xx,xx,xx,xx,xx,}
		Integer[] b = {new Integer(3), 5(autobox),}
		Array.toString(a); can print a array in format of string

		variable args:
			func(Object... args) {
				for(String obj: args) {}
			}

	enum:
		public enum xxx { aa,bb,cc,dd,ee};

		reference:   xxx.aa;   
		print:   xxx.aa.ordinal();

method:
	equals:  default behavior:   compare reference id(address?)
	range(num) :  0,1,2,3,4....num-1

	overload:
		param must different, if can narrow to wide convertion, then maybe used , char -> int, 5->int
			and wide to narrow must explicit convert, otherwise error

	this:
		call ctor in ctor,  class(xxx) {
								this(yyy,zzz);
							}   must be first sentence;
	finalize():
			this method used like free malloc()'s mem, or some error check in object deletion,
			should call super(finialize());
		
			System.gc();  forcely garbage collection;

	member object initialization before ctor called

	static initialize always start when load a new class file:
			static { }
	non static initialize:
			{ }

	

type:
	123L-> long 
	123F-> float
	123D-> double
	0x12-> hex
	0121-> octol
	Long.toBinaryString/ Integer.toBinaryString -> get binary string
	10e-2f -> 10^(-2)  e/E -> 10 not ln!!

>> << >>>:
	byte short char >>> will first auto convert to int, then move
	if again assign to a byte type, will cut last n bit as result, 
		then if again print, then extend that byte to int, then print, so -1 will again print as -1


conversion:	
	narrorw to wide type is auto, but the reverse must explicitly done
	bool can not be converted
	class convert is special

foreach:
	for(type var: array/container) {
	}



package:
import:
	package used to isolate .class files, should be put in hierachy of dirs whose base dir is in CLASSPATH
	.class in same package can use each other without prefix ,
	others should use import xxx to use

	import static  -> just import static vars and objs and funcs in the .class

	default access privilege:
		inside package, access all pakage and public
		outside package, all inside ones are private, can not access
	
