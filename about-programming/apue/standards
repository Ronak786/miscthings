ansi ,iso
	ansi make in 1989 the first C specification
	iso confirm that and become iso1990, then iso99, ios2011,

posix:
	begin by ieee, include operating system interface 
							shell && utilities
							single unix spec
							and a lot, we talk about this in book
	susv4 :
		single unix specification v4 in 2010, we refer to 

limits:
	compile limit: in header files <limits.h>
	runtime file/dir limit: pathconf()
	runtime sys limit: sysconf()
	eg. FOPEN_MAX, TMP_MAX, FILENAME_MAX,  
	note : 一般变量本身可能会定义在头文件里，但是其实真正运行时获取的是系统限制,这个才是有用的，
		如果没有的话就是用系统的了

	use get conf:
		first use eviron's conf, cpp -dM /dev/null can see that,
		then if not defined ,use sysconf to get, if
		can not get and errno == 0, means not defined,
		then assign your guessed var

		use setrlimit to set limit for your process use

	unistd.h:
		in it we have posix vars defined we can use 

	define _POSIX_C_SOURCE to make compile only include posix comaptible code

	sys/types.h
		we have special types for some vars
		
FEATURE TEST MACROS:
	in features.h, we have some macros to control some feature,
		most defined by compiler, 
		in every manual page's SYNOPSIS can we find that requirements

	_POSIX_C_SOURCE _XOPEN_SOURCE _GNU_SOURCE _DEFAULT_SOURCE used to provide posix.1  sus gnu_feature, default features
	_POSIX_C_SOURCE >= 200112L 等同于 _XOPEN_SOURCE >= 600
	_POSIX_C_SOURCE >= 200809L 等同于 _XOPEN_SOURCE >= 700
	_POSIZ_SOURCE 任何值都相当与_POSIX_C_SOURCE = 1
	_XOPEN_SOURCE 定义这个对应的值除了sus的功能之外还会隐含_POSIX_C_SOURCE 的功能
	_BSD_SOURCE 这个基本不用了，_DEFAULT_SOURCE 这个一起使用好一点基本一样
	reentrant  thread_safe have no effect in glibc now

	_FORTIFY_SOURCE 这个是用来增加检验，设为1就行了字符串函数的
