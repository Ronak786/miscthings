function: this blkdev can be attached to a originally exist one ,just like
how to add a block device:
add a request queue(register one): blk_alloc_queue, blk_make_queue_request
register a devnum
fill gendisk struct with operations(ioctl, major, minor...)
add_disk(gendisk)

in ioctl:
start by store the raw disk struct by search the given path,
start a kthread

when request come:
the request func registered before be called,
wakeup the thread and passin struct bio,
redirect to the true devicce(also do remap to true device(not part))
then make generic request


data structs:
block_device: represent a block device in /dev when opened
gendisk: represent a whole disk, 
requeset_queue: included in gendisk ,have a list of struct request
struct request: bio point to first bio, biotail point to last bio
struct bio: one continous area of data by request,
struct bio_vec: included in struct bio, record the mem place and length of that bio request
block_device_operations: just generic block ops, not specific rw ops

queue:
blk_init_queue: initialize block queue to use standard io schedule method
		prepare for io sched to do with that queue
blk_fetch_queue: used when using blk_init_queue, to get the next queue in your own make request func
	NOTE: remember the loop condition is fetch request not NULL !!!
blk_alloc_queue, blk_queue_make_request: alloc a queue ,not using io schedule,for a fake device
					or ram device that can do ramdom search without heavy cost

in blk_alloc_queue's queue func, depend on blk_rq_pos blk_rq_cur_sectors rq_data_dir to do proper
			data transfer, in blk_fetch_request, __blk_end_request_cur
in blk_queue_make_request,(with blk_alloc_queue): use bio_for_each_segment 
	then for each bio_vec, kmap bv_page and got bv_offset's data and do your transfer
	then kunmap ,and bio_end_io at last


gendisk:
initialize fill  major, first_minor, disk_name, initialize queue, fill fops, set private data if needed.
	set  capacity( in init queu ,use blk logical set and capacity set, in alloc queue, use set capacity)
	in virtual disk(alloc queue),not needen blk_queue_logical_block_size,because not directly talk
		to device,just set capacity
	in real disk struct, set logical blk size in queue because that queue will talk to
	 	ioschedule, also need capacity,because set when hardware init

NOTE:set capacity size is ５１２为单位的,be careful to keep allocated size and set capacity size coherent!!!

NOTE:blk_rq_map_sg can map a request into a dma scatter list , then passwed to dma_map_sg


