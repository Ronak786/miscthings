DEVICE & MODULE  and SYSFS
	we have block device , char device and net device , 
	modules can be compiled and added into kernel , module_param  module_param_named( diff names in user space and kernel) , modules_param_string(string copied from user directly into kernel),
		module_param_array store array
	EXPORT_SYMBOL  EXPORT_SYMBOL_GPL(only the module_license(gpl) can use this func)

	kernel object : used to maintain a device tree to know the relationship of  thhe devices
		the struct kobject in the struct cdev ...  ,have member struct kset ( some device together in a kset(a group)) , ktype ( same type devices have same operations ) 

	use kobject_init to initialize an object after malloc and zeroed(memset)
		use kobject_create is simple  to do that automatically
	use kobject_put kobject_get to release or increase the count of kobject , when zero , free that whole memory automatically
		internally is represented by kref_init(initialize to one) ,  kref_get  kref_put( manipulate a struct ,but inside is just a value of count)
	
	in sysfs ,you have a device and driver heirachy , the whole device topology is in /sys/device , others are just symlinks ,another view.
	add kobject into sysfs:  kobject_add() , kobject_del() , use kobject_create_and_add t create and add the object
	
	attributes: default attrs are in the ktype , in an array .   use the sysfs_ops  struct 's func: show and store to read and write these values
			use sysfs_create_file() sysfs_create_link() to create a file(attribute of the object) ,or a link to a file , will be handled by ktype's show and store operations
		when remove sysfs_remove_link  sysfs_remove_file
	over all , sysfs used to interactive between user space and kernel , in place of ioctl() , should maintain carefully the hierachy , also keep in mind those existed files and 
		dirs are used by other programs , so do not modify them arbitrarily
	
	the kernel event layer:
		kernel will send event to userspace when hardware contition changed , through kobject_uevent() , 
		internally , kernel use netlink to send to userspace , so userspace just listen on a socket , the general purpose is use through D_BUS



kernel debug
	printk can be used in all conttexts , so robust. ,early_printk can be used when printk not ready when early boot
	debugging use kgdb , open kallsym , this can resolve all func syms , for all syms ,use kallsyms_all,
		using this , you need not use ksymoops or System.map
	the BUG() and BUGON()  panic may be used .
	sysrq
	when debug , and not need to print too many , use count or printk_rate_limit as a time limit,also can use
		pid as a selector
	git provides birany search

portability & hack and mail list: (some good website is in book) 
/***********************************************************/
	http://kernel-
newbies.org/â€”a website that, of all things, caters to those cutting their teeth on the ker-
nel.Two other excellent sources of kernel information are http://www.lwn.net/, Linux
Weekly News, which has a great kernel news section, and http://www.kerneltrap.org/,
Kernel Trap, which provides insightful commentary on kernel development.
/***********************************************************/
	arch dependent are in arch/ , in common programming , should not use typedefs , should stick to kernel programming
		style ,which is with indent and can be done via scripts/Lindent
	SEE detail  kernel style in the document/XXstyle(some like this)


about other books:
	some books at the end of the book
	
