comment:
	/*
	
    */

input/output:
	scanf  %f %g %e are the same!!  will read  "- number . number e  - number"
		%i input: xx  十进制
				011  八进制
				0xa2  十六进制

		浮点：
			float  %e g f
			double %le lf lg (只用于scanf, not used in printf, c99 can but no effect)
			long double %Le Lf Lg  print Le Lf Lg
				
	scanf will skip all blank in input!!  (except %c)

	空白：输入中的空白：这个可选，格式串中一个空白可以对应输入中多个空白或者0个空白，
		但是一定格式串至少一个空白（多个相当于一个），不然对应输入不能有空白
	printf %.2   d  至少两个数字
				s 至少两个字符
				f 至少两个小数

	读写无符号
		%u %o %x
	读写小整数
		%hd hu ho hx
	读写长整数
		%ld lu lo lx
	读写长长整数 c99
		%lld u o x

c99:
	/ 向0取整
	% 和被除数符号相同

	_Bool flag 只能赋值0 或者1
	include <stdbool.h> use bool, 这个实际就是_Bool, 但是更方便, true, false 

	for(int i =0 ; ;)  可以在里面声明使用了
	goto 不能绕过变长数组声明

	检查limits.h 可以查看不同类型值的大小
	新增long long , unsigned long long, 至少64位

	sizeof return size_t, printf  %zu 

	16进制 浮点  0x1.bp3 指数表示的是二的幂


数据类型书写
	123
	012
	0xab
	123U  unsigned
	123L  long
	123UL  
	123LL  long long 
	123ULL unsigned long long

	float double longdouble
	float _Complex, double xxx , longdouble xxx

	常量
		十进制  int long longlong 中最小
		8 16进制 int unsigned , long, u long, longlong, ulonglong中最小
		浮点 默认double
			float 强制 用 F后缀
			long double 强制用 L后缀
			十六进制浮点也是0x开头

	转义：
		'\33' 8进制
		'\xab' 16进制

	转换提升
		如果其中一个浮点, 另一个 float->double->long double
		全是整形，首先提升到int, 然后 int -> unsigned int-> long int- >unsigned long
							如果unsigned int 对 long int, 全部变成 unsigned long

	数组初始化
		指定初始化 int a[] = {1,2,3, [8]=20, [10]=40}; 会推断大小
			注意使用指定位置的后果是下一个是指定之后的位置，和枚举初始化一样
		define size ((int)(sizeof(a) / sizeof(a[0])))

		变长数组
			a[n];  不能静态，不能初始化

		函数变长数组：
			int func(int n, int a[]) or int a[n] or int a[*] or int [] 都可以
			int func(int a[static 3]) 保证至少3个元素

		复合字面量
			int func((int []){1,2,3,4}) 这样传数组 or (int[10]{1,2,3,4,5})

		结构指定初始化
			struct {} a = {.xxx = yyy, uuu, .aaa= bbb}
			复合字面量
				int func((struct part){1,2,3})); 这样直接传入一个结构体, 还可以取地址
				struct part part2 = (struct part){1,2,3};这样赋值（不是初始化）
			结构数组初始化
				struct par arr[10] = {[1].name = xxx, [2].field = yyy};

		Note:
			字面量如果在选择和块和循环里面，不管有没有大括号，都会在
				块结束后释放，所以块外引用是不合法的！！

		枚举变量可以用作数组下标选择性初始化

		枚举最后一个元素后面允许尾部逗号

		int * restrict p;
			受限制指针，保证只通过他修改内容

		灵活数组成员
			struct {
				int line;
				char [];
			};
			后面可以直接分配，大小，这里不指定，这是灵活数组，只能放在最后一项
			复制数组的时候不会复制这些成员
			sizeof只能得到第一个成员的大小！！

		具有静态存储期的变量如结构的初始化不能用变量，不然可以的	
			静态初始化默认是浮点0.0的，calloc则内存清零，值不知道是不是

		inline
			static inline  内部使用
			外部：
				头文件inline 定义，然后对应.c文件extern func 即可，其他文件也一样


函数：
	getchar putchar   比scanf 更快 , 而且返回int类型

macro:
	#xxx 转换为字符串， #define mad(x)  #x 如果传入空，则产生空字符串
	a##b   转为ab,    #define mac(a,b) a##b 
	注意 # ##两边的宏本身不会扩展，所以 mac(a, mac(b,c))这种会变成amac(b,c), 
		需要定义 #define mac2(a,b) mac(a,b) 然后使用mac2(a, mac2(b,c)) 变成 abc

	可变参数宏
		#define pr(fmt, ...) printf(fmt, __VA_ARGS__) 即可
		#define pr(fmt, ...) printf(fmt, ## __VA_ARGS__) 这个gnu中更好，因为没有可变参数的时候不需要额外的逗号

	__FILE__
	__LINE__
	__func__ 
	__DATE__
	__TIME__

	#if xxx   定义且不为0
	#ifdef  == #if defined 是否定义
#error   错误信息编译
_Pragma("xxxxxx")   代替#pragma 因为是运算符，就可以用在宏定义了，不然宏本身是不能二次执行的

	#include "/root/xxxx.h" 完整路径 "d:\xxx\xxx.h"
		#define MACRO "xx.h"
		#include MACRO

	gcc -DAA=xxx  如果需要定义字符串，需要\"传入引号，如果定义的东西有空格，需要本身shell上外面加引号

多文件
	extern int a[]  数组声明省略大小

结构
	struct zz {
			fields ...
	} name1, name2;

联合
	和结构一样用，前涛在结构里

枚举
	enum 一样和结构一样用，
	内部赋值从0开始，可以自己赋值
	变量可以赋值枚举中的值

动态分配
	malloc
	calloc 会清零，好处
	realloc 如果重新分配，会复制， 需要更新所有内部指针，因为可能位置不对了

	分配的时候使用sizeof(*p) 可以作保护， 不会求引用，所以不用担心

指向指针的指针
	用于数组元素是指针的情况
	qsort 排序字符串数组的时候，传入的是char*[], 所以cmp函数的元素类型是每个元素的指针，也就是char**,
		需要注意转换
函数指针
	int (*f)(xxx)
	(*f)(x) 来调用


复杂的声明用tyepdef来简化
	typedef int* func(); 定义了一个函数类型的func变量

封装：
	不完整类型的使用
	struct t; 但是不能声明变量 把实际定义放在库里面
	typedef struct t * TT; 这样可以传递到库里面，同时头文件不泄漏

	命名最好加上库的名字前缀防止冲突
	使用item 类型代表具体类型或者使用void* 然后传入操作的子函数之类的

位运算
	struct aa {
		unsigned int aa:5;
		unsigned int bb:6;
	}p ;
	p.aa = 12; 可以这样赋值, 但是不能取地址	
	unsigned int :5
	unsigned int:0 用来跳过，其中这个跳到下一个int的起始位置

标准库
	头文件inttypes.h包含了print scanf时候的具体标志如PRId
	禁用宏
		c = (getchar)() 就不会被替换了
