编译安装，看官方网站有选项解释
    或者./configure --help

直接nginx启动，读取安装时候的默认路径配置，
    pid等在log文件夹里，是master的，也可以用lsof -p pid查看打开文件
        使用ps -ef | grep nginx 查看master 和 worker的父子关系

    kill:
        kill -s QUIT 从容停止
        kill -s TERM/INT 快速停止
        pkill -9 nginx 强制停止
        无缝切换
            kill -s HUP master_pid 重新加载conf
            kill -s USR1 xxx  重新打开日志, 需要轮换的，话，先mv掉原来的，再调用这个
            kill -s USR2 xxx   升级exe程序
                升级过程：
                    kill -s usr2 xxx  开启新master
                    kill -s WINCH oldpid  就的worker停止
                    此时 处于新旧同时处理中
                        kill -s HUP oldpid 重新开启就worker
                        或者kill -s QUIT newpid 旧的pid文件会恢复，新的全面退出，等于回滚
                        kill -s QUIT oldpid 旧的完全退出，完成升级

    测试配置文件而不实际启动
        nginx -t -c xxxx

    log_format 制作自己的日志格式，然后
        access log path  logformat可以指定
    open_log_file_cache
        用于记录log fd的cache，这样可以缓存

    自动列目录
        首先不能有index指定页
        location xxx {
            autoindex on;
        }

    expires 30d/1m; 用于设定资源在浏览器上的缓存时间，一般图片之类的可以长一点

    root:
        这个本来是相对路径，就是conf所在的上一层路径，也可以用绝对

    在php中，首先按照官方install说明把php。ini， phpfpm。conf设置好，
        然后phpfpm启动即可
        nginx conf中将 scriptfilename 设置好，这个就是你的文件位置，用
            $document_root$fastcgi_script_name 就行了

php 扩展安装
    php pcre网站下载扩展，或者在github上
    然后编译，copy到module目录，改动配置文件，可能source目录下有对应的配置，可以导入设置

nginx优化
    worker_processes cpu cores recommended
    worker_cpu_affinity 0001 0010 0100 1000 这样制定绑定
    use kqueue epoll 选择使用的io模型
    worker_connections 单个进程可以连接的所有链接数
        还收到worker_rlimit_nofile的限定

    hash max size
    hash bucket size
        优先调整前者，共同用来hash域名，前者消耗内存，后者cpu居多，用来查询域名对应的功能块的应该
        前者一般是l1缓存的4到5背

    sendfile on
    tcpnopush tcpnodelay 这三个共同作用，积极减少网络拥堵，增加传输效率

    keepalive_timeout 设置keepavlie长链接的服务端保持时间，会放到header里面
    nodelay:
        有数据就发送，阻止nagle算法的发生
    client_header_timeout 完整接受client 的头部的时间超时,组织http协议攻击
    client_body_timeout 两次活跃发送间的超时
    send_timeout 两次活跃发送间的超时
    client_max_body_size 限制大小

    gzip on; 一般图片不压缩，因为本身呀过了
    gzip_min_length 1k;
    gzip buffers 4 16k
    gzip comp leve 压缩比率等级
    gzip type  压缩类型
    gzip vary on 

    浏览器插件
        yslow

    expires 30d; 缓存在客户端


    access_log off 放在某个location里表示这个不需要记录，这样减少消耗
        日志目录只要root权限注意，不要给nginx用户权限

    deny all; 用于在location里拒绝请求，这样可以拒绝某些文件的流露
        要放在允许处理的前面，因为是按顺序的
    allow ip/xx;
    deny ip; 可以筛选可以允许的ip

    server_name _; 这样匹配到的是ip访问的，而不是域名访问的用户
        return 501；对于这样的用户返回501

    httpaccesskeymodule 这个用来防盗链，因为具体的url被改掉了
    referer也可以
        这一块要看一下 

    错误页
        errorpage  num num num  path;(这个是url后面那部分的path）
        errorpage num = @fallback
        location @fallback {
            proxy_pass xxxxxx 可以这样使用
        }

    目录权限
        root  目录755 文件文件644

    显示useragent 爬虫
        if ( $http_user_agent ~ xxxx(正则））　｛ｘｘｘｘ｝
        if ( $request_method !~ ^(GET|HEAD)) {xxxx}

    limit_conn_zone
    limit_conn    这两个用于限制链接的ｚｏｎｅ的大小

    limit_req_zone
    limit_req 限制请求的频率，也就是每秒的数量

mysql
    mysqld_safe --default-files 可以设置不同的配置文件，这样可以做到多个实例的启动

    主从复制
        log-bin=xxxxxx
        主要过程，ｍａｓｔｅｒ的ｉｏ线程把ｂｉｎｌｏｇ的内容发送给链接过来的slave线程，认证过了已经，
            然后slave写入relay中继日志，自己的sql线程把这些解析成sql执行
        server-id 每台同步的主从这个要不一样
        grant replication slave on *.* to xxxxx  设置复制的可用帐号
        flush table with read lock 锁表
        然后mysqldump dump当前数据库
        unlock tables
        然后在从库回复这些数据
        然后从库连接
            change master to master_host='xxxx', master_port=xxx, master_user=xxx,master_log_pos=xx这样就会同步了
            好像不能有空格
            这个用于改变从的链接配置，后面要start slave真正启动同步线程，stop slave停止
        show master status
        show slave status 里面有io running 和 second begind参数，需要注意

        read-only参数从库可以使用

nfs
    需要rpcbind  nfsutils两个服务nfs
    /etc/exports这个是配置文件的地方
    exportfs -rv 重读配置nfs
    mount -t nfs ip:path  /xxx
    showmount
