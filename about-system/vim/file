:pwd to print cur dir
:e xxx to open a file to edit
in ex-command:
	% is currentfile's complete relative path
	and %:h is that path remove the  file name,so only dir name exist
	we remap that by %% so :%%  will expand to cur buffer's dir
	(only take effect when you are modifying a disk device)

:find xxx  
	using this , first :set path+=xxx/** to add a search dir and subdirs

<C-g> to check file's status

netrw:
	this is a stardard plugin, used to open dir instead of file
	use '-' to goto parent dir

	open current dir's content:
		:e.  :E
		:Se  :Ve used to open and create a window and put buf in that
	netrw is powerfull to even edit netstream files !! see :h netrw-% netrw-d netrw-del
															netrw-rename

	edit a not exist file and press <c-g> show status will see newfile, so
		:w used to write new file
	edit a not exist file with a not exit dir, should use :!mkdir -p %:h (expand to curr buf's dir),
		then :w

	write in super user mode:
		after write, :w !sudo tee % > /dev/null
		this will take curfile's buffer' content as input , tee into %(cur file on disk)
		and ask you to input passwd just like sudo !!
	
use "/xxx" to search among whole file instead of one line
use incsearch and hlsearch to search more convient

use search in motion:
	v /xxx  then will select from current pos to the first char of matched /xxx
	{motion}(d)/xxx<CR> will delete until matched char, but exclude that char

select between bracket:
	first into visualmode, then the it at will select content in XML label in one <xx> </xx> 
	when inside bracket
	a(/ab  to select whole content inside ()
	a{/aB to select whole cnotent inside {}
	a[  a' a" a`

	diff:
		a will select () but i only select content inside that()

	we can use motion before these: dit di" ci" yi"

	aw iw iW aW as is ap ip:
		use to select word, paragraph, sentence, WORD
		the "a" will select a word and another blank(prefer afterward blank),so usually in delete
		"i" selete just word, so usually insert and edit

set mark:
	m{a-zA-Z} , A-Z will be seen by all buffer
	use `[a-zA-Z] to jump to that mark, 

	auto marks:
		`` pos before jump
		`. last modify pos
		`^ last insert pos
		`[ last modify or copy start 
		`]  end
		`< `>  last visual mode start && end
	use % to match bracket and modify, but first skip to the } one, then modify, the
		use `` or <c-o> to skip back , this is the right method
