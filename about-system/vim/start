use :h xx to see help info of command

:grep  used just like command line one

vit in normal mode: 
	used to select word in <xxx>selected word</xxx>

vim command option:
	-u NONE   not load any vimrc
	-N        set nocompatible

tips:
	<esc>o is better than <cr>
		because we when use 'u', will only clear the new line
help:
	help count :for count help
	help operator : for cl cw dw y g .. .help infos

buffer control:
	:e filename, then you can open and edit that  file
	:bn  buffer next
	:bd  buffer delete
	:ls  list buffers,  see :h bn

.  redo the action you do last time in normal mode
>G  move right a tab wide for line from cur to the end of text

set option:
	set nrformats/nf=   leave blank , then all explained as decimal, 
					default is octal,hex, so 07 +1 is 10
					when you use <c-a> <c-x> to inc dec number
	set list , set nolist to show /unshow special chars
	set listchars=xxx,xxx to set how you show visual chars
		help:  list listchars hl-NonText hl-SpecialKey i_CTRL-V_digit


comand shortcut:
	C 	c$   delete from cur char to end of line and into edit mode
	s	cl   del cur char into edit
	S/cc	0c$  del cur line and into edit
	I	0i   del and insert from start
	A	$a   edit at end
	o	A<CR>   edit to below line
	O	ko	edit to above line

find:
	f{char}  ";" to next, "," to prev , F{char} search to left

repeat:
	"."  repeat last action in normal mode
	"@:"  repeat last ex comand (start with :)
	"&"   repeat last :s command

recording:
	q{char}(register number)
	q to stop

operator :
	delete:
		db  clear chars before cur(exclude cur) until the last non blank
			so the head's space will be deleted,but blank after words will not
		b   back until last not blank(will skip head blank)
		dw  delete chars in and after cur until a char which is start of a word
		daw delete a word(perfer tail blank, if not exist, del before blank)
		dap delete a paragraph

	edit:
		cw, cW :  "w"  "W" the latter will contain punction as word
		3cw c3w are the same
	count:
		<C-a> <C-x>  inc, dec
			10<C-a> to inc +10

	switch case:
		gu gU g~  appended with l w W ...

	type twice operator:
		apply to curline

	!{motion}{filter}: motion is w 2j..., filter is a program like sort ,sed which
		will accept multi lines and do something
	gg=G 
		will autoident all lines

	operator wait:
		when type d, vim will wait until you type in another char as
			the argument of d,this short wait time is waiting time
	replace :
		R to replace until <Esc>
		gR is more reliable, because tab will not be replaced by just one word
		r gr also used .

insert mode:
	<c-w> delete word before current
	<c-h> delete char before current
	<c-u> delete until start of line
	<c-]> == esc
	<c-o>  switch to a insert-normal mode, just exec one normal command
		<c-o>zz to relocate curline into the middle of screen

	copy and parse:
		yt{char}, copy from cursor's char to before {char} into register,
		then  in insertmode, <c-r>0 to insert copied word, 
		<c-r><c-p>{regisert} is more intelligent, will not affected by
			autoindent( all copied char are like you type in from terminal,
			so they will be affected by your vimrc configuration, but <c-r><c-p> will not
	
	<c-r>{register} parse register's info
	<c-r>= we can use a calculate register
	<c-v>xxx  type in a coding number, will show the value char not show on keyboard
		if type in a char in keyboard ,just show that key
	<c-k>{char}{char}  
		will also show a two way :eg <c-k>12 is Â½ , see :h digraphs-default   :digraphs
								:h digraph-table
	<c-v>uxxxx  more than three number needed unicode  
		see :h i_CTRL-V_digit	


visual mode:
	v V <c-v>  
	gv used to select last selected block
	use these char to switch between normal and visual
		e to the end of word,w to the first of word
		o to switch the another end of visual block

	normal mode is better than visual, gUit to uppercase a "it" word(<a>it word</a>)
		and use "." to repeat is better than "vitU" and repeat

	visual can be used to change a line into one char

	we can use <c-v> to edit multi line at one time use "c" !!
		also  use this to add tail char at every line use "<c-v>jje" now we are
			at end, then "A;" to add ":" after every line tail

	"A" and "I":
		after select with visual mode, "A" will add after every line's block
										"I" will insert before every line's block
		i and a will not work like this !!!!!

tab and shift:
	 how shiftwidth and softtabstop and tabstop works
	 the tabstop is tab's width, if not chang this , existed tab in text will still
		in old width, if changed ,all tabs in your text will changed immediately
	 shift width is ident width,when use <  > in normal mode
	 softtabstop decide how a tab keyboard press will expand width,
	     but will use tabstop's width's tab numbers to insert tab(if less than that,
			only use blank)
	expandtab will use blank to intead tab, so backspace will delete blank only one
		(but softtabstop will be most precedent over this)



