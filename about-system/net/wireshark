问题解决：
    当ping不通的时候，查看对应的网址ip，mask， 还有注意路由表是否有不对的项目，
        可以利用wireshark在不同的可路由网口查找，
        一般发包的时候比对机器上所有ip，属于的那个就会接受这个任务，但是路由表配置的优先级更高

    首先查看statistics-summary  平均流量
        statistics->service response time 响应时间
        analyze expert info 是否有异常的包

        注意发包无响应的时候可能的防火墙问题，或者nat转换ip的问题

    工具高级：
        tshark  -r 读取分析日志
        capinfos summary 信息
        service response time:
            tshark -n -q -r xxx.cap -z "rpc.programs' nfs
            tshark -n -q -r xxx.cap -z "smb.rtt'  cifs
            tshark -n -q -r xxx.cap -z "tcp.analysis.retransmission'/'out_of_order 重传, 乱序
            tshark -n -q -r xxx.cap -z "conv, tcp/udp/eth/ip ' 统计包里的对话

        editcap 切分大的dump包成小的，分割以时间间隔为限制

filter 
    host xxxx 可以指定对象的过滤
    注意nat的转换
    默认的seq number是相对值，所以从0开始，记住每次增长的是字节数，不是包数

    有两个filter， capture->options 里的capture filter是抓的时候的过滤，表示抓捕抓，
        界面上的filter是抓下来之后的过滤，这个更强大，
        可以 ip.addr eq xx && tcp.port eq xx
        可以使用协议名称 portmap || mount 协议过滤要考虑协议间的依赖，一起过滤
        可以单击包，右击选择follow tcp/udp stream
            可以在statistics => conversions 里查找
            可以在包右键找apply as filter 会自动生成过滤并应用，不然prepare as filter比较好
        save 之后可以可以再读取，利用wireshark
        analyze->expert info 
            简单的一些分析数据，包括冲传等
        statistics->service response time
                    summary
                    tcp stream graph

        ctrl-f 
            可以搜寻，选择为string就行了,如error

mtu:可以理解为frame里可以装载的data部分的最大大小，
    所以需要 握手的时候mss -20 -20 减去 ip tcp头部得到可以放入的数据，

注意wireshark里tcp的len不包含头部的，只有实际数据

tcp:握手：
    第三次用于防止请求包延迟严重后至的情况，这样即使请求最后到了，server的第二次确认加请求会被第三次确认可以被client否决
    一般tcp为防止分片，主动会分开给ip

mss：
    接受窗口 + 用赛窗口决定能发的字节数，mss决定一次性包里面的字节数，
    tcp里这个 < mtu -20 -20
65535
    这个是接受窗口原来的最大值，后来嫌小，就在option里加了一个2的指数，
        可以是win的值*2^指数得到最后的真的值，但是要wireshark捕捉到
        tcp握手才可能计算
        还有防火墙可能不识别，导致允许的带宽地下

congestion:
    慢启动：接受一个确认就加一个窗口宽度，总体是指数增长
    拥塞避免：到达一个临界窗口值的时候，开始每一轮ttl+1一个宽度
    rto  超时时间，有公式
        超时出现之后拥塞返回1mss，然后慢启动，直到之前未被确认的
        数量的一半那么多的时候为止，开始拥塞避免
        
        拥塞避免阶段出现快速重传：
            变为未确认数量的一半（临界窗口），拥塞窗口则+3Mss，,刚开始的临界窗口好像没有，
            默认应该是流量窗口的大小的某个倍数把
            继续拥塞避免，较快速恢复
        重传的策率： 查看统计里面的重传数量，结合summary里的总数，重传率> 0.1%就很严重了
         1 reno： 
            发一个，等ack，决定下一个发哪个，直到窟窿补完
          2 sack
                tcp选项里加入当前有窟窿的后面已经完成的部分的信息，
                发送方就知道接下来该补哪个了

    tip:
        没有拥塞的时候，接受窗口要越大越好，
        拥塞发生情况下，win小一点，可以避免拥塞用的
        rto 超时时间也很重要，对于不够tcp包数的传送，不会快速重传，
            延迟都在rto上
        sack  reno 有用

        网上搜索可以利用图片搜索，会有一些好解释

nagle
延迟确认：
    前者指发小包的时候前面未确认，后面先收集，等前面确认后一起发出
    后者指接受方接受后延迟固定（100ms比如）然后再发ack，这样可以减少网络拥堵，如果之间
    有其他包同样收到的话
        这里两个如果一起用的话，首先nagle收集等待ack，那边延时确认，ack回来的慢，结果
        整个传输就显得慢了,当然单用延时确认有时也会比较慢

    延迟也会导致拥塞，具体依赖tcp实现，可能重传需要等待对方确认每个重传包，如果这个过程中有延迟，
    那么会出现大延时 可以通过改变tcp策略，比如sack的方式来避免

    性能差：延时确认，窗口过小，超时时间过长，窗口过大拥塞，都有可能

拥塞算法：
    westwood 这个拥塞的时候根据当前丢包数量决定临界窗口减少程度,而不是i单单就减成一般
    vegas 这个是主动探测网络ttl的变化来主动调节，缺点是如果网络上有其他算法，会被压迫到效率差，
        如果都是他一个算法没问题


udp:
    这个不关心mtu，也不交换窗口大小，所以ip会分片
    丢包麻烦，需要全部冲传，而且分片如果其他人一直伪造morefragment flag的包，你就会无尽接受

cifs && nfs:
    都是通过不断的远程访问，
    每次获取一个信息点，比如文件属性之类的, 还有一些缓存，双控（双tcp链接）之类的功能cifs

dig +trace :
    强迫迭代查询，就是一定从root dns开始往下，而不是递归网上

    dns:
        非权威服务器可能有问题
        权威但是经过了缓冲投毒
        放大攻击， dig ANY xxx 然后修改源地址，返回的信息字节巨大3k， 可以用来攻击

        gslb
            负载均衡，根据询问的dns服务器的位置或者你的位置决定发送给你的ip

ssl:
    这样之后https不会被是被，如果有密钥，可以导入使用，可以preference->protocol->ssl导入

过滤：
    tcp.flags.reset == 1 
    tcp.seq == 1 过滤标记 配合相对seq显示，可以找到被拒绝的握手包
    tcp.flags.syn == 1 && tcp.analysis.retransmission 重传的握手包

排查：
    需要两边抓包，这样容易区分是请求丢包还是回复丢包
    硬件有时候也会出错，抓帧偏移，导致frame的校验出现错误，当然普通情况下
        这种是抓不到的因为错了就丢弃了

握手：
    syn x 
    ack, syn  y, x+1
    ack      x+1, y+1

    fin x, y
    ack y, x+1
    fin from other y, x+1
    ack from here  x+1, y+1
    只有ack才会加，fin， syn是不会加的

    延迟确认的fin
    fin x, y
    fin ack y, x+1
    ack x+1, y+1

    迷惑性：
        在fin的时候，发出fin的那一方可能在接受前一个ack之前就发了，所以wireshark抓到的ack可能在fin之后，
            这个而是延时确认导致的，同时如上fin本身也会有延时确认机制，混在一起可能发生以为颠倒的情况

    丢包：
        可能会抓不到，可能是mtu的问题,导致丢了

状态：
    tcp window zero: 接受窗口为0,说明对方在告诉你不要发了
    tcp window full: 当前计算的发送在途字节达到了window的大小，为确认
    reassemble 重新聚集，可以聚集一些tcp包，同功能的
        加入这个选项后tcp会把所有一个应用的包集中放到一块地方，方便截图
        没有加这个选项的话，出现continue to 。。。 链接到地一个包，算时间也之算地一个

    乱序交叉：
        从数据接受方一般比较正常收发看到
            发送放收到ack之前可能已经在发送后面的包了，所以顺序上要留意


    在途字节：
        从发送端看，当前发送的seq +ｌｅｎ　－　之前最后到的ａｃｋ　就是在途
            ps 我觉得应该同时在server端看统一时间的最后ack，可能这个时候中间某几个
            包已经接收了
            但是我们能调整的拥塞窗口却是适用于第一个式子，我们只能看到发送方的情况，
            发送也只能用第一个值限制，所以正好
            我实际上算的是发生重传的时候的时候的拥塞窗口,一般选择比平均值较小一点的值,
                然后我们可以限制发送窗口

    lso tso lro之类调整
        可以在接受端，发送端把分片工作交给网卡做，减少cpu损耗，
        所以抓到的包大小可能大于mss，因为交给卡了
        tso ,gso 
            后者更加通用，tso的意思是交给网卡，网卡需要有tso，scatter-gather内存，计算校验的能力
            gso则是一个通用分层，如果硬件支持，交给硬件，不支持，自己分，这样就加了一个虚拟层处理
            问题，tcp本身不用特地考虑了,只管扔64k的包就行了
        gro lro:
            这些是接受端的聚集操作，
            优化时候注意这些会不会有影响, 导致需要的某个seq的包被其他合并了，找不到，需要用tcp.seq < xxx过滤
    rtt:
        拥塞避免阶段一个rtt，这个可以利用一系列发送包中最后一个查看bytes on the fly
            下一次发送的时候，再找最后一个值，应该是这个 + mss，
            rfc 中指出有的拥塞窗口增长是一次性发送结束后一次加一个mss，有的是每次收到ack加一个mss/n(期望ack数）
                后者有可能出问题，因为如果ack并非一对一就会增长缓慢,
                而这个配合lro尤其明显，因为后者专门减少了ack，所以也要看对应的拥塞算法是否有问题
    udp:
        缺点有分片导致的悲剧，应用层需要做好可靠考虑，这样最好优化使用，包括事先分片不要大于mtu
        没有mss，不会自己分
    mtu: 利用ping -f -l xxx(size）来测试发包, -f == don't fragment(不过注意某些route禁ping）
        会有巨帧，这种如果路径上不支持仍然分， mtu路径发现不完美，有的禁用，要靠实验
        有时候路径上mtu不够导致的访问无限失败或者访问缓慢都有可能，
            情况： 某些小包可以正常通信，所以不是防火墙，
                    持续不同，不是拥塞

    tlb:
        传输负载均衡，绑定多个网卡，会导致只有一个可以接受，其他可以发送接受，这个在交流的时候发错mac
            会导致无法交流

    暂停帧
        交换机用于通知主机暂缓发送一段时间，这个overload的时候游泳

    ttl:
        有时候有伪装包，可以通过ttl来发现，和正常的不是一个地方发过来的

    web劫持：
        判断可以是ttl， seq号码，identifacation突然增加过大（本来一个包加1），winsize对不上

    spdy 
        http2.0 一个tcp处理多个http并行
    quic
        零延迟协议chrome use it



