revision:
	git reference its object as revisions: sha-hash
	sha1-number, short sha1-number(just 4~6 numbers)

show branch tip's commit:
	git rev-parse  branchname

reflog: a log of reference of branch and HEAD /*only local behaviors you do to this ref, not networks's*/
	git reflog
	git show HEAD@{5} show current fifth reflog
	git show master@{yesterday}
	git show HEAD@{2.months.ago}

	git log -g will show reflog instead of commit log

parent reference:
	HEAD^ HEAD^^^ first par of first par of ...
	HEAD^2  second par of (only in merge take effect)
	HEAD~2 first par of first par of ...  == HEAD^^, 
	two idendification can be used together

commit range:
	double dote:
		aaa..bbb  commit on bbb but not on aaa
			git log origin/master..(HEAD)  (HEAD can  be omitted)
	^ --not (advanced):
		git log ^aaa bbb ccc : commits on bbb or ccc  but not on aaa
		git log bbb ccc --not aaa
	triple dot: 
		aaa...bbb: git log --left-right aaa...bbb (this will use "<" ">" to show which commit come from
				where)
			commits on bbb or aaa but not on both
		NOTE: this is diff from git diff aaa...bbb which means "git diff (git merge-base aaa bbb) bbb"

interactive:
	git add -i , use update to stage file, revert to unstage , diff to do a git diff --cache
	option: patch: (also do it by "git add -p")
		this help you to iterate sevaral diff section(hunk) in one file and make your decision
	related:
		git checkout --patch 
		git reset --patch
		git stash save --patch (what is save?)

stash:
	git stash to store staged and work dir's changed compared to commit
	git stash list to show
	git stash apply stash@{2}(default is the most recent, just like git stash pop, but also clear it)
	git stash apply --index : 
		will apply staged area, default will not
	git stash drop 
		to drop the stored apply in buffer

	git stash --keep-index  keep what in stage
	git stash -u will stash untracked files
	git stash -p will let you choose which to stash
	git stash branch name <stashname>
		create a branch for your stash and apply it and drop that stash
	
clean:
	git clean will clean your dir,  
	default:
		remove all untracked and not in .gitignore files
	-x :
		also remove those in ignore file
	-n :
		pretend to do and just tell what will do (good!!)
	-i : interactive
	-f : force
	-d : remove dirs also if emtpy


gpg:
	firist generate a key,
	git config --global user.signingkey  pubkey
	sign a tag:
		then you " git tag -s  v1.4 -m "xxxx", and will require you to type in your password

		another committer fetch the tag, import your pubkey , than "git tag -v xxx" to verify that
			fetched branch is comming from you
	sign a commit:
		git commit -S -m "xxx"

		another committer type "git log --show-signature "
			or use a log format %G? to show it 
	git pull/merge  --verify-signatures:
		also verify and reject if needed

	git merge -S wll merge and sign that merged commit for you

git grep:(this used to see "where" the pattern locates)
	this default search current work tree, and you can specify search specific commit or branch !!
	--and to && multi search options,
	--break --heading to be more readable
	-n show count
	-e extended pattern
	--and (--or is default)  
	--count only show match counts

git log -S (this used to see "when" the change made)
	-G is more specific patter(advanced)
	--grep can find in commits
	'-L :funcname:filename'  to show you history of modify of
		a func in a file
	also  -L  '/func prototype/',/^}/:filename


NOW AT 7.6  rewriting histroy

change commit:
	git commit --amend
	git rebase -i : interactively change ,this will find commits you want to apply,
		and open a editor, you can change "pick" to "edit" , then close file,
		then git will let you do that commit manually using git commit, 
		and others will just applied like we type git rebase
	remove is also possible, just delete that "pick" line
	squash: applie multi commit into one commit
	use edit: to split commits , just type edit and do a git reset HEAD^ to unstage
		the edit will commit that one, and drop you on console, so you should 
		do git reset HEAD^ to get that commit back to work dir
		after your manual commit, use commit --amend to modify your extra commit
			or you just commit others between all these
	
git filter-branch --tree-filter 'command' HEAD(used to modify all histroy from start of histroy)
	will traverse all histroy  and execcommand on that snapshot
	--all will rewrite all branch instead of HEAD

	--subdirectory-filter dir -- --all  will make your subdir as a solely git repo
		and only save history related to that, so you can just clone that repo

	--commit-filter:
		git filter-branch --commit-filter '
		if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];
		then
			GIT_AUTHOR_NAME="Scott Chacon";
			GIT_AUTHOR_EMAIL="schacon@example.com";
			git commit-tree "$@";
		else
			git commit-tree "$@";
		fi' HEAD
what git do:
	git has three trees, work dir tree, stage tree, commit tree	
		every git status will compare them and tell you

about reset and checkout:
	git cat-file -p HEAD will show currentHEAD's some info
	git ls-tree HEAD will show file and dir in current HEAD
	git ls-files will show exactly all files in git repo
		-s will show all files' sha number (diff from commit shanumber)(these are files' index)

	HEAD : the last commit
	index: the next that will be commit

	reset: 
		git reset --soft HEAD^(only affect commit tree)
		reset will move your  HEAD and branchtip it point to .
		so now what in stage is diff from in commit tree, so you can run git commit,
			this is just like a git commit --amend, and only affect HEAD(!!)
		git reset : (default is --mixed)
			this will reset commit and stage area with the commit snapshot of
				the object HEAD points to
		git reset --hard:
			this will also reset work dir into the state of commit tree and stage tree
			NOTE: if do this , work in dir will be destroied, if we committed before
				we can search reflog to get them back, so if we have a commit , we
				can get things back any way

		git reset  <commit-id> -- file:
			this will not move HEAD or other commit pointer, but just pull data
				from that commit to rewrite content of file in stage area, (!!!only stage area)
				so is the effect of unstage(now only work dir has the change)
		git reset -p to revert in hunk by hunk

	git checkout branch;(checkout commit is safer than checkout commit file)
		this is diff from git reset --hard branch: reset will not preserve your changes in work dir
				and reset will move branch pointer but checkout only move HEAD(so reset will
				lost commit number of the original branch pointer)
		use git checkout <branchname> -- file :(-- is used so that file not recognized as branchname)
			not move HEAD ,but modify stage and work dir, so just like git reset --hard  file

NOW WE AT 7.8
