config :
	git config (--global/--system) xxxx   see manpage git-config(core.editor user.name user.email ..)
	git conifg --list to show /  git config param
help:
	git help xxx/ git xx --help / man git-xxx
clone:
	git clone webaddr  (optional name) (http, user@xxx:xxx  ,git://xxxxx)
status:
	-s will show two column, MM  left means staged but not commited, right means modified but not staged
	 	untracked file is ?? , added new files are _A
gitignore:
	* ? glob pattern
	[abc] [1-9] match any char inside
	/xxx   only ignore that file,not recursively, so only the file specified(not dir) can be ignored
	!xx  not ignore that
	xxx/  ignore a dir
	xxx/**/xxx  ignore pattern in subdir recursively
diff:
	git diff: diff from modified to staged
	git diff --staged/--cached : diff from staged to committed
commit:
	git commit will pop a editor, git commit -v can output more comment info help you to
		write your commit description
	git commit -m "xxx" without vim editor
	git commit -v can be used to remind you what change when writing commit comment
rm:
	git rm xxx remove a file from repo and from your work dir
	git rm --cached only remove from repo
	rm support *, so use \* to avoid shell extension
mv:
	git mv old new,  rename a name
log:
	git log -p -n  will print all detail infos for n commits(these two option may used not together)
	git log --stat will print only file modify infos
	git log --pretty=oneline short full fuller print some degree detail(no file diff infos)
	git log --pretty=format:"%h - %an, %ar : %s" can also use colors ,see conf/ 's example
	git log --author  --grep --since --until ....  	
	git log -Sxxx  can show changes related on that string(used to find changes to that function)
			diff from --grep as --grep search commit msgs, but this search patch content
	git log --no-merges:
		show not merge infos, so they are raw patch pushes
	git log aaa..bbb
		means show log of commit that changes made  on bbb but not on aaa
		后面相对于前面改了什么
	--all-match : this only useful when multiple --grep is used and you want to match both not either
			other options not take effect, default is always both
	--decorate : use this can see where your HEAD on(on which branch)
	last option:  --  dir/   ,the last option to limit range into a dir (used after --)

--amend in commit:
	git commit --amend will add your stage area content with your last commit to organize a 
		new commit to replace your old commit msg
reset:
	reset stage into unstage: git reset HEAD  <file>
	undo changes in work dir: git checkout -- <file>
	git reset HEAD  HEAD^  HEAD^^ HEAD^^^

remote:
	git remote -v show remote addr and alise name
	git remote add name url
	git remote show for more info :show remote branches: your pull trackedd branch; your push trach branch
	git remote rm xxx  to remove
	git remote rename old new
	git ls-remote name to show sha value with branch pointer name
	use fetch, then you will have remote-track branches you can merge or checkout ,but not modify;
		or use git checkout -b branchname remotebranch(short as
			git checkout --track remote/branch or even short as
			git checkout branchname(because remote br name is exactly the name you type))
		this will auto set the pull and push track between remote and local this branch
	delete remote:
		git push origin --delete branchname
		git push origin :branchname

branch:(HEAD is a pointer point to one of branch labels)
	create branch:
		git branch name t(just a label, the same as the label now on like master)
	switch branch:
		git checkout name
		now we can use diff branch to do significant job,just checkout among them
	create and switch:
		git checkout -b xxx /-D xxx for branch not yet merged
	delete:
		git branch -d  : it just delete a label name
	scan branch:
		git branch -v/-vv(show traced branch)  / --merged / --no--merged   
				show branch that have merged into current branch or not
	set track upstream(can use git pull):
		git branch -u origin/name, now you can use @{upstream} or @{u} as a alias of origin/name

rebase:
	-i  interactively, can choose which patch to rebase
	git checkout br2; git rebase br1:
		checkout into a br1, git rebase br2, now modification from a original to br1 will be applied to br2;
			and then checkout to br2, do a merge br1(now is a fast forward), 
			then your log is a straight line!!
	on any branch; git rebase --onto br3 br2 br1:
		checkout br1's patch from ancestor of br1 and br2 and apply these on br3
	on any branch; git rebase br2 br1:
		checkout br1's patch from ancestor of br1 and br2 and apply onto br2
	if confusing log is made , do a git rebase origin/master may help
		or a git pull --rebase
	a rebase then a push,may be rejected, use git push -f if needed
	
merge:
	git merge to merge another branch into current, if directly, will fast forward
			if not directly, will create a merge commit and now master is it	
			if conflict, git status check every file ,or git mergetool to use 
				util to merge
	--no-commit:
		try to merge but immediately fail, so next time commit will create a 
		merge commit info
	--squash:
		get another branch's change but not merge, next time commit will create
		a normal commit, just like we do some modify on local branch
request-pull:
	git request-pull repo-you-want-to-push-to  your-priv-repo
		this used to generate a pull request to be sent to maintain to pull your request

origin:
	use git clone, remote will default be this, and remote branch will be origin/branch
		use git clone url xxx -o nnn , then remote name will default be nnn
fetch:
	git fetch name (now you have all branch as  name/branch , and you can do merge your own)
pull:
	if using git clone, local master branch is set tracked to remote master, so in master branch,
		we can run git pull to get and merge data from remote branch master,this is branch track
push:
	git push remotename  branch(:remote diff name)
credential.helper cache:
	is a config you can use to skip passwd for some seconds when push frequently
tag:
		git tag -l "pattern"  list tags match pattern, can use glob
	light weight tag: git tag name (tag current state)
	annotated tag:	  git tag -a name  -m "commnet"
		git show tagname  will show your tag and infos
		git tag name  commit-sha-value to tag one commit
	tag push is diff from branch push
		git push origin tagname  to push one tag
		git push origin --tags  to push all tags
	push -u 
		set a upstream track
	checkout tag:
		first add a tag
		second: git checkout  -b  branchname  tagname

alias:
	git config --global alias.xx  your git command eg.  alias.unstage "reset HEAD --"
				alias.ls "!ls"  call outside commands in git command style

git diff  to compaire work dir with stage area
	--staged used to compare stage and committed change
	--check  scan white space error

add:
	git add -p can interactively add, ask you to split a file's patch into small patches 
		and add portion into stage area and portions not

format-patch:
	used to generate a patch can be used to send to others through email,
	then you can set your email settings in git config, 
	details in pro-git: 5.2 contributing to a project
