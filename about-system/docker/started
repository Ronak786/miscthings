docker build -t friendlyname .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyname  # Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyname         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry

docker pull  name:tag  从registry地址
docker run -it --name xxx (起名字）--rm name:tag  command
docker exec -it contaner  bash  可以进入进行动态修改
docker diff container_name 查看存储层的修改
docker commit --author xx --message xx  container_name repo:tag  来提交
docker history repo:tag 查看修改，会有包括底层镜像的所有修改

docker特性
    -d的时候一定必须存在前台命令正在执行，所以启动某个os镜像的时候，最好命令改成 tail -f /dev/null
        或者加上参数-t 这样可以阻止docker消灭容器

    dockerbuiltd的时候会尽量使用以前的cache，所以同样的命令可能
        不会执行两遍，而是直接使用早前构建的同命令的内部image（一条命令就是一个image）
        这个在apt-get update 的时候会出问题，所以尽量把update ,install 放在一起执行
        see https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#run
        内部命令尽量分开，这样cache可重复利用

自制镜像： 上下文的存在用于copy文件
    touch Dockerfile
        input commands:
            every command will create a mirror, careful
    build:
        local:  docker build -t repo:tag   . (这个是上下文环境，也就是内部所有路径的起始路径
            这里dockerfile的路径默认是上下文路径下的dockerfile，可以显式用-f指定的，上下文路径就是最后的.
                代表的路径
            .dockeringore 用来忽略文件
        remote:
            tar: docker build  http://xxxx.tar.gz  会解包然后以此为上下文
            git：docker build  http://github.xxxxxxx#branch(tag):dir
        cat Dockerfile | docker build -  这种没有上下文
        docker build < xxx.tar.gz 
            认识gz bzip2 xz


docker command:
    FROM  加入底层mirror
    RUN command
    COPY src dest:
        src  基于上下文相对 可以通配，符合go的filepath.match 
        dest 可以绝对，可以设定WORKDIR之后相对 ,
    ADD src dest:
        会自动下载，解压，所以不太好，还是直接RUN , COPY
    CMD  启动时默认命令, 运行时可以在最后替换
        shell  xxxxxxx利用双引号，会被shell包装执行 
        exec:  [command, arg,arg,arg] 后者更加好,直接就是shell命令 
    ENTRYPOINT:
         制定了这个后，cmd的内容作为参数传给这个，
        好处是命令行替换后，相当与可以指定参数了
            同时还可以作为一个脚本，然后cmd作为参数，用来执行预先工作
        要使用exec 在shell里，

    ENV:
        DD、COPY、ENV、EXPOSE、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD   支持展开
        env xx yy
        env aa=bb cc=bb
    ARG: xx=xx
        docker --build-arg xx=xx 皆可，后者覆盖前者，构建时参数，完成后不见了，但是history可查看
    VOLUMN /xxx 
        docekr -v /data
        docker -v  name_volumn:/data 替换
        挂在匿名卷 挂在的是主机上某个目录，/var/lib/docker/xxxx
    EXPOSE:
         声明要使用的端口
    WORKDIR dir
    USER XXX
        RUN groupadd -r postgres && useradd --no-log-init -r -g postgres postgres  flag用于bug
        切换用户，需要事先建立
        如果暂时改变，使用gosu比较好
        RUN wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64" \
            && chmod +x /usr/local/bin/gosu \
                && gosu nobody true
                # 设置 CMD，并以另外的用户执行
                CMD [ "exec", "gosu", "redis", "redis-server" ]
    HEALTHCHECK
         cmd entrypoint  healthcheck 只能出现一次
         healthcheck  --timeout= --retries=  --interval=  CMD xxxxx
            自定义返回，成功默认0,  返回1就是失败 或者无相应超过超时
            通过docker ps关注state
            docker inspect --format '{{json .State.Health}}' web | python -m json.tool 也可以

    ONBUILD COPY/RUN 
        可以让这些命令在写子docker时候才执行，这样可以动态调整一些配置
    pipe:
        可以使用，错误状态是最后一个命令，所以设置set -o pipefail 在前面捕捉错误较好

docker save | gzip > xxx 这个记录完整的历史,是镜像到镜像
docker load -i xxx.tgz   用来save 和load
docker export id > .tar 这个只记录快照,是容器到镜像，要新命令
cat .tar | docker import  - repo/tag

docker images --digest  
    显示长id
    rmi   id /  image_name 
    -q  name  查询
    -q -f xxx 过滤
    --format  "{{.xxx}} {{.yyy}}"


管理容器：
    docker run repo:tag  command
    docker run  -t -i tag cmd 
        -t  开启为终端绑定在容器stdin
        -i  保持stdin打开
    docker start 
        启动停止的容器
        -d 后台运行，内部必须有一个前台命令存在
    docker logs  id
        show logs
    docker stop id 
    docker restart id
    docker attach xxx
        -i 好像就是默认的，就是可以输入，查看输出
        -a 这个可以查看输出，但是无法输入 , docker attach --no-stdin 好像一样
        detach:  ctrl-p ctrl-q
        
    nsenter:
        启动新shell， 然后添加到某个进程空间，这样直接进入某个容器，挺好用
        wget -P ~ https://github.com/yeasy/docker_practice/raw/master/_local/.bashrc_docker;
        echo "[ -f ~/.bashrc_docker ] && . ~/.bashrc_docker" >> ~/.bashrc; source ~/.bashrc

        $ echo $(docker-pid <container>)
        $ docker-enter <container> ls

    docker search xxx --filter=starts=N 星级N以上的
        在默认docker hub上搜索

    自动跟踪更新创建
        github bitbucket
    上传：
        上传前要docker tag  成上传的路径，然后上传

    docker inspect id  查看指定容器信息
    docker -P 随机映射，利用EXPORT
            -p  ip:port:docker-port   地一段可以省略，第二段可以为空::表示任意
    容器间的互相通信：
        docker --link name:alias  这样就可以了

    -h --net=bridge|none|host|container:id
    -p -P  --link= --dns --dns-search
        这些配置的动态特性，会写入容器的文件里

    service :
        dockerd --icc=false 建议默认取消容器间访问
        OCKER_OPTS="--ip=IP_ADDRESS  -b=bridge0" 配置文件中，使得nat永远映射相同的端口
        --bip=cidr  192.168.0.0/16 制定网桥眼吗
        --mtu=xxx 1500default

数据卷：
    docker run  -v /xxx  直接挂在一个匿名卷到内部这个目录上，也可以dockerfile制定
    也可以直接挂文件，但是如果vi， sed等会报错，因为会改变inode
    docker rm -v 可以删除
        -v homedir:/xxx:ro  只读  指定映射目录 需要绝对路径 
    docker run xxx --volumn-from con_name  
        获取其他人的数据卷，其他人不一定要正在运行，只要执行一次，卷就存在了，可以共享
    docker run --volumn-from xxx  repo:tag  comm  这样可以查看某个卷
