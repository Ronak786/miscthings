OTHER UTILS:
	snprintf, do not write more than size bytes(including tailing '\0' !!)
	vim:
		set autowrite (no when using make, will auto write to disk)
		:make (do the make program)
		:set makeprg=xxx (change make's function, set makeprg=gcc, so :make means :gcc
			and you can append your option

DO NOT EXIT FROM GDB when you are debugging, or you will cost lots of no used time

debuginfo-install  to install glibc debuginfo, then we can
	set break point into glibc's crti.so crtn.so ....

.gdbinit under project dir, under home dir for global setting

-command=xxx :
	read command from xxx and run a exec ( the sequence is unknown now ??)

gdb -tui:
	open a tui, upper is source code window, use 'l linenumber' can change show,
		use up, down can select
	break, tbreak:
		latter one only take effect frist time
	until linenumber,func, file:func, file:linenum
		run until the specifed line, or current line(used in loop)
		if no number, run until next line is reached, useful in loop
	finish:
		run until current frame finish(so cur function finish)
	step, next number
		former will check into function(only if that function has debug info)
		give a number can do that times of instruction
	continue num:
		continue and ignore subsequent num-1 times' break point
	watch ( a > 3)
		set a watch point, when condition is true, will stop
	frame n , up , down, bt
		to select frame, up to origin, down to current
	help 
		to get help

help command:
	check help

info command:
	get command's current status

NOTE: we are in gdb, so every signal passwd from keyboard will be first transport 
	to gdb, and gdb decide whether to transfer to process
	but I think process generated signal will just be send to that process

use backtrace to tell your current pos
	use frame num to switch to diff frame
use coredump to get your fail image
gdb exec corefile 
	then you can see core dump, and also exec "run", can run the program!!
gdb exec pid
	you can attach on a runinig proces
	BUT the second arg will first be check as corefile name, so attach may be better

we can set a var in exec, then do a while loop,
	now gdb has time to attach in , and modify that var ,the continue

BREAK POINT:
	
	break's status:
		keep: after encounter break point, keep it
		dis : after encounter , disable it
		del : after encounter , delete it
	tbreak, watch:(use corresponding   clear to" clean "that bp)
		break linenum
		break func
		break file:func
		break file:line
		break +offset  -offset
		break *address

	break condition:
		break xx if (bool expression)
			the expression can even be the function you defined or library func
			but if lib func has not debuginfo, the return value will be explained as int!!
		cond num bool-expression: (cancel using  " cond num")
			set condition to break num

	break comands set:
		one set of command will be run when a specific break point is encouterred
		cancel or modify :
			using  comands num \n  end
		commands  num(br num)
		silent  
			( we can use this to suppress output like "breakpoint 1 xxxxx"
			except our commands' output)
		printf "sssss%d\n",2
		xxxx
		xxx
		continue  ( we put continue here, so after print out, we will continue automatically)
		end
		now all commands will be done when break

		commands can use if (xxxx) else (xxx) end

	macro(usually be in .gdbinit)
		define yyyy
		xxx
		xxx
		end
		when  use yyyy, args passed using white space, and in field we
			referred them as $arg0, $arg1 .... (at most 10)
	THE ABOVE TWO, TOGETHER WITH function used as conditions,or param of printf ,can be very powerful !!

	show user:
		show all user defined  macros

	condition ( < <= == != > >= && ||  & | ^ >> << + - * / %   !xxxxx)

delete breaknum
	( in .gdbinit should use set confirm off)

NOTE:
disable :(no arg to disable all)
	disable breaknum breaknum ...
	for display
		disable disp  num (disable display number xxx)
enable:
	enable .. ... .. 
enable once xxx 
	just enable once , and disable

NOTE: hw breakpoint, hw watch point, the "hw" is hardware supported breakpoint,
	and have number limited, but is faster

WATCH POINT:(if var is changed, then break): eg. watch expression
 	NOTE: only when the  expression value change, may the break point encountered
	watch point should be set only when in that var 's effective field,
		(if auto var, then only in that func can set, and after func finish, point
		will be removed)
	watch expression (so will break if that bool becomes true)

UTILS:
	expression:
		in it  we can use gdb vars, normal vars , strings, constant vars
			macros(if use gcc -g3), func (int*)xxxx, condition, +-*/....
		gdb may use the debugging language's feature operator !!!

	PRINT:
		p structrure  can print out a structure's member
		
	change concentrate:(then break will choose that file default):
		list file
		run into one file
		break into one file
	info locals:
		show current frame's local vars

	display :
		will display when breaked
		cancel using undisplay
	jump linenum:
		jump to a line
			will skip some code : warining !!
	errno: this maybe modified by gdb's calling func or exec's func
	x : show mem's value
		
	print: (show vars value)
		p/x $pc,  print register's value
		p/x show hex
		p/x show sting
		p/c show char
		p/f show float
	printf:
		printf  "xxx",xx,xx
	call:
		used to call a function defined in code !!!
		used  together with commands, printf(just  write that func)
	p func:
		in commandline ,we can just use this to call function and get return value
	print array:
		int a[25]:
			then "p a" can print array
		int *a = malloc(25*int):
			then "p *a@25" can print all members
			then "p (int [25])*x also print all members
VARS
	set var = xxx
		used to set some var's value to control work flow !!
	set $var = xxx
		set gdb self's value, so can be used(even with ++)
	set args x x x x (set main's cmd var, but use run xx xx x x also works)

	$1 $2:
		these are histroy values

MEMORY:
	page is unit of operation mem management, so if one exec do not
		cover a whole page, and you access that rest of non-mapped field
		will not cause a fault, but it accutally is an error in program , so careful
		sometimes no fault doesn't mean no error in your program
		eg. int a[20], but you access a[200], because they both in
		the same page, so no permission error, just give you a wrong result

	a segment fault usually means you access a var with your wanted permission, 
		but the page do not have the permission you want; 
		so int i[3] , i[20] will extend to other page,which do not have write/read
		permission, so fault
	signal:
		this is an info operation will record in process's list, and
			change process's ip entry to run that function
	NOTE:	in gdb we should "handle" to change signal's behavior
		SIGSEGV : have no effectivepermission to virtualpage
		SIGFPE : calculte error, device by 0
		SIGBUS : error on bus, means physical address existence or not align  error
			when addr passwd on bus to memory
		core dump: corexxxx,(xxx is pid) ,use /proc/sys/kernel/ to contorl naming
				use ulimit -c to control (kb)
			sigbus sigabrt will cause core dump
			use "file  corefile" to see which exec generated this core dump file
		when debug, you can use signal to stop, then use bt to check current status,
			then continue/ signal xxx, the latter means continue with
			a signal send to process
	use info signal to see all signal's info
		eg. handle SIGALRM stop print nopass

THREAD:
	ps axH to see threads instead of ps aux seeing processes only
	info thread, to get thread list, 
	thread num to switch to diff thread
	tips:
		use diplay /watch of global share vars to check change time

	break num  thread num  if (condition);
		only break on thread

	openMP :
		this is a specification allow compiler to optimise program to
			run on multi thread,(you should specify which part
				will be run on multi thread)
