mysqld_safe & to start 
    in systemd, use type=simple, so do not need &

mysqladmin -uroot -p  shutdown
    可以关闭

连接：
    mysql -u root -p -S socker_file 
    mysql -u root -p  -D database -C (compress)
    mysql -h host -P port

    直接运行命令
    mysql -uroot -p -E -e 'xxx;xxx;xxx;'
        -e 如果非输出到stdin的话格式会好一点注意用个管道一下
        -E vertical show
        --protocol  TCP PIPE SOCKET MEMORY

    create
        create database if not exist xxxx; show database;

login:
    usename@host   
        host ip或者域名对于mysql是两个不同过的账号
        可用统配：
            root@'10.0.%._'   % any length ,  _ just one
    mysql.user  
        table has all users

    create user:
        create user 'xxx'@'host' [identified by 'xxx']
        insert into mysql.user (user,xxx,xxx) values (xxx,xxx,password('xxx'))
            this will fail when sql_mode is traditional
        grant all on xx.xx to xx@xx identified by xxxx;
            create auto if not exist
    delete user:
        delete from mysql.user xxxxx  
            这个如果有授权在Mysql.db里的话以后创建会出错，需要删除里面的权限或者
                grant 给这个新用户所有权限，以后再缩小
        drop user xxx
    rename 
        rename user a to b;

password:
    mysqladmin -uroot -p(初创的时候不用）    password xxxxx
    set password for name@host = password('xxx')
    update mysql.user  set password=password('xx') where user='xx';
    remember to flush privileges; !!

grant:
    注意host里的统配是% _
    grant all privileges on xx.xx to xx@'%' identified by xxx
    flush privileges
    
    grant select(field, filed) on db.table xxxx
    
    grant execute on function db.func_name to xxxx 允许运行函数在db中
    grant execute on procedure db.procedure_name to xxxx

    grant usage on *.* to xx require ssl/none;  usage用于登录限制，这里限制使用ssl或取消
    grant xxxxxx  with grant option;
        那么被授予的人也可以授予别人
                    with max_queries_per_hour 20  

    show:
        show grants for user
        select * from mysql.db where db="your db_name" 从数据库角度看

    revoke:
        revoke all on *.* from xxxxx;

    
    完全忘记: 密码
        mysqld_safe --skip-grant-tables  to start service
        mysql -uroot to login
        update .......
        flush privileges
        stop server and restart normally



help:
    help
    help create
    help create database
    help contents:
        show categories, 
        chose one, eg.  help 'data type' ,
            then you will see detailed help !!

variables:
    system var : run enviromment
        global  can set   mysql show global variables like 'xxx'\G  垂直显示
                                            where variable_name like xxx and xxx
        session  can set  show session variables
                    inherit from global and have more @!!!
                    默认查看的是这个

        单独查找  select @@global.var_name;
                    select @@var_name 优先查找session，然后global
    status var: runtime changable vars
        global
        session  can not set
            show [global|session] status  其他同上

    修改：
        全局：今后启动有效 重启配置后又没了
        配置： 重启服务有效
        回话：当前运行有效
        set @@session.commit=1;
        set global commit=1;
        set comit = 1; 从会话级别开始找

create database [if not exists]:
    first show character set; 看一下可以设定的值
        默认继承status里服务器级别的字符集，使用defalt会让所有里面的表继承这个设定
    show collation;
        一个字符集对应多个排序，制订了排序就不用指定字符集了

    当前db下使用 status
        显示当前连接上的所有信息

    alter database db_name  [default] character set xxx  [default] collate = xxx;
        show variables like character%  to check

    drop database if exists  xxx;

table:
    show table staus [like 'xxx'] \G;
    create table xxx [if not exists] .....(); 具体看help
        column definition:
            not null | null 不可为空或者可以
            default xxx  默认值设置
            autoincrement 这个一般就是主键，一个表只能有一个这个，
            unique （key）  表示设置唯一属性，
            [primary] key 设置主键，如果想设置多列主键，不能在这里设置
                这里primary可省略，标记别不可以
            comment  string  设置注释
            表级别：
                primary key (xx,xx,xx) 联合
                unique key (xx,xx) 设置多个唯一的key
                foreign key (xxx) references tbl (name) 外键
                check(expr) 检查
                创建key就是创建index
                index index_name(col_name) xx,xx 创建索引
                    or  key index_name(col_name) 都可以

        注意
            表级别key的设定需要放在括号里面，外面可以有可选的名字，但是不是用引号，
                而是用反引号！！

      create table xx select xxx from xxx;
           也可以的，这种方法不会复制任何约束，只有数据，索引都没有

      create table xx like xxx;
            可以复制表的结构！！

        option: after ()
            engine=Innodb auto_increment=2(start from 2) default charset=utf8

    delete:
        drop table if exists  xxx,yy,zz; 多个

    alter table xx 
        rename as xxx;
        add [column] name type [first| after col_name]
        add primary key (xxx)
        add unique key(dd)
        add constrant name foreign key(xx) references tbl(name); 
            加约束的好处是名字可以在information_schema.KEY_COLUMN_USAGE里查到对应的外键，用来删除
        drop xxx;
        change origname  newname newtype; 这个类型必须写出的
        modify cool_name  type 只能改类型，不能改名字

    key:
        主键不能空，要唯一，可以多个组合
        ｕｎｉｑｕｅ可以空，要唯一
        修改约束的方法就是modify然后重新设置类型,属性...

        删除空约束： 直接modify
        删除自动增长，直接modify        
        删除主键，  alter table xx drop primary key;(需要先删除自动增长以及外键）
                                    drop index xxx;(不是drop unique （xxx）
                                        这里的xxx是添加的时候的index nam

        information_schema.key_column_usage 
            这个表中可以找到表对那个的外键引用表以及引用列还有主键信息

        约束/索引：
            单纯的索引只能通过show index from tblname 查看
            create index name  on tbl(col(length) desc)
                可以创建索引，指定使用的列中的长度，对应的顺序，这里是纯索引
        repair table xxx quick;
            用来修复长期使用后的索引，mariadb不行


view:
    权限在mysql。user里面查看
    create algorithm=merge | temptable view xxx as  select .....
        merge 就是普通的执行时运行sql   
        temptable创建时运行，获取结果，以后直接用，所i一只能读
    drop view [if exists] xxx;

    check:
        infomation_schem.views 可以查找
    alter view as select xxxxx;
        更新数据限制太多，一般只查看

insert:
    insert into tabname (xx,xx) values (xx,xx),(xx,xx)
    insert into tabname set xx=xx,yy=yy;

sql_mode:
    默认过于宽松，不符合规矩的模式也可以进入，字符串可能截断
    ansi default
    strict_trans_tables: only strict in transaction engine table
    strict_all_tables;
    traditional:
        过于严格，某些情况下可能出现部分陈宫的现象

delete:
    delete from tble where xxx order by xx limit 1;
        只会delete最后筛选的结果
update
    update xx set yyyyy where xxxx;

select:
    like, rlike 这个可以正则
    order by xx asc/desc, yyy desc 可以多个
    select name as alias

    group by:
        这个是分组的功能，但是不会聚合除分组field外的其他列，只会显示对应第一行，
            所以要聚合函数，count min max avg sum group_concat()最后这个是对应列
            的元素逗号分隔放在一起
        group 之后的过滤使用having，可以对select出来的field过滤，where在group之前操作
    create or replace xxx(a,b,c) as select (xxxxx) 
        这样可以改名

join:
    select * from a,b
    select * from a corss join b corss join b;
        这种叉积，很不好
    select * from a inner join b on a.xx=b.yy;
    select * from a ,b on a.xx=b.yy;
        内积，其实和叉积是一样的，不过多了限制，建议用inner join的那种
    自联结:
        其实就是内连接，不过select * from a as p1 join a as p2 xxxxxx
        需要两个as来分别假装两张表，
        inner join 可以写成join

    外连接：
        select * from a left outer join b on xx where xxxx;
            where最后处理，这个表示左边不匹配的也会显示
            可以写成 left join

    union:
        select * from a  union select * from b
            需要两边列数量相同，用来接起两张表，重复的会折叠掉，用union all 可以全部显示
    full union
        就是左右连接，显示两边的满足条件以及两边各自的部分，
        这个不支持，手动使用select * from a left join b  union
                            select * from a right join b  来模拟

query cache: 缓存，小压力才开,或者多读少写
    这个利用你的输入命令作hash来标记缓存的命令结果，如果修改过，就失效，所以在高并发写的情况下
        不要开， show variable like '%query_cache%' 查看
    query_cache_limit  max cache size byte per command
    query_cache_min_res_unit  最小的分配单元，就像page一样
    query_cache_size    最大缓存总和限制
    have_query_cache   yes|no 数据库支持与否
    query_cache_type on|off|demand
        yes 的话通过select sql_no_cache xxx from xxx 来暂时关闭缓存
        demand 通过select sql_cache xx from yyy 来暂时开启缓存
    query_cache_wlock_invalidate off|on
        off 在命中缓存的命令作用的表正在写锁定时不会失效缓存，直接读

    检查运行结果：
        show status like '%Qcache%'
            Qcache_free_blocks 已分配中的空闲块（就是碎片）
            free memory 缓存空闲空间
            hits 命中次数（不包括第一次的写入）
            queries_in_cache  缓存的命令数
            Qcache_inserts 未命中后的写入 次数
            lowmem_prunes  因为缓存总大小不够导致的筛选取出，写入新的的次数
            not cached  为缓存的 数量语句
            total blocks 总块数

            freemem / total block 碎片率过高就要调小最小单元大小
            cachesize - freemem   / cachesize 缓存利用率，过高就可以减小了
                flush query cache 可以清理碎片
            参考最小单元是  已经使用的大小 除以 存在的命令数量
            命中率是 hits / Com_select  show status like '%Com_select%'

            flush query cache
            reset query cache
                前者整理碎片，后者清空缓存

engine:
    show engines
    show table status [like  'xxx'];
    show create table xxx;

    innodb_file_per_table default on
        开启这个后，新建的表使用每个表一个目录，里面单独的数据文件,这样其实可能
            因为要维持多个文件的更新而降低效率

事务
    redo log:
        redo log buffer 
        redo log file
            这个会在事务开始前记录，先内存，再到文件，然后才是开始执行操作
            innodb_flush_log_at_trx_commit 影响刷入log到文件的操作
        log group
            多个redolog文件轮流使用

    undo log
        逻辑日志，如果出错，就把对应的操作全部undo

    bin log
        修改数据库都会记录

    show global variables like '%innodb%log%';
    innodb_log_file_size 每个redo log file大小
        log_files_in_group 组中file数量
    innodb_flush_log_at_trx_commit
        这个1 表示每次写事务都会到文件，效率低，完全acid
        0表示每秒进一次文件，高，但是危险
        2表示写入osbuffer的文件，每秒进一次磁盘，这个
            中庸稳妥，数据库挂了，但是os没挂不会有任何问题

    autocommit:
        默认开启可以关闭，
        启动事务 start transaction/begin(存储事务中只能使用前者） autocommit=1里也可以正常使用
                commit
                rollbakc
                rollback to savepoint xxx
                savepoint xxx
                release savepoint xxx

        if autocommot == 0, you must do commit yourself, 不然exit之后修改缺失
    tx_isolation:
        in optionfile is  transcation_isolation=READ-COMMITTED REPEATABLE-READ SERIAL READ-UNCOMMITTED
            串行如果有其他人在修改锁定行，会阻塞直到对方提交，这个一般不用，然后可以看到对方的修改，提交后的
            读未提交最快，看到飘忽的脏数据
            读提交是提交后可看到
            重复读是可以永远看到自己的一份
                后两个有时候出现幻读，也就是如果己方的修改导致改掉了另一个进行中的事物添加或删除的东西，
                那么会把另一方的commit之后的已经成立的影响被自己修改过的部分带进来，无法避免

    错误日志;
        log_error a file record  error
        log_warning >1的话链接错误也包含
    查询日志：
        general_log  filename 所有操作都有
        log_output 输出方式，可以file table 或者了两者皆有一般file就行了
        表的话就是mysql.general_log
    慢查询
        所有操作超过时限
        slow_query_log on
        log_output 记录形式table file
        long_query_time  
            select sleep(5)  可以测试函数
        show global status like '%slow_queries%' 可以查看本次服务启动之后的慢查询
        
        mysqldumpslow -s t -g 'select \*' file  可以分析慢查询日志，
                percona工具也可以哦
    bin log
        记录所有的修改,用于主从复制
        binlog format: 
            statement 只记录操作语句
            row 记录修改的数据 这个可完整回复，但是慢
            mixed两者兼有自我调节
        show variables like '%logbin%' 查看开关设置
        show variables like '%binlog%' 查看某些设置
            这个开关只能在配置文件里设置
        log_bin  mycnf里设置直接写文件名不用on
        sql_log_bin on 这个只是会话变量只能动态设置，用于控制当前会话是否记录
        binlog_format 记录格式
        max_binlog_size 但文件大小会自动加1名字如果超过的话
        sync_binlog 
            0表示写内存，由os自主刷文件
            1表示严格flush文件
            n＞１表示经过n个事务后提交一次文件
            0的性能很高，最好备用电源然后0

        show master logs
        show binary logs 查看文件列表
        show master status 当前正在使用的log文件
        show binlog events in 'xxx'  from 234 limit 1,2 这里的from是内部记录的某个事件的开始位置（文件内的位置）
                查看内部的记录的命令
                如果设置了autocommit，每个命令就是三个事件start transaction, select xxxx, commit
                每个事件都记录开始结束位置

                tip  select xxx  limit 3,4  从第3行开始的4行
        flush logs 或者重启服务
            都会重新用新的log文件
        command:
            mysqlbinlog file
                用于分析binlog

    备份：
        完全备份：全部的
        差量备份：
            这个是针对最后一次全量之后的差别备份，所以只有最新的备份有用
        增量备份
            针对上一次备份
        热备
            读写中备份 innodb
        温备
            备份中只能读 myisam
        冷备
            不能读写
        物理备份
            备份底层文件
        逻辑备份
            mysqldump  备份的实际是执行语句

    开始事务，如果想要精确到当前开始时刻的快照，
        就要使用start transaction with consistent snapshot,
        不然直到开始第一句读取位置都不会真正快照

    mysqldump       
        这个逻辑备份，日常语句
        mysqldump -uroot -p -h xx  --single-transcation(这个自动开启可重读事务，不管当前设置是否是可重读的隔离模式）  --routines --trigger --events(这三个是同事备份一些函数，过程，触发器） --databases(这样会产生创建数据库的语句） xxx  -p > xx.sql
        开启二进制log时加上 --flush-logs  --master-data=2 参数，
            前者表示从当前备份开始使用一个新bin文件，后者表示以注释的方式记录当前binlog中的位置，
            这样热备的时候，恢复完了这个.sql可以查看位置值，找到应该从哪边开始继续恢复binlog
        --all-databases 备份所有数据库
        --master-data =1 是给从机器用的，会直接记录binlog里的位置，从机器会向主从这个位置继续请求的

        恢复的时候注意set sql_bin_log=off 不然无谓的记录太多，这个取消当前session的binglog

    xtrabackup
        percona系列中的工具，属于物理备份，可以全量，增量，备份的是innodb中的底层的单元，还有
            事务日志，因为备份瞬间可能有事务正在或者完成了，要重放或者回滚，
            增量备份 存在的时候，只需要对最后一份增量prepare整理，其他的都会被整合到整个全量
                备份里恢复

        myisam      
            需要 --lock-tables  --lock-all-tables 参数，因为myisam只支持温备

        这个工具有两个命令，本身是一样的，但是运行不同的名字参数不同
        innobackex --defaults-file=/etc/my.cnf  --host -u -p backup_basedir
            就可以备份了，如果要备份单表，需要innodb_file_per_table
        恢复
            innobackex  --apply-log --use-memory=xx  backupdir
                apply transcation's log into backup files
            innobackex --datadir=xxx  --copy-bak /backdir
            chown mysql:mysql -R datadir/*
            然后启动mysql（当然配置文件要是先存在
        
        stop mysql
        增量：
            innobackupex -p  --incremental /backupdir --incrementtal-basedir=last_bakcupdir
        恢复；
            innobackupex --apply-log --redo-only --use-memory=xx backdir
                这个用来恢复最开始的全量，但是rollbakc的部分不用做，只要做已经提交进redolog，但是
                    还没有进文件的已经提交事务
            innobackupex --apply-log --redo-only --use-memory=xx backdir  --incremental-basedir=incredir
                用来增量恢复到全量，除了最后一个，都是不用rollback的
            innobackupex --apply-log --use-memory=xx backdir  --incremental-basedir=incredir
                 最后一个增量，这个需要roll back
            之后重启msyql就行了
                

        option:
            --parallel=8 增加线程，会增加io
            --throttle=200 限制io次数每秒，节流如果资源不够
            --compress 压缩备份
            --compress-threads  压缩的线程
                如果使用了这个，恢复前必须使用qpress 解压，或者使用--decompress解压
                这个是手动的，这些文件不会影响回复
            
            流式打包备份
                innobackupex -pxxx --stream=tar  /badkupdir > backup.tar
                tar -ixvf xx.tar
                    需要-i
                can be remote:
                    innobackupex -pxxx --stream=tar  /badkupdir | gzip | ssh xxxx " cat - > backup.tgz"

            xbstream备份：
                innobackupex -p --stream=xbstream --compress backdir > xx.xbstream
                xbstream -x -C extrace_dir < xx.sbstream
                    需要安装xbstream
                innobackupex -p --stream=xbstream --compress backdir | ssh xxx " xbstream -x -C backdir"

                
