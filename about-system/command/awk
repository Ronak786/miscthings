接受标准输入
#!/bin/sh
awk '
BEGIN {print "File\tOwner"}
{print $8, "\t", $3}
END {print " -Done-"}
'

或者awk -f file 里面直接就是{} {} {}
或者#!/usr/bin/awk -f ..... 也可以 
    一般用最后一种，除非你要传参数，这是用第一种
"\n" 双引号里的\是认识的特殊字符，和shell不一样，那边不认识
$1 $2 表示分隔的一行中的某一列
    但是！ 这些不能放在引号里面，
    x=1 $x  和上面一样的
    $0 整行
    print $0 == print
    print $0,$1 默认空格

#!/bin/sh
column=${1:-1}
awk '{print $'$column'}'
    awk不认识shell的变量，所以要在语句中间跳脱，加入shell变量，本身的$不要忘了
    同样还可以这样写 awk '{print $c}' c=${1:-1}  不太好，要记住

操作符号：
    + - * / % <space> 
    7 3 会变成73 因为space是连接的作用,这个会在值的衡量之后执行,这个优先级最低，只有无法计算的额时候才链接
    print /会浮点，其他操作整形
        int to string 直接
        string to int 会变成0如果非法
    ++ -- 
    +=
    && || !
judge:
    0, 未定义都是 false
    == != > < >= <=
regular: 匹配
    ~  !~  match not match
    word !~ /(a|b|c)/ 这之后才是 {} ，这个匹配本身不再{}里面！！

flow:
    if (xxx) statement else xxxx
    while () xxx
    for (xx;xx;xx) statement
    for (xx in xx) statement
    break
    continue
    {statment,xx,xx,}
    variable=xxx
    print xxx > xxx
    printf format,xxx > xxx
        print "string", a, b, c; 可以多个string
    next ??
    exit

tip:
    可选筛除打印
    $1="";$3="";print 这样消掉两项

awk -F: 改变域间隔标记 这个只能设置一个标记
或者命令内部 FS=":"; 这个可以多个标记
    awk -v FS="xx" 也可以
    -v 可以事先自定义变量的
    
FS改变时机：
    如果在当前行的处理代码里面想改变，
    首先应当FS=“XXX”然后 $0=$0 然后就可以按照新格式获取$1 $2
OFS:
    改变输出间隔符号 即时生效
NF:
    域的个数 $NF打印最后一列
NR:
    当前行数
RS:
    读行的分隔符，""表示读全文，限定100行
ORS:
    输出行分割
FILENAME
    文件名

associate array:
    就是字典，默认值是0，可以直接加值，a['hehe'] ++ 就行了
    for (i in a) {
        xxxx a[i] , i
    }

    tip:
        初始化所有字典的一项：a[""] = 0防止出现空文件的时候的报错
        使用一种形式 username_to_dir[username] = dir 这样不容易忘记
        记住测试col的数量，防止错误
        if (NF != 0) {
            ignore
        } else {
            xxxx }

printf:
    printf (xxxxx);  括号是可选的 , 自己加换行
    print  use ORS OFS 来end每个逗号以及每行
    %d %c e f s x o  和c的printf差不多
    %-20
    小数点后：
        %e %f表示小数点后的位数
        %g表示所有的数字，
        %d %o %x表示最少的位数，少了补0
        %s最多打印的字符数量
        %020d  同样会加0 ，如果位数不够

    printf () > xxx  
                >> xxx  这两种其实都只会在第一次运行的时候指定模式，
        也就是如果运行前文件里有内容，前一种会清空，后面运行中所有的都会写进去，
        因为文件只打开了一次

exit num
next 相当于continue， 会转入下一行的工作
math:
    cos, exp, int, log, sin, sqrt, atan2, rand, srand
    int( truncate) 
    rand() return (0,1)
string:
    index(str, search) > 0 if found
    length(string)
    split(string, array, separator) 返回值是分片数，array存内容，分隔符只能接受第一个字符
    substr(string, posotino) 分别是字符串，开始的位置，第三个是长度，没有就是到最后
    substr(str, pos, max)
    sub(regex, replacement)
    sub(regex, replacement, string)
    gsub(regexp, replacement)
    gsub(regext, replacement, string)
        这四个函数第一个参数是sed形式的匹配/xx/如果不是这样，默认是一个变量，包含这样的形式的值，
        第二个参数是替换值，第三个字符串，如果没有，默认是$0
        gsub版本替换所有，sub提花第一个, 提还成功返回1，否则0
    match(string, regext) 就是match之后产生的变量
        before = substr($0,1,RSTART-1);
        pattern = substr($0,RSTART,RLENGTH);
        after = substr($0,RSTART+RLENGTH);  利用这些特殊变量获取，会改变字符串
    tolower(string)
    toupper(string)
    asort(string, [d])
    asorti(string, [d])

misc:
    getline  读下一行
    getline < file
    getline var
    getline var < file
    "cmd" | getline
    "cmd" | getline var
    system(cmd)
    close(cmd) 只能打开一个pipe，所以之前的额要close
    systime()
    strftime(str)
    strftime(str, timestamp)
        同date这个命令的man

自定义函数：
    function error (mesg) {
    }
    gensub(r,s,h[,t])
    strtonum(string)

模式：
    /xx/ { }
    /xx/,/xx/ {]
    NF != 0 { }  同意于 if (NF != 0) {} 但是更简洁
    (NR==20), (NR == 49) {} 也是between

ARGC
ARGV 实测再看 , 实际就是命令行参数，地一个是awk 后面是添加在后面的参数，不包括-xx 以及 {}的匹配部分
FILENAME = ARGV[ARGIND]
FNR  当前文件中的行数位置， NR是所有文件的
OFMT 默认的输出数字格式
a[x,y] 可以指定为二维数组元素
ENVIRON['PATH']  这个是环境变量数组
ERRNO getline后的错误记录
FILEDWIDTHS 用来指定固定宽度，$1 $2 可以直接按照这个宽度提取
