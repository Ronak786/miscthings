bash
debug:
    echo 不要用ls，会列出子目录的
    */* 所有子目录,只会一层,而且必须一层

    *只会在当前指定的路径扩展，然后再去其他路径找文件, 全部添加好后作为参数传给程序，
        如果有文件名字叫 -h 那么程序会program * 可能会打印帮助，如果第一个是那个文件的话

for i in *.old
do
    mv *.old *.new
done 批量这样更好

[a-z]?
[a-z]*  
rm file1" "file2  == “file1 file2" 引号就是联合的作用放中间也一样

'' 内部不支持\ ,注意
"" 内部可用 $ \ `` 来表示特殊含义
混合方式：
    "a"'b'"c"'d'  引号的作用打开以及关闭特殊解释，字符串可以自动相连接的，shell只是单纯的传送他们

subshell:
    `expr xxxx' 这个内部改变的变量不会影响外面，这个是子shell

变量：
    赋值不能有空格，如果需要的话，可以把空格用引号引出，就可以连接了
    空格表示变量的终止，
    一行可以有多个赋值，可以赋值之后执行其他命令
    字母数字，下划线是有效变量，所以和shell其他部分链接的时候，注意如果其他部分以这些为开始，会被shell误认为i是
        变量的一部分，那么变量解释会扩展最长的，导致错误，需要{}
        $x"run" $x'run' $x\run $x"run $x""run "$x"run 都可以

    {}:
        ${var?word} 如果没定义就报错 ${var?} 这样也会显示一些错误信息
            定义为空也算定义，unset就不算了
        ${var-default}
            use default is undefined
        ${var=default}
            output use default if undefined as set it 
        ${var+msg}
            如果存在，就显示后面的内容，后面可以是一个命令，反正满足一个空格之前的部分就行了
            可以作为if xxx的类型使用
        ${var:+msg}  var:= :? :-  
            这些新版本把赋值 b= ,  b=""  都归类为未赋值

        注：
            真正执行的时候才会生效，如果条件到不了，不会执行, 里面如果有命令，效果发生在
                当前shell， echo的效果在子shell

        字符串截取：
            ${var#*/} 第一个/及左边去掉
            ${var##*/} 最后一个/及左边去掉
            ${var%/*} 从右边开始第一个位置去掉
            %% 直到最左边
            ${var:a:b} 从第几个开始的几个
            ${var:a} 从第几个开始
            ${var:0-a:b} 从右边第几个开始的几个
            ${var:0-a} 右边第几个开始（然后往右边）

        特殊变量：
            $1 .. $9, 其他的可以 shift num; 来移位获得 $0 是脚本名
            $* $@ 如果没有“”包围，是一样的
                如果有“”的空参数$@也会保留，所以 ${1:"$@"} 这样可以保证输出参数可用
            如果有，$@给出的参数会保留命令行上参数边上的引号的作用，这样引出来的变量
                就成了单个变量
            $#
                参数的数目
            $$
                pid

            $! 
                最近启动的后台作业的id，后面可以kill ， 可以 wait
            wait    
                如果没有参数，等待所有
            $?
                上一个命令的结果
            $-
                当前拥有的选项，下面的那些选项

            设置命令行变量
                在内部设置set a b c 之后$1 等就会变成这些
                set x;shift 用来取消命令行变量，因为设置了一个，然后shift一个

            变量的识别：
                字母开头，通常变量
                数字开头，位置变量
                特殊符号* @ # $表示特殊变量

            (a ;b) 这个子shell中执行，变量不影响本体
            { a; b; } 注意空格，当前shell执行，有好处
            ( ) 这个用与子shell
                在条件执行或需要改变环境来获取输出的时候很有用，又不想改变当前的环境
                用在管道里，
                tee /tmp/file | \
                (grep MATCH /tmp/file >/dev/null && cat header - || cat - trailer )
                /bin/rm /tmp/file
                同一个子shell获得的是一个标准输入
                    
            flag:
                x:
                    sh -x ccccc
                    #/bin/sh -xv 脚本解释的方式只传递第一个参数，注意
                    set -x  用来在执行中和后显示,衡量的是变量替换后的语句
                    set +x turn off
                v:
                    执行前显示，verbose
                
                u:
                    报告未初始化的变量, 空的也算初始化了
                n:
                    test syntax
                e:
                    可以设置有错立刻推出，有时候有错不会推出，grep如果没找到会报错，但shell本来
                    不会因为这个退出
                t:
                    执行更多的行，比e多一点
                a:
                    a=2 cmd 这样a是一个可导出变量
                    同样sh -a xxx   会把所有脚本里的变量作为可导出变量
                k:
                    没啥大用，就是上面那个赋值可以在命令后面，也可以前面
                h:
                    存储路径，加速执行，默认开启
                --:
                    剩下的都是参数，不是选项
                -c:
                    命令行测试shell语句
                    sh -c "echo aaa"
                -s:
                    从stdin读入，而不是命令行，无视命令行,不然管道系列会导致当前命令的参数读不到，
                        因为参数必须是命令行的
                -p:
                    use effective instead of real


trap: 
    执行某个字符串命令如果信号捕获：
        trap 'kill xxx `xxx`' 0 HUP INT TERM (可以是数字）
        0表示脚本终止时的特殊标记，这样终止时也会调用这个
set:
    查看当前变量函数设置
    env 也可以，不过这个是外部命令，获取的要比set少
    set a b c 可以设置当前的命令行参数，这个可以用于给当前参数基础上增加一些默认参数，屏蔽内外
unset:
    cancel

export:
    标记当前变量作为全局，可以被child继承

exec:
    这个命令用来本地执行，而不是子shell，这样可

PATH:
     empty means current dir
CDPATH:
    如果找不到目录，会在这个目录里找

IFS:
    命令行参数分割选项，默认是 空格 tab 回车
ps1:
ps2: 用来标记命令提示
MAIL:
    mail box
mailcheck:
    how many time period mail checked
USER TERM TZ LOGNAME
    这些都是可以获取的默认设置，非当前设置

flow control:
    复合：
        if while 等后面可以跟一大串语句，还可以分行，最后的then会根据if的最后状态决定是否执行
        内部必须有语句，可以有一个;来填充
        cat xx | while read 也可以 ,两边还可以都是subshell ，输入输出都会获取到的
        整个while可以在一个subshell里面供给输出
        也可以 while xxx
                do
                done < file

        注意：
            echo 1 2 3 | read a 读不到的
            echo 1 2 3 | (read a) 才可以读到,而且传不出来。。。）
            但是echo 1 2 3 | while read a,  if read a 可以读到

        read 的参数如果不够，置空，如果多了，放到最后一个

        while true == while ;

        until true 执行直到为真
        do
        done

        for xx in xxx  ,如果后面使用 "$a" 那么当作一个值，否则当作空格分开的值
        set 可以用在for里面，然后$1 $2 引用每次循环的多个变量，如果用了引号
        case xxx in xx|xx) list;;
                    yy|yy) list;;
                    *) xxx;
        esac
        可以使用文件匹配的[xy]* 来同陪
        只能有一个在case判断里

        break continue 可以加数字 2表示更外面一层

    expr:
        +-*/%=> >= < <= != = | & : 最后是与 或以及匹配

        expr 2 + 2 需要空格！！
        还要注意 > < * 这些有特殊含义，单个字符用‘’起来
        exprt '2+2' 是一个字符串，不会衡量值
        expr $a = '2+2'
        expr no  会直接打印非衡量值
        可以接受负数
        expr $a \& $b 这个如果为真，打印的是第一个数的值！！

        expr string : pattern   ,注意跳脱， : 优先级最高
            只能从开头匹配, 打印的是匹配的数量
            如果后面有匹配组，和sed的非增强模式没有-r一样用，则会打印匹配组
            可以用来模式匹配以及判断

function:
    func() {
    } 即可
    函数内部的参数是想对于函数的
    inc() { eval $1=`expr \$$1 + 1`; } 
    eval 可以让第一遍执行的字符串第二遍执行

    in shell , exist status of a function of 0 is true!! used in while/if

    利用$! 获取刚刚创建的子shelljob的id，可以在另一个子shell里几时kill
#!/bin/sh
	MYPID=$$
	done=0
	trap "done=1" USR1
	(prog1;echo prog1 done;kill -USR1 $$) & pid1=$!
	trap "done=1" USR2
	(prog2;echo prog2 done;kill -USR2 $$) & pid2=$!
	trap "kill -1 $pid1 $pid2" 1 15
	
	while [ "$done" -eq  0  ]
	do
		prog3
	done

"" 里面\n是没有意义的， 不认识
