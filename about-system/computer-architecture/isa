指令集的设计需要考虑软硬件接口双方的实现的可能性
还要考虑内存的访问问题，按字对齐，还是字节，
指令的长度，是否固定长度，操作码，操作数的位数等。

寻址方法：
	立即数（直接指令里写）
	立即寻址（以指令里的数为内存地址）
	寄存器寻址（以寄存器里的数为地址）
	间接寻址（以寄存器数为指针）
	变址num（寄存器） 的方法 像数组一样，不过index在寄存器里
	基址变址寻址 （r1+r2）的方法寻址

寻常表达式转逆波兰（好用，没有括号）：
	假设栈底和表达式最后都是终结符号
	从左到右扫描：
		１数字一律按顺序进入数字栈，
		２符号如果比符号栈里的符号优先级低或者一样优先级，那么栈中符号出来到数字栈里，　否则压入
		３如果扫描完毕，符号栈弹出到数字栈，完成

		ｅｘ１：优先级终结符号最低，其次左括号（这个特殊，碰到自己的时候是直接压入的，而不是弹出原来的自己），
				然后右括号（这个弹栈直到左括号，然后成对销毁），然后＋　－，＊／　这些和普通的一样了

	求值逆波兰：从左往右扫描，遇到符号就把最上面的两个数取出来计算，再放入

指令寻址：
	这个通常的寻址都可以，还有一种基于当前ｐｃ的寻址方式
	规律的指令寻址方式有利于编译器的使用，有三地址，两地址的方式
