晶体管 是半导体制造的元件， 在这里就是三极管了
三极管特性： 输入1 输出0；输入0  输出1
			两个串联： 产生与非们的效果（就是先与后非）
			两个并联： 产生或非们效果
			利用与非或者或非 可以独立构成与 非 或的效果，
			所以这两个都是完备的门，也只有这两个

			现在的集成电路就是在一个芯片上把多个门组合在一起，芯片固定大小，
			用陶瓷板装入， 小规模电路就个门，规模增加，门就增加，
			但是引脚不能多（本来引脚对应门的输入输出），
			所有有了组合电路，这样一个组合电路就固定的少量io引脚）


组合电路：
	基本的有多路复用器，可以理解为选通，2^n个引脚，通过另外n个脚作为选择器，
	选择其中一个输入来输出，或者把固定输入轮流放到不同的输出上，
	这个可以用来把并行进入的数据串行输出

	pla: 可编程逻辑， 就是把与或门输入输出封装好，
		但是输入输出的信号数量可选择烧录改变，供客户自己编程
		实现逻辑门功能，这种叫现场可编程


锁存，这是一个SR锁存，S 1 R 0 则输出会变成1，，然后维持，这个时候S 恢复0
	不会改变输出，
	如果R 1 Ｓ０，那么输出会变成０，然后Ｒ变成０后任然保持
	这样就可以做存储用了，具体是输入那边用一个时钟和原输入
	用与门来使１的输出只出现在时钟为１的时候

Ｄ触发器：
	这个利用的使门的延时，同一个信号，一边通过非门，另一边不通过，
	这样再与，这样在时钟上升的时候会出现短暂的时间与门输出１，
	这个１可以用来当作上面锁存的输入的控制通过的门槛，
	这样就可以让一个短时间的１产生来保存触发值了

	图的话，触发器的clock那边有个箭头

	把多个这种触发器连在一起，可以做寄存器，统一用一个时钟信号触发，
	上升沿装入数据， 有时候会发现两个可抵消的非门，这个是用来放大
	信号的

反向缓冲器： 输入有一个数据，还有一个控制信号，当控制信号高时，
				正常的非门，低，则断开
非反向缓冲器： 控制信号高，正常导通，低，断开
这两个形状和非门很像,还可以用来放大信号

信号有效：就是可以发生动作的信号，带上横线表示低电平有效，否则高电平
信号无效： 相反

内存使用行列选通信号 ras cas
	这两个用来分别指定行和列的地址，就可以定位到指定的bit了（内存以bit为
	单位）,一般多位的字的数据通过多个内存芯片并行输出，每个芯片可能输出1，
	4，8，16位

ram and rom:(之前的各种电路都是静态ram的形式)
	静态ram，sram这个最少需要6个晶体管（就是锁存器触发器那个)，所以密度不够，
	造价也高，  动态ram用1个晶体管加一个电容实现，因为电容会衰减，所以几毫秒要
	重刷新一次，但是容量大，密度高，便宜,比静态要慢

内存类型：
	fpm（快页型，行列型阵列），edo（流水线访问）， sdram（同步访问，取消控制,
		直接cpu访问）ddr （上升下降沿都可以触发）

rom:
	不可擦鞋， prom 可编程一次（熔断）， eprom，可以紫外线照射擦出，然后变成
	eeprom这个可轻易擦除，但是速度慢一倍，造价高，容量小， 速度比dram和sram都要
	低一个数量级， 所以ram比rom快哦

闪存可读写，可擦除，按块来修改，也属于一种eeprom

cpu 管脚：
	通过输入输数据，控制，地址总线（平行导线）和内存以及输入输出设备进行通信
	控制信号包括了控制总线，中断，状态等信号

总线：
	一个总线周期一般很难提升，因为有周期偏移的影响，总线宽度可以用来提升总体效率；
	同步总线由事先制定好的访问，延迟和获取周期组成，所以很难改变，也很难利用今后的速度提高；
	异步总线利用双方的准备和结束信号来互相通知，灵活但是机制复杂，目前还是同步的多

	总线一开始用的是同样的，后来由于速率不同，低速高速就分开了，因为一样的话周期必须照顾
	最低速的设备了。
	总线仲裁就是所有设备都通过总线转换器链接到总线仲裁器，然后负责决定哪一个获取主设备的权利，
		也可以是无中心的竞争型，最高优先级自动获得

	注意总线的通信，每个信号的上升下降都是一个过程，不是瞬间完成的，同时各个信号之间会有
	用来稳定信号的时延，所以两两信号间是有时延差的

	特殊的总线操作：
		一个地址，多次数据，每个周期一份数据
		读改写，一次性占用不释放总线，实现锁

	中断：
		一般用中断控制器，如8259a，然后控制器直接连接cpu中断管脚，
		cpu收到中断后，会反过来确认，然后询问中断号，最后找到
		中断向量表里的入口地址

cpu介绍：
	pentium4， 使用netburst替代p6微架构，兼容至8088，制造工艺（晶体管间总线宽度）大几十纳米级别，
		外部传输使用64位，内部32位，超线程（一物理两逻辑核），超标量（多指令并行执行），
		L1 cache中的都是译码完成为risc微码的指令了，减轻译码工作，三级缓存，内部有监听总线来同步
		核间缓存值，外部用同步总线分别和内存，外设连接，  对散热做了大量工作，同时支持睡眠级别，
		降低功耗(拥有大量接地和电源信号）
		电路图中用  xxx#来表示低电平有效，而不是上横线，这样更清晰
		cpu的地址是36位，数据是以8字节位单位对齐存取的

		cpu对外的访问需要总线请求，锁定，地址，通知，接受对方状态，数据往来等多个管脚的组合
		内存也会有流水线，cpu连接sram dram（都会用到），访问分为多个阶段，每个阶段用独立的信号，
		所以可以共同使用（这样减少内存的延迟)

	ultrasparc 使用外置的二级缓存，使用内部逻辑定位使用二级缓存，而对内存的访问则是使用upa统一接口，
		这些都使接口更加灵活，同时速度略慢，但是并行读写的位数会增加很多。
		sparc 让德州仪器代表制造cpu，自己设计芯片，不生产

	8051 内部4k 外部64k存储，地址16位，数据8位，拥有输入输出信号线，独立交互

总线介绍：
	isa： 最初ibm pc基于8088，后来pc/at 基于80286，兼容以前，所以总线接口卡都是两段式设计，
		后面一段用来新加的，再后来ibm设计新总线microchannel，排挤其他公司，其他公司共同指定isa，结果ibm
		吃瘪，isa后来扩展到32位，eisa  ， 这些都慢，所有后来逐渐变成了pci，但是要兼容以前，
		所以pci可以挂接isa
	pci: 1990年开始提出，提高速率给多媒体用，频率高，单位周期传送的位也多，后来的pc布局就变成了
		cpu连内存，中间有pci桥，这个挂pci设备，上面有isa桥，接isa设备，不同的pci设备分不同电压，
		不同位，所有pci卡也有两段，32bit 和64bit的
	agp 总线，这个用来专门连接图形显示芯片，因为高速(后来被pcie取代）
	
	在pci之前，都是单总线的，后来为了高速互联，低速互联，出现了多总线的模式，用桥接连接
	pci总线仲裁 (事务的开始都是时钟下降沿）
		一个设备或cpu发出请求，获得准许后发起总线事务，如果无人竞争，可以连续开始多个事务，
		如果有竞争，下个周期交出使用权
		pci总线信号分为地址，事件类型，然后发送给从设备，然后双方的准备就绪信号，然后数据
		接受后还有返回的校验等，可选32 64位读写以及配置或设备内存读写，错误的诊断，中断
		配置等，一个设备可以有4个逻辑设备各一个中断
		总线在读的时候需要交出控制给从设备，所以多了一个交出周期，写的时候不需要这个周期，
			要写的数据量和第一份数据一起交过去

	pcie:
		这个和pci完全不同，是基于包交换机制的，点对点连接到交换的控制器上，集中式连接
		分层逻辑：
			物理层：提供传输功能，由多对单工线提供两各方向的线传输，使用8/10bit编码来解决
				传输多个0的问题（此时和不传输时候电压性质是一样的，所以需要区分）
			连接层用来检错，添加顺序号，以及获取确认包，重传以及流量控制
			事务层用来进行多个事务的传输，提供乱序服务，，优先级处理的功能，
				提供内存 io 配置 消息空间的访问（消息取代了pci的控制信号）
			软件层用于软硬件接口，以及兼容旧总线的模式

	usb:
		由根集线器出来，连接设备，用来连接低速而多的设备，又可以省去重启等pci设备
			的步骤， 拥有控制，同步，块，中断四种frame，
			每1ms都会有一个广播帧，如果由数据的话，会附带上去，一个帧包含了多个包，
			包有输入和输出两种类型，包括获取和写入两种动作，还有前面frame的确认
			一代的usb使用uhci和ohci控制器，前者intel设计，主要软件控制，后者
			微软控制，主要硬件工作多，
		后来有usb2.0，但是没有替代1394火线，因为消费市场有，企业也不愿意改
			使用ehci控制器
		
