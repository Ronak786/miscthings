in additional to iscsi userspace, kernel module is most important

iscsi_init:
	iscsit_reg_transport():
		register the iscsit_tcp_transport struct
		check transport_list to see if already added
	alloc a dummy page
	memset a scatter struct for scatter gather
	make the page as the sg's using page

	create a mempool for command abort struct
	register a chrdev iscsi-scst-ctl with ctr_fops

	event_init():
		use netlink_kernel_create to create a netlink number of NETLINK_ISCSI_SCST
	create kmem cache for iscsi's session conn  thread_pool and command
	iscsi_register_target_template:
		register a iscsi_template struct(has add_target.. some actions)
		use scst_tgtt_sysfs_create() to add a kobj under targets entry
			add mgmt and some other attrs under it
		add into scst_template_list list
		set sysops in iscsi_conn_ktype.ops
	init a thread pool called iscsi_main_thread_pool and add into iscsi_thread_pools_list
	then for every cpu , create two  threads for read and write,so 8threads:
	read: istrd:
		test the mainthread's rd_list not emtpy:
		scst_do_job_rd:
			process_read_io:
	write:istrw:
		scst_do_job_wr:

	BUT THESE TWO READ WRITE LIST can not be tracked,tooooo long,
		so I think best way to track transport is tracking how every command
		I type to make iscst work calling  the module's function


AFTER INMOD scst_user  scst  
	we now have three list linking in dev_handler, devices scst_user_dev 
		when you use fileio_tgt to create a file dev, it will have:
			a devtype with operations to communicate with ioctl wait recv cmd in register in dev_handler;
			a scst_dev in devices 
			a scst_user_dev in dev_list manage dev's from fileio_tgt only(not important)
	now insmod iscsi_scst.ko,
		we have a iscsi entry in targets entry,this used to control adding and deleting targets:
			in it we have a mgmt which is set by scst_tgtt_sysfs_create():
		when  add_target iqn.2016-05.com.example:storage.iscsi-scst-1
		call scst_tgtt_mgmt_store:
			use scst_alloc_sysfs_work() to alloc a work calling scst_tgtt_mgmt_store_work_fn()
			add this work into sysfs_work_list ; wake up sysfs_work_waitQ
			create another sysfs_work_thread_fn in addition to scst's sysfs_work_thread_fn
				to avoid dead lock???(use onetime only as condition,so for every sysfs work
				we will have one sysfs thread)
			wait for that created work to be done and return
		
		in the work func scst_tgtt_mgmt_store_work_fn():
			scst_process_tgtt_mgmt_store:
				scst_check_grab_tgtt_ptr() check scst_tgt_template is in scst_template_list_entry
				(this is sure because we add it during init of iscsi_scst.ko)
				use scst_get_next_lexem() to get first string("add_target")
				call tgtt->add_target with target_name and subsequent opion strings
				iscsi_sysfs_add_target:
NETLINK SEND FUNC:			iscsi_sysfs_send_event
						check iscsi-scst-ctl's open state,should be open,
						(this is done by userspace iscsi_scstd process,so this should run)
						create a scst_sysfs_user_info struct (a info loader)
							check scst_sysfs_user_info_list to find a emtpy cookie as index
							add into scst_sysfs_user_info_list
						call event_send with E_ADD_TARGET as cmd code
						create a iscsi_kern_event struct event
						fill in desc infos(now no target and param info filled in ,just length)
							the cookie used to index the info struct and do wait completion
							 	at subcalls
						use __event_send():
							fill in netlink with your data and send with netlink_unicast()
						also send target name and params in subsequent two calls of __event_send
						scst_wait_info_completion() to wait for completion using info:
						then add target over
				HINT:		( here check  iscsi_scst file to see how netlink
							receive these commands and do what)
		AFTER USERSPACE get info and do some process, it will send a target command through ioctl
			into kernel,now we lookup this

		ioctl->add_target func:
			search in kernle's target_list(NOTE userspace have a targets_list,that is user's maintain)
			find the pre added user info: uinfo
			call __add_target(info) to the received kernel info:
				make sure target not already exist
				alloc a union add_info_union
				auto get an emtpy target id
				call iscsi_target_create() to create:
					alloc a iscsi_target struct,assign info's fields
					use scst_register_target() to alloc a scst_tgt field
						using iscsi_template as default actions
						search scst_tgt_template's tgt_list,should not exist
						add tgt into that template's list
NOTE: HEREH will create tgt which has operatons of the target,(attached into template )					
						in scst_tgt_sysfs_create():
							add that target under target iscsi under target entry
		ENABLE					create enabled atrr:
								this echo will through kernel,netlink to user
								and user space set enabled to target, then through
								ioctl to set kernel's enabled of that target
							create session, lun entry and mgmt(scst_luns_mgmt) under lun
							and other attrs
							scst_alloc_add_acg() to add scst_acg struct into tgt's acg list
								add into scst_acg_list
				iscsi_add_attr() to add attrs from session keys and target keys
			back now, and complete ucmd->info_completion with err status from __add_target

					set scst_tgt's priv as target,
					add target into target_list
			NOW OVER: so add target from sysfs start from user's sysfs echo,then kernel's work
				and send command to user by netlink,then user do some process ,record
				into its own list, again using chrdev to send msg into kernel complete 
				the register( so the sysfs work and kernel user add target operations are
					sync for each other???)
			target_list->target->scst_tgt->tgtt(template->operations
						     ->sysfs attrs

HINT: NEXT  should be lun's operations, under scst_tgt sysfs
	create luns under specific target/iscsi/target-name/luns/mgmt  scst_luns_mgmt
	scst_luns_mgmt_store: "add vname lun > mgmt"
		__scst_acg_mgmt_store with true and scst_luns_mgmt_store_work_fn as param
		again use scst_sysfs_queue_wait_work() to add into sysfs_work_list and wait
			(sysfs of scst is done by a work thread)
		then work will do __scst_acg_mgmt_store():
			__scst_process_luns_mgmt_store:
				set action as SCST_LUN_ACTION_ADD
				get the vname and search scst_dev_list(which have all virtual disk and real disk)
				use scst_parse_add_repl_param to get lun number and read_only=0/1 flag

				search acg->acg_dev_list to check if that lun already in acg's list
				scst_acg_add_lun() to add lun:
					scst_alloc_acg_dev() to associate acg , dev, lun into a scst_acg_dev struct
					add this scst_acg_dev into acg->acg_dev_list and dev->dev_acg_dev_list
						seperately
					do scst_cm_on_add_lun() func:(complicate)(but not match, so not do)
					scst_acg_dev_sysfs_create() to create a entry under luns,that is 
					the lun number, then creat a link in device/your-dev/export/export-lun to
						these lun number entry,
					in this lun entry,create a device link to that device
				THAT'S OVER ADDING LUN

AT THE END OF ENABLE ISCSI DISCOVERY:
	echo enable into iscsi/enabled (this is created when iscsi_scstd service is run)(but destroied by
		kernel)
	echo enable into your target's enabled (this is created when you add target)
				

EXTRA: in scst_cmd_init_done,we decide where to send command
			
IN ALL : add target to add target into kernel's target_list, and user's targets_list
	add lun with the dev searched from scst_dev_list
		link a struct into dev's list also target's acg's list
		now all together, when we find a target, we get acg,get above relationship struct,
			get dev,get dev's dev_type, do opeartions in dev_type ,can return to user space
			and operate file as scsi disk

NOW THE PROBLEM IS HOW CAN A COMMAND BE SENT TO THE TARGET

WHEN LOGIN :
		ioctl->add_session func
			use iscsi_target struct and info struct to call __add_session:
				use iscsi_session_alloc() to allocat a iscsi_session and fill
					target and sid info
				create and register a scst_session from iscsi_session:
				scst_register_session:
					scst_init_session:
						will add this scst_session into acg's session list
							also add into target's sessoin list
						add session under target's session dir
						add session under taget's sysfs's sysfs_sess_list
						call scst_sess_alloc_tgt_devs() iterate every scst_acg_dev
						to see every device under that target and attach session to it

					add to targets session list
				iscsi_threads_pool_get:
					we already created two thread when iscsi_init,no special requirement,so
					just that two thread ever cpu
					

		AFTER ADD SESSION I still don't know how to transfer data,so I guess there is a connect add,
		maybe open_iscst src_code need to be scaned, 
		I guess add connection ioctl does some magic,so look that

		I see under session entry, there is a connection entry named ip,just like kernel kobj's add func,
		so that's it!!

	add_conn:
		__add_conn:
			t->iscsit_conn_alloc : iscsi_conn_alloc:
				iscsi_init_conn
				conn_sysfs_add
				add to session->conn_list
						
			check target's session list to makesure not exist already
			t->iscsi_conn_activate: conn_activate:
				iscsi_make_conn_rd_active : add conn's rd_list into session's rd_list
				that is istrd istwr's list ==> the iscsi_thread_pool struct's idlist

		SO NOW SEE THE KEY IS THAT TWO threads!!
				


istrd:
	this thread will lock bottom half, so guess rd_list's add is from bottom half(may wrong!!)
	after got thing from that list(should be conn we added in hoping to activate)
	process_read_io:
		in do_recv will get data
istwr:
	this I guess is used by send command out 

TOO  COMPLICATE!!  I SHOULD READ THE ISCSI RFC ,THEN CAN KNOW , OR READ THE open-iscsi 
