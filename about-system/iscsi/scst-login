SHOULD ADD A TRACE_SCSI  tag !!!
login : is a very very long process
	login cmd, get some infos from reading , just like discovery session type is normal
		so  will create session in kernel, after that,
		now poll and receive write request,
		after written, because session_normal, begin create connection into kernel
			conn_pass_to_kern()
		after that, just close connection fd(now userspace connection closed)
		(NOTE in connection, when added in, together with socket, so now kernel
			can catch data from that sock and userspace can just close that sock
			because no use now)
		in connection add:
			alloc a conn adding into session's list,
			create a work which is a timeout( Nop-In interval 30): conn_nop_in_delayed_work_fn
				and schedule that time long,if wakeup but hang time not longer than that,
				again sleep rest time to fullfill that time long; if longer than that,
				and no nop cmd in list, send a nop command to initiator

	after adding conn,the conn_activate will add you to the iscsi rd thread list of thread istrd,
		which is an empty command, and do a read, got -EAGAIN just return;

	but now we have a scsi_data_ready in socket(may be above set nonblocking like options)
		now this func is called and we will got the struct iscsi_conn we set in sock struct
		and call the saved old data_ready func to fullfill normal net stack affairs
	after got scsi_data_ready return, we in process_read_io() and do_recv() get data,
		change into RX_CMD_START status and call cmnd_rx_start;
			(original is RX INIT => RX_CMD(-EAGAIN)(then get scsi_data_ready and again from here) => RX_CMD_START

		back into process_read_io, res == 0,so again add into list, now state is start so:
call link: process_read_io->cmnd_rx_start->scsi_cmd_start->scst_rx_command->scst_alloc_cmd(add in command's cbd from recv's head)
					(every command start with tag ISCSI_OP_SCSI_CMD)
NOTE :			(we now have a command head,not comand!!)
									->__scst_rx_cmd (get lun number)
							->scst_cmd_init_done->scst_init_cmd->__scst_init_cmd->
 scst_translate_lun(find scst_tgt_dev struct(using sess's list array and lun as index)
 	set cmnd's thread list == tgt's list == scst_dev's work list
	__scst_init_cmd()=>scst_pre_parse()->scst_get_cdb_info() get command info from scst_scsi_op_list(INQUERY)
	from scst_cmd_init_done->scst_process_active_cmd()(STATE_PARSE set in ini_cmd):

	scst_parse_cmd->then call scst_prepare_space()->then scst_preprocessing_done()
							(set request's state as ISCSI_CMD_STATE_AFTER_PREPROC,
							cmd's state SCST_CMD_STATE_PREPROCESSING_DONE_CALLED,
							return value as SCST_CMD_STATE_RES_CONT_NEXT,so out
							and return with state what will not continue in 
							scst_process_active_cmd)
	in scsi_cmd_start-> req->conn->transport->iscsit_receive_cmnd_data(req):cmnd_rx_continue:
		get direction and data len to receive and send
	INQUERY data size is zero,so set RX_END, res ==0 ,add into process_read_io list, again,now goto:
	cmnd_rx_end()-> iscsi_push_cmnd()->iscsi_cmnd_exec()->iscsi_restart_cmnd()-scst_process_redirect_cmd()
		(add into cmd's active list, not ready cmd list, just activate list which processed by
			dev_user_process_scst_commands() !!!)

	now return, to process_read_io, set in above processing, set state as init bhs, res == 0, so
		again do_recv, this time as start time,return again, can exit from istrd thread
		and kernel will wait for another data come to call iscsi_data_ready

	scst_cmd_thread:(got command from above processing)
		!list_empty(&p_cmd_threads->active_cmd_list):
			scst_process_active_cmd:
				scst_tgt_pre_exec->iscsi_pre_exec set cmnd->state SCST_CMD_STATE_EXEC_CHECK_SN
				scst_exec_check_sn->scst_exec_check_blocking->scst_do_local_exec()
									  ->scst_do_real_exec->dev_user_exec
												->scst_post_exec_sn
											__scst_cmd_put
/*
	ANOTHER THREAD:(main_loop)
	now user thread get
	get-multi-cmd->getcmd return to userspace,doing, then return reply state:
*/NO USER DOING NOW !!!

		main_loop'thread's dev_user_reply_get_multi->dev_user_get_cmd_to_user->dev_user_get_next_cmd-> dev_user_process_scst_commands->scst_process_active_cmd()->scst_tgt_pre_exec()->scst_exec_check_sn()-
		>scst_exec_check_blocking(set cmd->scst_cmd_done = scst_cmd_done_local) ->
			scst_do_local_exec()
			->scst_do_real_exec()(add to read_cmd_list,not activate_cmd_list !!)
			->scst_post_exec_sn()
			get out of scst_process_active_cmd(now in dev_user_process_scst_commands and then out it)->
			__dev_user_get_next_cmd(u->state == UCMD_STATE_EXECING,set in dev_user_exec)->
			scst_check_local_events
		now user do things,after user done: dev_user_process_reply()->UCMD_STATE_EXECING:dev_user_process_reply_exec()-> dev_user_alloc_sg()->sgv_pool_alloc
	->scst_set_resp_data_len()
	-> cmd->scst_cmd_done(cmd, SCST_CMD_STATE_DEFAULT, SCST_CONTEXT_DIRECT);==scst_cmd_done_local()->scst_process_redirect_cmd(SCST_CONTEXT_DIRECT,cmnd state SCST_CMD_STATE_PRE_DEV_DONE)->scst_process_active_cmd()->scst_pre_dev_done()
	->scst_dev_done()(another state machine status)->scst_block_generic_dev_done-scst_check_unblock_dev()
	(what unblock do???) 
	return to status machine switch->scst_pre_xmit_response1()->scst_pre_xmit_response2()->scst_xmit_response()->
		iscsi_xmit_response()->iscsi_tcp_send_data_rsp()->send_data_rsp()->iscsi_alloc_rsp()->iscsi_set_resid()
		in send_data_rsp->iscsi_cmnds_init_write()->cmd_add_on_write_list)
				->iscsi_tcp_send_locally()->req_cmnd_pre_release()
							->iscsi_try_local_processing()->iscsi_send()->
		iscsi_get_send_cmnd()->cmd_del_from_write_list()
		->cmnd_tx_start()
		->iscsi_do_send->write_data->vfs_writev()(iscsi_do_send got return 84 write state TX_END)
		->cmnd_tx_end()
		->rsp_cmnd_release->cmnd_put->cmnd_done
		return to iscsi_tcp_send_locally->cmnd_put->cmnd_done->conn_put()
									->scst_tgt_cmd_done->scst_process_redirect_cmd
		SCST_CONTEXT_DIRECT_ATOMIC:scst_process_active_cmd()->(SCST_CMD_STATE_FINISHED:set in scst_tgt_cmd_done) scst_finish_cmd-> __scst_cmd_put->scst_free_cmd->dev_user_on_free_cmd(add to loop thread and the UCMD_STATE_ON_FREEING action will be do by user call into kernel again which will do free(but this should be done by another thread,
		but the log show they both the same thread,maybe some wrong log happened)
		
		after the free call returned(real work done by another thread)->scst_release_space
		->scst_destroy_cmd()
		return to comnd_done()->cmnd->conn->transport->iscsit_free_cmd(cmnd):cmnd_free
		return to scst_xmit_response()=<scst_process_active_cmd=<scst_process_redirect_cmd=<
			scst_cmd_done_local(which is called by main_loop's kernel space in reply func:cmd->scst_cmd_done(cmd, SCST_CMD_STATE_DEFAULT, SCST_CONTEXT_DIRECT);) now exec finished !!!


NOTE: in iscsi_try_local_processing while doing respond,we have a quick local write in write_data using vfs_writev,
				if can not transfer all by this  ,will then use the istwr
				and if too many commands, will not try local process, just use 
				write thread to do write(local means main_loop thread to write instead of write thread
					to decrease delay time)(only is local commands less than 2)

NOTE: every command will allocate a struct , so can trace this ,another comnd will alloc
	another struct

	set TRACE ALL !!!

