worker process 
    这个是指定的用户权限的，master这个是root启动的，只用于管理启动停止，以及
        启动恢复worker等
    建议每个绑定一个cpu core 利用affinity
        每个可以处理多个请求，比apache高校

配置块
xxx {  }  有时候xxx后面有参数，这个由解析的模块决定
    events, http, server,
    可以嵌套继承,冲突由模块决定
配置项：
    name  value value value... ;
        如果value里有语法符号要用' ' "" 包住$xxxx
# comment
单位：
    K,k,M,m   时间m s y ms h d (day) w(week) M (month) y(year)
变量：
    $xxx 有些模块支持

模块的启动依赖于这些配置项，没有的话不会启动，如http

基本配置：
    启动时默认一定要启动的核心模块的配置项
    调试，运行，优化，事件

调试：
    item            default
    daemon on|off; default on
    master_process on|off  default on  off表示用master处理所有东西，debug用
    error_log  path(logs/error.log)  error;  默认error级别
            debug, info notice warn error crit alert emerg, 要放在大磁盘上
            debug need configure --with-debug
    debug_points stop|abort 调试用，内置调试点，两种选项代表进入调试还是coredump
    debug_connection ip|CIDR
        对指定ip范围的客户端才debug输出放在events里面 need --with-debug
    worker_rlimit_core  size;  
        限制coredump大小
    worker_directory path;
        coredump 's path, makesure have write permission in that dir

running:
    env xx or xx = xxx;  
        设置linux环境变量
    include xxx 
        包含文件可以通配，相对路径也可以
    pid xx/xx;
        pid file
    user username [groupname]  
        can also configure --user= --group=
    worker_rlimit_nofile limit;
        max open fds per worker process
    worker_rlimit_sigpending limit;
        limit number of queued signals

optimize:
    worker_process  num;
        应该和cpu数量一样，如果读盘过多，也可以稍稍增加，因为有阻塞
    worker_cpu_affinity 1000 0100 0010 0001; 
        如果有4核的话，可以绑定
    ssl_engine device
        ssl硬件加速 openssl engine -t to check
    timer_resolution t;
        调用gettimeofday更新时钟的频率 eg. 100ms
    worker_priority nice_value; [-20, 19] >= -5 recommend
        优先级

event:
    accept_mutex on; 
        负载均衡锁，有优先级设置的，保证均衡
    accept_mutex_delay xxms;
        获取失败后的重试延迟
    lock_file xxx;
        只有不支持原子锁的cpu采用，一般都支持
    multi_accept off;
        开的话尽可能一次调度多个客户端
    use epoll/selecct poll/kqueue
        默认自动
    worker_connections num;
        each worker can simul process at most num requests;


http module:  ngx_http_core_module:
    all must in http {}
    内部可以嵌套 server{} location{} upstream{} if {}

    server {} : 代表一个host域名的处理
        listen  ip:port default_server|default  backlog=num(511default) rcvbuf sndbuf accept_filter(only freebsd)
                deferred 
            default_server: 所有host无法匹配，就进入这个server，否则地一个
            deferred: only truly have recved data ,will wake up worker process,否则不调度给worker
            ssl: establish ssl
            bind: 用于绑定同时监听多个地址的情况,让单独的listen不至于被这个同陪代替
        server_name 可以多个
            会根据http头部选择，
                优先级，完全匹配， 前通配，后通配，正则（~xxxx
            都不匹配选择listen的default， 或者地一个同端口的块
            server_name "" 代表没有这项

            server_names_hash_bucket_size 32|64|128 default
            server_names_hash_max_size  512 default
                这两个hash servername，可以放在http server location里，越大越少冲突
            server_name_in_direct on:
                http server location
                重定向的时候使用原来servername的第一个主机名 off表示请求本身的

            location: 在server里面,代表一个匹配路径的处理
               param: url:
                    匹配：
                        location = / {} 完全匹配
                                ~ case sensitive 可以用正则
                                ~* case insensitive
                                ^~ 匹配前半部分即可
                                @ 只重定向
                                /  用在最后，表示默认的匹配项

            root: in  http server location if
                root html; default  具体的页面的根目录，会和匹配进来的路径组合
            alias: in location
                这个和root不一样，他会把匹配的部分全部用alias的value替换掉
                    ,而root只是加上前缀
                    可以使用正则匹配
            index : in http server location
                如果访问dir路径，默认的index页面

            重定向： error_page in http server location
                error_page 404  404.html;
                error_page 502 503  http://xxx.xx/xxx.html;
                error_page 404  =404  xx.xx; 可以修改转向的error code
                error_page 404  = xx.html; 可以不填，按照默认的error返回
                error_page 404 @fallbakc {}
                location @fallbakc {
                    proxy_pass http://xxx
                } 转交到另一个location

            recursive_error_page on|off 
                    default off

            try_files: in server, location
                try_files xxx yyy zz (@xxx)|(=404); 这个可以raise error 如果找不到
                location @xxx {}  这个用于匹配后的尝试，最后一个要是uri，这样就可以重定向

mem and store:
    client_body_in_file_only on|clean|off
        in http server location
        on， clean表示http body只存储在磁盘上，clean会删除文件，on不会
    client_body_in_single_buffer on|off
        store in mem
    client_header_buffer_size size 
    large_client_header_buffers num size (default 48k)
        这两个上面一个表示存储头部的buffer大小，过大则使用下面的，
        每个请求行不能超过单个行，总长不能超过num×size大小 
    client_body_buffer_size 8k/16k
        content-length 会被识别并适当减少buffer的分配
    client_body_temp path  path  1 2 3
        包体tmp路径，1 2 3 可选三个参数，表示三级目录，防止过多的单个目录文件

    connection_pool_size size; 256
        http, server 初始内存分配大小 为每个tcp分配的
    request_pool_size 4k
        http， server
            每个http请求使用的pool，这个和tcp不同，可能多个复用一个tcp

    client_header_timeout 60;
        http, server, location
        read timeout after connect
    send_timeout 60
    client_body_timeout 60;
    reset_timeout_connection off|on off default
        超时后发送reset而不是握手关闭，避免处于fin wait等状态

    lingering_close:
        always  关闭前坚持处理完链接上的数据
        on  尽量处理需要的
        off 
    lingering_time  坚持的时间
    lingering_timeout:
        close 之后timeout之内没有数据，那么直接关闭

    keepalive_disable safari  
        默认对这个浏览器关闭

    keepalive_timeout 75
        闲置超过后关闭
    keepalive_requets n; 
        max requests can be on one keep alive connect
    tcp_nodelay 
        use on keepalive

mime:
    types { xxxx   xxx;}  http, server, location
    default_type text/plain;
    types_hash_bucket_size size;
    types_hash_max_size size

limit_except get {  不允许的请求
    allow ip/cidr;
    deny all;
    }
    in location

client_max_body_size size;
    与content length比对，过大就直接拒绝

limit_rate speed; default 0
    限速客户端
limit_rate_after  xxx 
    超过多少时间才限速

file:
    sendfile  off|on in httpserverlocation, 
        直接sendfile系统调用到网卡更快
    aio off|on
        conflict with sendfile
    directio size|off
        conflict with sendfile
    directoio_aligment 512B;
        xfs need 4K
    open_file_cache max=N inactive=20s off
        缓存部分打开的文件信息
    open_file_cache_errors on|off
        cache error or not
    open_file_cache_min_uses 1;
        不被淘汰的最少使用次数
    open_file_cache_valid time
        检测时间

client special:
    ignore_invalid_headers on|off
underscores_in_headers on|off
    下划线是否允许在里面
if-modified_since off |exact|before
log_not_found on|off 是否记录未找到文件log
merge_slashes on|off
    多个//合并成一个 
resolver address address 
    解析服务器的地址
resolver_timeout
server_tokens on|off
    返回的错误是否注明nginx版本
        http server location


反向代理
    负载均衡多个上有服务器，
    先接受完整到nginx上，再选择上游发送，返回的时候边接受边给client

upstream backend {
    server url; 指定一个上游服务器url
    server url params;
    ip hash; 设置了这个后，不能擅自删除已有的配置，要设置down在param里面
} in http
    定义一个上游服务器集群

    proxy_pass: in location
        proxy_pass http://backend;   (upstream backend {})
                    或直接的ip
    proxy_set_header Host $host; 
        转发同时转发头部
    proxy_method (http server location)
    proxy_hide_header Cache-Control;
        不转发这个字段
    proxy_pass_header
         允许转发
