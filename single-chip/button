中断独立按键：
74hc08 与门：

按键工作：板子上用导通帽把按键和io口导通，然后如果按下按键，
	对应的io口就会是低电平，而按键的总体与的输出送到了中断0口

	在不按键的时候，检测的io口永远是高电平，按键，对应的口变成低电平，
	可以利用这点来显示相应的灯

	中断脉冲触发，下降沿有效
	电平触发  低电平有效   
	分配中断的时候，使用 using xx 可以指定中断使用的寄存器组
	0到3， 这样可以节省中断的压栈时间，但是不同优先级中断注意使用
	不同的组（如果想自己分配的话），不然会出现寄存器值错误）

矩阵按键：
	每一横排，或一竖排都是一个独立按键组，都可以一端接地，另一端
		用来根据低电平判断产生按键效果

	扫描整个矩阵的方法：
	1 逐行扫描，分别置每一行的开头电平为低，然后测试后面的输出口，如果有低，
		那就知道是这一行的第几个是按下了
		这里的扫描可以是逐行硬编码扫描，也可以是利用位的异或特性直接
			找到为0的那一位

	2 线性反转法：
		高低四位分别赋值0，这样可以分别确定按下按键的行和列坐标，就全部确定了

按键抖动：
	按下按键或弹起的时候会有抖动，不稳，（过程中会忽高忽低），中间再是一段平稳的低电平:
		所以如果循环扫描，会有显示错误的时候

	硬件防抖，电容可以滤掉高电频（也就是抖动）
	软件防抖：在第一次检测出现状况开始，延时10ms左右，用来等待抖动结束，然后继续重复检测
		刚才的情况，才确认按键按下了

	标志位防抖：这个用于如果一个按键有不可恢复的作用，比如加一，如果一直按着，会一直加一，
			这时就要用一个标志位在按下的时候置1，这样下次就不会进来了，除非弹开之后，这时要
			置0
			在低电平的时候循环直到高电平为止，这样去掉重复的触发事件）
	note：防抖只要很小的10ms，剩下的如果还多次触发，就是因为按下太长了，要在低电平
		无限循环等待高电平再返回，或者用标记位！
	同样可以用定时器：
		普通的检测出现情况后，开启定时器，同时设置忙标记，在定时器中断中完成剩下的工作，
		主循环检测到没有忙标记后才会进行今后的扫描循环
