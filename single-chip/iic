iic 不需要固定的时钟频率，时序高低自己定
uart传输每个字节内部bit需要固定的时钟频率

常见存储：
	铁电，eeprom flash 掉电不丢失
	铁电：和ram一样可随意擦写，可以不丢失，但是容量小，贵
	eeprom：擦鞋数量优先，操作简单，容量中等，可以按字节读写
	flash，操作复杂，只能按块读写，容量大(模拟eeprom，要注意）

	iic总线 串行外连总线，同步通讯总线，有时钟线和数据线
		总线只是一种概念，要注意，

		特点：简单有效，只要两根线；
			支持多主机，一次只能有一个主要的端
			每个电路模块都有一个编号当作地址
	AT24C02: (具体看数据手册）
		eeprom ，地址三位，所以最多8个eeprom在iic上
		wp:接地，既可读又可写

	iic：
		起始信号： scl 高期间， sda拉低 表示开始， 拉高表示结束
				空闲时 scl sda高电平

		起始步骤：	一般线sda高，延时稳定后，scl高，稳定后，sda拉低表示开始，
				稳定后 scl再拉低，这样才可以传数据，因为scl高期间
				sda的高低变化会被误认为是起始结束
		结束步骤：
			scl低， 然后sda低（这样才能执行拉高动作），然后scl高，
				然后sda高

	时序模拟：
		可以用io口模拟uart，只要定时固定时间发一位就行了，根据起始，停止，
				先低后高来发

	iic:
		传送先高后低
		主机写时，每个字节要收到从机的一个应答位 0
		主机读，每个字节要发一个应答位0给从机，最后一个字节
			要发一个非应答位也就是1，然后是停止位1   

		写流程：
			首先一个字节起始，然后器件地址（三位），然后写操作标志 低写高读（0xa0）
			第二个字节， 存储内部数据地址（字节为单位）
			之后是数据字节，每一个数据字节都要有应答

			写每一位的过程：
				每一位的发送都需要时钟拉低，发送，拉高，保持，对方会在
				这时开始读取数据

		整个总线是线与的关系，只要某一个口低电平，所有连这条线的其他设备的总线都是
			低电平,所以要读某个口的时候，要把原来置低的口置高
			整个步骤是：
				全部数据发送完毕后：
					scl置低，sda置高（这样线与就没影响了），scl置高（用来说明信号稳定），
					读取sda（这就是从设备的sda信号了），然后在scl置低(防止数据使其变成终结）
					应该是一次拉低拉高sck代表一位数据的输入完成（在从设备看来）

				总是在scl为高的时候代表数据稳定，可以读，低的时候代表可以更改数据

			在开始之后，每使用完一组（比如读完应答完后），要把时钟置低，防止数据的改变
				造成开始结束等意想不到的信号

		每次的延时，都是为了让从设备有做动作的时间！！
