every java obj has 16byte const, every inner class have another 8 byte
    every obj reference has 8 byte

stack 
    可以用list 可以用array， 不过array注意第一有限，
        第二如果删除的元素，置引用null，这样java可以回收
    变长array，这个可以在到达2的幂次长度的时候翻倍，到达1/4的时候减半，
        用摊还分析，平均还是O（N）次的动作

queue:
    先进先出，要两个指针保存
    变长数组，head tail保存头尾， 这样，如果头尾指向一样，表示满或者空，用
        一个计数来判断，满了之后，复制到另一个数组，空到1/4也复制到另一个数组

泛型：
    这个如果要数组，需要 (T[]) new Object[sizer];才行，不能直接new T[]
    -Xlint=unchecked 来避免警告

Iterable interface : java.util.Iterator;
    define a iterator which return Iterator interface,
    we define a class implement that Iterator which has next() hasNext() method,

    the Iterable can be used by for each

deque:
    这个可以用双向链表实现
randomqueue：
    随机返回
    这个可以用数组实现，到达阈值点就翻倍，1/4点就缩小一半，
    而随机返回这个，首先随机挑选一个返回，然后把最后一个数放到这个位置，数组减一
permutation:
    要求均匀几率返回流读取的未知总数的k个数，
    可以接受，然后利用上面的randomqueue返回k个，
    似乎可以只设置接受k个，仍然可以保证是所有数最后打印的几率是一样大的，
        目前不会，似乎和组合数学有关
