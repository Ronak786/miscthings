import:
	from xx import xx/*
	import will search local dir, useful
document string:
	just below every function's head, use """ xxxxx """ , this will be shown 
		when in python and type help(xx)(no .py postfix), or pydoc2 xxx

short function call:
	from xxx import *: then you can directly use them

x in y:
	in loop (every loop assign a value from y)
	in judge(judge if x is part of y)
string can be used in for i in string

len:
	return length of a string in bytes
sorted:
	return a sorted list of param

list:(can be assigned by a function returning list,eg. range(xxx)
	pop[0] [-1]  these used to get listmember out ,-1 means the last one
	list = [], list.append(xx) can be used

	list can be used in :  for i in list:

	two-dimentional list:
		[[xx,xx,xx],[xx,x,x]]
	list.insert(index, object) insert before index, 
		index: -1 ==> last one;  very large index ==> after the last,

range:
	range(end)  [0...end-1]
	range(start, end) [start..end-1]
	range(start, end, hop) useful
sys
	argv ,unpack:  use a,b,c = argv to unpack, then every param will be assign to just one var,
				BUT if you have more than one var, then number of args should match var numbers
				else  if you have only one, then no unpack is make, just assgin
	exit("xxx"):
		exit from process ,if arg not integer, will output that string

file:
	open: open is better than file to open a file
		mode: default r, 
				w truncate
				w+ truncate and can rw
				r+ can rw
				a  for append,(in apue,if append write, then seek pos will be moved to that pos)
				b  will not auto convert \n to system dependent \r\n if on win ...
						if not use, you write a string with \n, then if win, that will be converted to \r\n
																	if mac, will converted to \r
	xx.read() to read
	xx.close() to close
	readline() this will readin the '\n' !!
		so when use print , add ',' to avoid auto \n and only use readline()'s '\n'
	xx.seek()  if open in text mode, the pos returned by tell after seek is the only valid pos

	Combination:  str = open(filename).read() # this do NOT need close, because you have not fd
		
os.path:
	exists()  tell if a path exist

pprint:
	print in a pretty format, or return a string in a pretty format
