import:
	from xx import xx/*
	import will search local dir, useful
document string:
	just below every function's head, use """ xxxxx """ , this will be shown 
		when in python and type help(xx)(no .py postfix), or pydoc2 xxx

short function call:
	from xxx import *: then you can directly use them

x in y:
	in loop (every loop assign a value from y)
	in judge(judge if x is part of y)

string can be used in for i in string
	use r'' before string can make string not be converted by like \n xxx
	stirng.join(x) use string as a delimitor to joint x(iterable)

	capitalize()  return string only first char CAP
	string.replace(old, new, number) default replace all

len:
	return length of a string in bytes
sorted:
	return a sorted list of param
sum(): sum of a list
dir(xx)  list module's symbol


zip :
	reuturn a list of tuples(first item from fist list, second item from second list)
iterator:
	任何要求iterator的地方都可以通过生成list来赋值（利用expr(x) for x in xxxx  来得到list）

list:(can be assigned by a function returning list,eg. range(xxx)
	USE list when you want to store some thing in order and random access them

	pop[0] [-1]  these used to get listmember out ,-1 means the last one
	list = [], list.append(xx) can be used

	list can be used in :  for i in list:

	two-dimentional list:
		[[xx,xx,xx],[xx,x,x]]
	list.insert(index, object) insert before index, 
		index: -1 ==> last one;  very large index ==> after the last,
	list.count(xxx) the occurence number of xxx in list
	list can use + , *(multi time occurence)
	list.reverse() return a reverse list (also can use  [::-1]
	list.sort(reverse=False)
	list.remove(xxx) remove that item in list
	list.pop(xx)
	list.insert(index. obj) before index
	list.index(idxvalue)
	list.append(xx)  append as A item in list
	list.extend(xx)  xx is iterable, then append every iter item into list

	判断是否可以迭代  hasattr(list,'__iter__') 字符串会化成list迭代

dict:
	dict initialize:
		dict() empty
		dict([(xx,xx),(yy,yy)]  initialize with pari
		dict(a=1,b=2,c=3) initialize with assignment
	setdefault(xxx,xxx) set default value of xxx
	del dict[xx]
	dict.get(xx,default)   if can not get, will return default (will not occur KeyError, so better)
	dict.items() will return aa,bb  pair of dict
	dict's order(using sorted, will only process key or (key,value)pair if dirc.items())
	dict.keys() return keys in a list

collection:
	Counter: used to return you a dict of every one's frequent
	OrderedDict:  this is an order dict, will remember order you insert
				and only if two dict same order, can they be the same order

range:
	range(end)  [0...end-1]
	range(start, end) [start..end-1]
	range(start, end, hop) useful
sys
	argv ,unpack:  use a,b,c = argv to unpack, then every param will be assign to just one var,
				BUT if you have more than one var, then number of args should match var numbers
				else  if you have only one, then no unpack is make, just assgin
	exit("xxx"):
		exit from process ,if arg not integer, will output that string

file:
	open: open is better than file to open a file
		mode: default r, 
				w truncate
				w+ truncate and can rw
				r+ can rw
				a  for append,(in apue,if append write, then seek pos will be moved to that pos)
				b  will not auto convert \n to system dependent \r\n if on win ...
						if not use, you write a string with \n, then if win, that will be converted to \r\n
																	if mac, will converted to \r
	xx.read() to read
	xx.close() to close
	readline() this will readin the '\n' !!
		so when use print , add ',' to avoid auto \n and only use readline()'s '\n'
	readlines() return a list of line
	xx.seek()  if open in text mode, the pos returned by tell after seek is the only valid pos

	Combination:  str = open(filename).read() # this do NOT need close, because you have not fd

fileinput:
	this can handle multiple files,input file list 
		
os.path:
	exists()  tell if a path exist
	splitext  split filename into two part, prefix and postfix(.xxx)
	isfile() test if is a file
	access() just like C's access
	walk()  used in iterator: three retval:
		current search dir name string(no trailing '/')
		subdir string list
		subfile string list
os
	mkdir make a dir
	os.name return the name of os
	os.system() just like system call
	os.getcwd() get pwd

time:
	some time lib
stat:
	some file system stat lib
	use os.stat('') to get a list ,then use stat.xxx to judgement

random:
	randint : set and get random number
	random.shuffle(list) will shuffle liat
	
subprocess:
	like popen xxx    ==> not really understand


pprint:
	print in a pretty format, or return a string in a pretty format

argparse:
	howto use: parse = argparse.ArgumentParser(description=xxxx)
				parse.add_argument(var_identifier_name_string, metavar(showed name on cmdline), type, nargs(howmany),
									description)
				arg = parse.parse_args()
				now you can use parse.var_identifier_name_string (no '') to get var,
					or you can use  vars(parse.parse_args()) to get a dict,then use dict['var_identifier_name_string']
					to get

urllib:
	urlopen( open a url,
	readlines() read all lines from url into a list, 
		remember to use strip to drop tailing '\n'
