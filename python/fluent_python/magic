see
    https://docs.python.org/3/reference/datamodel.html


obj[key] ==>  obj.__getitem__(key)
random.choice(sequence)
    抽出序列里的随机一个
reversed, sorted(xx,key=xxx(function))
    这些都是外部函数，就是不会改变自身 而是返回一个改编后的副本

__abs__ ==> abs()
__add__ ==> +
__mul__ ==> -
    不改变源对象，创建新的
str.format(),  "xxxxx {name!r} == %r  {name!s} == %s"
    !r  repr
    !s  str
    !a ascii()
    {0:len_of_filed}
    {0:.precision}
    {0[field]:xxxx}
    .format(**table) 可以展开

__repr__ 用于控制台的显示
    usually  eval(repr(s)) == s
__str__ 用于 str（）， print， 
    用于打印的字符串
    
    永远先实现repr，没有str的话会默认用repr

__bool__
    用于bool判断，在if等里面会被自动调用
    一般0假其他真

__getitem__ __setitem__
__item__ __reversed__, __next__
with  : __enter__ __exit__

ord() return character's integer

nametuple(name, 'filed filed filed')
nametuple._make(tuple) 可以把元素制作成对应的nametuple
    ——filed显示域的名字
    _asdict把anmetupel变成有序字典

slice:
    a = slice(0,6) 
        可以这样定义明明切片，后续可以使用
    ... 
        这个是省略，可以省略中间的一些重复的切片描述
        [1,...] == [1,:,:,:]

+ *
    [ [-] ] * 3这样会把里面的整个list变成3个，也就是说最里面的引用变成3个，
        这是不对的，所以有二层list的时候不能直接使用*

__iadd__
    += , list have implemented this

bisect
    这个模块有两个函数bisect bisectleft ，都返回
        可以插入的index，前者是匹配相同值之后，后者是之前的位置
    bisect.isort() 这个
        可以插入新元素到已有的list里，保持顺序，比bisect+insert有效率


数据结构选择：
    频繁两端操作，应该用deque
    数组操作，应该用array

    array.array('d', (xxxxx))  generator or list 
        基本和list支持的一样，不过没有内部的sort 方法
        可以用bisect的insort插入，或者sorted重新建立
        obj.fromfile(f, num)
        obj.tofile(f)  可以存储获取，也可以用pickle

memoryview
    这个用于把一个数组或者其他结构打包成一个内存空间，
    然后可以cast成不同的数据类型，还可以再tolist，之后修改后
    这些修改可以立刻返回到源数组上

numpy:
    超高速矩阵计算
scipy
    基于numpy的超高速线性代数数值计算等
numpy.loadtxt('file')
numpy.save('filename', ndarrayobj)
    元素可以整体操作，比如整体乘以一个数，还可以随意改变维度，
        arr[1,2] 这样多为索引

heapq 实现heap的方法
