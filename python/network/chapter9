http:
    开头一行 GET /xxx   HTTP/1.1
            key:val(key不分大小写）
            key:val

            body(optional)

        关于长度 content-length 可以指定，但是
        有时候动态页面无法指定，可以利用connection：closed发送玩直接关闭，不过有
        网络故障风险，还可以制定transfer-encoding:chuncked 
            这样数据会以小块形式发送，最后一块指定长度0
            
    方法：
        get ,post 主要使用， get不会改变内容， post会，不可执行多次
        urllib没有get post区分，如果提供data参数，就是post，否则get这个没有requests好
        Host: 一般要加，否则可能返回400
        200 ok
        301 重定向永久
        303 暂时重定向，post使用，这样返回的页面就是一个暂时的get了
        304 not modifyed 不需要改变页面
        307 暂时重定向用于服务器down
        400 not a valid request
        403 no permission 
        404 no specifed data 
        405 method not allowed
        500  server something error
        501 not implemented you http request
        502 you are connecting to a gateway,but it can not reach the true server

    httplib 不会帮你重定向
    urlopen 会
    requests 会，而且history 属性里有记录 还可以关闭动作 requests.get(xxxx, allow_redirects=False)
    通过requests的对象的url可以找到官方名字，减少一个重定向

    requests 检查status code获得返回值raise for status对出错获取raise异常
    urllib 对于错误会直接异常，需要捕获urllib.error.HTTPError


    选项：
        cache-control : no-store  do not store
        expires: thu, 01 dec 1994 12:00:00 gmt 这样过期时间设置
        cache-control: max-age=3600 这个更好利用时钟而不是会被修改的时间

        可选传送：
            last-modifyed: xxx  服务端传这个
            客户端请求的时候制定这个时间，if-modified-since xxx 服务端如果自那以后未修改，返回304,
                这样客户端就知道直接使用本地页面了
            或者 server etag :xxx
                 client if-none-match: xxx
                这个也可以匹配数据，是否更新，这些都需要一个http来回，虽然不需要传数据

    client:
        accept-encoding: client可以接受的传输的编码，可以gzip，
        返回transfer-encoding: gzip requests会检测然后解压，urllib不会，要你自己动手

        Accept : client的类型要求，第一个优先级最高，默认q=1,后面要自己加，分号隔开
            requests:
                s = requests.Session()
                s.headers.update({'zzz':'xxx'}) 可以更新 

        content-type: 返回的类型，有时候会是 类型; 编码；需要你自己来解码

        auth:
            requests auth=(xxx,xxx) 这个是http的auth头部，可以用于验证的，当然必须服务端识别这个
                头部才行 这个一般用于api调用方式的认证

        cookie:
            set-cookie: xxxxx; xxx
            使用：
                get xxx
                cookie: xxxx

        connection: close 如果不指定，就是长链接
            urllib没有这个支持，总是短， httplib直接用可以，requests的sesison也可以

    server:
        import wsgiref.simple.make_server 然后写一个app函数按照参数规则用来处理对应到来的链接
            可以在里面向stdout打印需要发送的内容（需要编码好）

        代理：
            正常的代理需要浏览器设置，然后你就是通过这个访问对象
        反向代理：
            就是服务器那边出个机器做代理，负责分发收到的请求到内部某台机器上，
            客户端只要往服务ip发请求就行了

        apache + wsgi 这个利用wsgi模块持久链接到python进程来处理动态的内容,必须是同机器上的服务
        pure python server or nginx as reverse proxy to python server:
            这样有灵活性，不再同一台机器上也可以，替换单个服务也可以
        缺陷：
            即使内容纯动态，最好有个ｎｇｉｎｘ，ａｐａｃｈｅ当作反向代理，可以处理链接上的一些阻塞
            和恶意攻击情况

        paas:
            platform as a service:
                提供需要的负载均衡，数据管理等功能，然后你提供应用程序，配置，这样部署服务更加方便

        restful:
            资源表现层状态转换：
                资源＝＝ｕｒｉ
                表现层　＝＝　接受到的实际的资源（某几种格式之一）
                状态转换　＝＝　利用内容来进行资源的更新

        what is a web server:
            可以自己处理监听，接受socket，解析http协议，还会自主400 500 状态返回
