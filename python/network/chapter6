tls:
    这个不是万能的，不能做到：
        监听者可以猜测大致的页面的大小，并且，由于dns是非加密的，
        可以实现直到你要访问的网站，可以根据https的固有头部猜测当前的
        包交流的一些特征

    要交流首先client要求service给一个证书，包含公钥，这个本身需要验证，
        ssl工具要内置一套认证权威，用来验证所有的证书的合法性(就是
        拥有这个证书的service就是我联系的那个service即可）浏览器以及
        ssl都内置，你也可以自己加,相当于每个组织的根证书的集合 

        验证证书：验证上面的ca的签名属于你的内置ca中的一个
            成功后，验证证书上的起止时间，这个如果你的时钟错误，会出问题
            然后验证host名字，这个还可以多个匹配 通配
            然后交换通知签名方法以及加密方法，就可以交流
        
        openssl genras -out www.key 4096 生成rsa的私钥，module 4096位
        openssl  req -new -key www.key -config www.cnf -out www.csr
            生成一个证书签名请求给任意一个ca机构

            使用openssl命令行工具可以创建csr请求，crt证书(通过cnf配置文件
                以及key私钥），认证机构就是一个crt证书以及它的密钥，
                其他人承认它可信并用它的公钥来验证其他证书，
            证书链，你提供你的证书以及一系列直到root为止，好处是
            不同一直去麻烦root，因为你可以自己改

    使用：
        创建一个ssl环境，create default context, wrap_socket就可以用了，
        指定的时候可以指定使用cafile，这样就不会载入默认的ca
        执行的时候，客户端要指定ca机构，服务端不用因为服务端提供证书

        手动环境，ssl.SSLContext(xxx) 这样可以自己选择加密方法以及各种选项，
            不符合的客户端不会连接 
        pfs:
             前向安全保障，就是以前的密码破解不会产生影响，需要定期更换密钥，
            这个是有保证的 默认的环境，用自己的环境需要时常注意是否过期

支持：
    http.client可以传入ssl环境，urllib。request  requests不可以
    smtplib poplib imaplib 都可以
    nntp ftp也可以

加密算法的等级允许在server这边，所有server要限制不能用弱算法，默认context就可以限制
