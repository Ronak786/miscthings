" ' has no difference
python string  , str(xxx),  repr(xxx) `xxx` 后两种是相同的，
	三者基本一样,repr `` 这两个面向python本身，而不是人类

raw_input better than input() ,后者必须是python的语法，字符串要引号

长字符串： “”“ ”“”  ‘’‘ ’‘’ 可以包括‘ “ 在里面
原始字符串： r"xxxx"  不会解释任何特殊字符
			最后一个字符不能是反斜线，不然语法错误~！~~~
			可以在后面单独用’\\'来表示一个最后的反斜杠，两个字符串会自动骨连接起来
unidode字符串，u'xxxx' 默认python2 是ascii， 可以coding: utf-8 来默认utf
			然后这里可以用16机制表示键盘没有的unicode编码


字符串 Note:字符串不可修改！！ （搜索help('str.xxx')  help('string.xxx')这个是string模块，和str字符串不一样
	可以索引，标号-1表示最后一个
	可以用分片，这样可以操作一个范围内的数
		分片包头不包尾 可以用[:] 放空元素表示开头或结尾
	第三个参数是步长，可以负数,如果不指定头或者尾 ，会根据步长正负判断是头还是尾开始算

	格式化:
		'string'%(tuple or dict)
			%s会打印字符串，如果不是字符串，会自动用str（）转化一个
			这两部分都可以作为变量被引用，然后组合在一起,aa = "%d %s", bb=(1,"20"), aa % bb 就是你要的结果
			如果不是用tuple 或dict，那么整个替换量只会被当作一个值
		字典形式的格式化：
			'xxxx %(one)s is %(two)s'%{'one':'1', 'two':'2'} 
			使用（）包住要替换的地方，使用字典来匹配对应，这样就可以定点替换，甚至重复替换
			注意仍然需要%s %d 这些标志符，one two都是用来选择的j
		标记介绍：
			'-'左对齐 '+' 加上正负号，” “正数之前保留空格， 0位数不够用0填充(这两个对负数会把-放在最前面)
			*指定宽度，可以数字，*表示从tuple读
			.* 表示实数小数位数，字符串最大宽度，或者从tuple读
			%d,i  带符号数  u o x 无符号数  e f g 浮点  r(不会解释特殊） s 字符串 c单字符或整数,打印char
			Note: 可以用扩号把一部分格式化字符串包起来，这样显得更隔离？？
	method: string="123456"
		find: 返回最左边索引 (相关rfind 反向搜索，index， rindex(ValueError instead of -1)  
								startswith, endswith  返回布尔是否有前缀或后缀 可以选择范围
			param, (substring, start, end) 包头不包尾 可以选择范围
			string.find('1')== 0 
			string.find('a') == -1
		join:(参数列表必须是字符串）
			sep.join(list)  返回用sep链接的字符串
		split() (相关splitlines() 且分行，rsplit() 从行尾开始，和split区别在指定分割数目的时候
			默认空白字符，不然提供分割 
			reverse of join， 任何分隔符都会分出一个list元素，包括开头的，连续的
		lower:(相关 upper islower(只要不包含大写） capitalize()首字母大写 swapcase(大小写互换）
				title istitle(这个会转成每个单词首字母大写的形式，不过不太自然
				string.capwords()(可以制定分割符 这个和title一样，不过更自然一点,
					实际就是split + capitalize + join
			转换成小写
		replace(xx,yy) 替换所有，返回copy ,可以用第三个参数控制）
		expandtabs()  扩展tab为空格，8个
		strip() 默认取出两边的空白字符， 可以定制去除的字符，
			lstrip() rstrip()  各自去除左边右边
		translate(table, [delete chars]) 
			第二个参数代表copy中要删除的字符， 
			第一个可以是None，表示没有替换，或者是一张表（256个ascii字符的string，用string.maketrans('xx','yy')
				来制作，这样我们就可以只关注我们要转换的部分了
				这个和replace不同的是这里是单字符替换的
				这个可以弥补普通lower等字符串操作只能操作ascii的特定，这里可以自定义unicode转换
			或者可以使用 u'xxxx'.upper() unicode 可以识别正确转换的
		
列表
	Note: 索引不能超过index out of bound，但是分片的时候，最后元素可以超出指定，这样会显示到最后一个数字
	列表相加是更大的一个列表！！ Note: 加法不能断行
		序列可以相加,字符串可以相加，但是序列不能加字符串

	列表或字符串乘以数字可以扩展字符串或者链表n倍
	利用加法乘法来批量生成某个字符或列表！！

	modify: a[2] = xxx
	del:  del a[2] or just del a to  delete all
	利用分片：实质都是替换(分片可以超出index，默认到最后）
		利用分片替换元素,长度可变  str="hello", strlist=list(str), strlist[2:]=list('hi'), 
			res=''.join(strlist), res == "hehi"
		利用分片插入  strlist[2:2] = [1,2,3] 会在strlist[2]的位置插入[1,2,3]
		利用分片删除  strlist[2:5] = []  替换为空
		间隔替换：  strlist[::2] = [x,x,x,x]  但是数量要匹配上
	列表的方法:
		list.append()
		list.count(xx)  统计xx在list中作为元素出现的次数
		list.extend(another_iterable)  扩展一个list，+ 会返回新list ，这个扩展
			== list[len(list):] = another_iterable
		list.index(xx)  xx出现的第一个位置索引
		list.insert(num, 'str')  在index 为num的地方插入，而当前位置数后移，-1代表最后一个，这样
				原来最后一个数后移，如果写大整数，会默认append操作
		list.pop() 删除index处元素并返回, 不能超出
		实现栈 push:  insert(0,...), pop: pop()
		实现队列  enqueue, insert(0,...) dequeue: pop(0)

		list.remove(xxx) 删除某个元素第一次的出现，无返回值
		list.reverse()  本地修改反向一个list
		list.sort() 本地排序，无返回值
			param:
				cmp function: 默认系统cmp（），可以自定义
					只要定制何时-1,0,1即可
				key: 处理每个元素，返回key，然后根据会根据key排序
				reverse： True False  是否反向
			Note: 排序反向： x.sort(), x.reverse()
				不修改本地： sorted(x).reverse()

元组：
	不可修改，可以（）表示空，一个元素要（1,），逗号必要！！
	扩展（复制一个新的）：
		2*tuple  两倍长

字典：
	特性：key 唯一
	d.clear() 清除字典
	d.copy() 返回一份复制的字典
	dict.fromkeys([xx,xx,xx], 'yyy(默认值)')
		{}.fromkeys([xx,xx,xx], 'yyy(默认值)') 这两个从默认的空字典开始拿预设的key建立字典，默认值是None，也可以设定
				yyy
	d.get(xxx, 默认值)  不存在返回None而不是出错
	d.has_key(xx) 是否存在
	d.items()  d.iteritems() 这个会把字典当作列表返回，每一项都是元组,后者迭代器
	d.keys()  d.iterkeys() 返回键值
	d.values()  d.itervalues() 返回值，后者迭代器
	d.pop(xxx)  删除给定键值并返回value
	d.popitem() 随机弹出，直到最后
	d.setdefault('xx','yy') 返回xx的值yy，默认返回None， 如果不存在的话，返回的同时
		会在dict中设置
	d.update(x) 用一个字典更新另一个字典

shallow copy, deepcopy:
	shallow copy 这个是列表，字典本身被拷贝，如果修改list dict内的引用，不会对原来的那份产生影响，
			但是如果修改了对应值里面的内容，也就是如果存在嵌套list 或dict ，那么还是会有改变的
			所以需要深拷贝
			就是说对普通非可变对象的引用是新的，但是可变对象是旧的
			只有第一层引用是拷贝的，当然数值是直接拷贝新的
	from copy import copy,deepcopy 使用
	
class:
	Template: 使用$来标出要替换的变量
		from string import Template
		s=Template("$a is a $b") , s.substitute(a="11", b="22)直接返回, 使用$$来输入美元符号
		或者使用dict 作为这里的参数输入，数目要对上
	string:
		这个类里面有很多可以用的常量： 可以在判断里使用
		string.ascii_letters  /uppercase/lowercase/digits/printable/punctuation等等
	

None 空占位
	[None] * 10 生成列表包含10个元素，为空元素

赋值：
	a,b,c = c,b,a  可以多个赋值
	val=1,2,3  这样可以封包成tuple
	python3 里可以a,b,*c = [1,2,3,4] 这样c就是一个列表
		正常情况下左右数量必须相等！！

	a=b=c
	a *=2
	str += 'foo' 这些都是可以的

语句块：
	冒号表示语句块的开始，然后下一行开始缩进

功能
	import xxx  as xxx
	from xx import xxx as xxx
		这两种都可以
	in 操作
		对string，包含的子串，
		对list，包含的元素, 元素可以是列表本身的，这时候你in的左边也要是列表
		对dict， 判断的是key 和value无关
	print:
		逗号分割会加入空格，行尾的逗号--下一行接着
	min, max:
		这两个可以接受多个数字参数，或者列表
	len(可以用来获取字典的长度）
		获取长度，对于iterable
	list
		将string变成列表，对列表, tuple保持原样, 对dict取出key
		使用 ''.join(列表）可以组装回去
	tuple
		和list一样，不过都转换成元组
	dict: 创建字典
		参数 [(1,2),(3,4)]  ==> {1:2,3:4} 也可以全部用tuple
		参数 (name=1, sex = '2') 也是可以的(key可以不加引号）,但这里不能用常量做key了,需要指定字符串
	str()
		转换为字符串，human-readable
	reversed()(用于list string）
		返回列表的迭代器，可以用于for循环, 使用list（reversed（））可以获得反向列表，不修改原列表
	sorted() (used in list, string, 永远返回列表）
		获得排序的副本
		param:
			cmp function: 默认系统cmp（），可以自定义
				只要定制何时-1,0,1即可
			key: 处理每个元素，返回key，然后根据会根据key排序
			reverse： True False  是否反向
	cmp()
		内置比较函数
