面向对象设计：
	所做的事情 
	名词： class
	动词：method
	形容词：attr
	思考继承，避免全局变量
class:
	Template: 使用$来标出要替换的变量
		from string import Template
		s=Template("$a is a $b") , s.substitute(a="11", b="22)直接返回, 使用$$来输入美元符号
		或者使用dict 作为这里的参数输入，数目要对上
	string:
		这个类里面有很多可以用的常量： 可以在判断里使用
		string.ascii_letters  /uppercase/lowercase/digits/printable/punctuation等等
	bisect:
		二分查找
	random.choice
		返回一个序列里的随机一个对象
	operator:
		操作符号模块，比普通的有效率
	inspect:
		查看类内部，通常高级特性使用


多态：python 的核心思想！！
	就是有多种形态，不用具体管那种，对象有那个方法，我们直接调用就可以了
		list, string both as count() method
		+ can be used between 1+2 or '1' + '2'
		repr(可以接受很多类型），也是多态
		在不知道类的情况下就可以调用
封装：
	这个就是保持自己的私有属性，不全局
继承：
	使用已有的方法

使用新类
	__metaclass__ = type
		使用新式的类写在最前面，或者直接集成（object)

class xxx:
	def aa(self,xxx):
		sssssss
	类的第一个参数要是self，自己
	在运行过程中，可以用：
	ins=xxx()
	ins.aa = bb 来覆盖原来的方法为外部的函数，这样也是可以的（外部函数不需要self）
		使用del删除覆盖，可以看到原来的
	
	隐藏：
		如果方法前有双下划线，那么就是内部方法，python 会在前面加上_类名,
			结果就是 _classname__method, 所以外部访问就要变革方法了

		也可以只用单下划线，这样没有隐藏效果，但是from xx import *不会导入他
	
	class全局变量
		这个本身用self可以引用,用class名也可以引用。
		用class来改变，以后不论self还是class引用都变了，
		用self来改变,如果是直接变量，只影响自己，如果是list之类可变的，也是全局影响
		也就是自己的变量默认是引用的同名全局的，但是改变后就是自己的了,
			但是间接改变由于没有直接改变，所有没哟关系
	

class 相关函数,属性
	issubclass(a,b)  a 是b的子类
	classname.__bases__  
		当前类的父类, 要使用类名，不是实例名
	isinstance(instance, classname)  是否是子类
	s.__class__  
		当前实例的类
	classname.__dict__  对象内存储的值

	hasattr(instance,'func') ==>boolean
	getattr(instance, 'func',None) ==可以设定默认值
	hasattr(instance,'__call__') == callable() 是否可以调用（就是是否为函数）
	setattr(instance,name, value)   应该等同于直接赋值

	多重继承：
		查找方法的顺序是从前到后 mro 方法解析顺序，这个会变
	继承重写：
		可以覆盖父类方法
	继承父类的隐藏方法：
		隐藏方法也可以继承使用

magic functions:
	__init__ 构造函数
		1, 调用父类的方法： class B(A): def __init__(self):  B.__init__(self)即可
			这叫做未绑定方法，因为是用类名调用的，所以可以传入self，也必须传入，不然不知道
				初始化谁
		2, super(subclass, self).__init__()   要使用这个，必须父类祖先所有都是新类
			这个是新方法，也比较好，传入子类自己，以及对象自己self，__init__里面不需要传东西
	__del__ 析构函数，但是时间不定，所有不要用
	__len__: 这个返回对象内元素的数量，若为0，则对象本身被当作假值（空list dict tuple string）
	__getitem__(self, key):
		list: key is index,  
		dict: key is key
	__setitem__(self, key, value)
		inverse of get
	__delitem__(self, key)
		删除元素
	使用isinstance(key,(int,long))来检查索引的类型，标准规定必须是long或int

	访问器方法：
		就是类中的getsize, setsize 之类设置获取属性的方法
		替代:
			加上：attr= property(fget, fset, (fdel), fstring) 
				这样，就可以在类上直接用 obj.attr = xxx 来获取或者设置了
			注意：你使用的property方法和内部的变量不能同名！！

	静态函数： 静态参数里没有ｓｅｌｆ
	类函数： 参数第一个是cls,代表ｃｌａｓｓ，
		这两个可以用类名调用, 也可以用对象调用
	修饰：
		@staticmethod
		@classmethod  放在静态和类上面 ,多个装饰器使用顺序相反
	拦截属性函数：
		__getattribute__(self, name)
			这个新式，会拦截一切属性访问，不论内外，所以注意，要在最后面调用父类的同名函数，不然
			操作几乎无法完成
		__getattr__ 
			只会拦截不存在的属性获取
		__setattr__:
			这个要避免死循环，和__getattribute__一样，你设置了属性，
			内部要用不一样的名字，不然内部的设置操作也会被拦截，然后如果同名，继续无限循环
		
	迭代器：
		__iter__ : 这个返回一个迭代器，就是含有next方法的对象
		next: 实现这个方法，每次返回一个对象
			这样就可以把对象用在for循环里了
			想要停止就raise StopIteration

		迭代器转化为list： 
			首先保证有限，然后直接list(obj_name)即可,因为这里被当作了迭代器

	生成器：
		这个是自定义的函数，内部用yield来作为断点，输出一个值，
			输出后会暂时返回，下次继续进行
		和迭代器类似
		可以使用return 无参数版本，代表结束
		yield 其实就是return一样的效果

	生成器推导式：
		和列表推导式类似，但使用圆括号
		(i*i for i in range(5))  
			返回一个对象，每次用 a.next()获取下一个值
	递归生成：
		可以递归自己，然后加上边界条件,对于list，扩展到元素的时候，再扩展会typeerror，利用
			except捕捉直接打印返回即可
		Note: 对于字符串不能递归，因为扩展的时候对于一个元素的字符串会扩展到自身，无线循环
			try: value + ''
			except TypeError: pass
			else raise TypeError
			这个可以判断，如果传入字符串，报错，否则通过
		sum(i*i for i in range(5)) 这样也可以，而且还少了一层括号，方便！！
Note：对于生成器不要恐惧，就是平常的prinf函数，只不过内部不会一次性产生罢了
	一般在产生结果的时候用

	生成器方法：
		代码里用 k = (yield xxx)
			这样在第一次运行过生成器next方法后，就可以用g.send("xxx")给生成器发送信息了，
			之后每次挂起都可以发送，但是第一次运行前不可以

exceptions:
	import exceptions,
	dir(exceptions) 可以看到所有的内建exceptions，
	使用raise 来触发异常，可以加入参数字符串，回答出来

	自建异常
		必须继承于内建
		异常可以向上传递，直到有人处理（按函数嵌套层传递）

	try:
		xxx
	except Except:
		xxx   
		raise  可以在具体的捕捉到的下面重新触发
	except (aaa,bbb):   可以把多个异常放在一个tuple里面在一起
	except (aaa,bbb), e: 可以打印错误,错误字符串在e里面
		如果想要接受所有错误，使用 except Exception, e  ， 这个好一点，一般不用，
		因为屏蔽了不好
	except 会接受所有异常，这个可以放在循环里，然后else处理成功后的跳出，还有
		可以执行finally
	finally:
		一定会执行，但是这里的异常不会被捕捉

	except 里面可以pass，这样就省略了异常处理，ignore，
		然后在try 里面print的时候用+而不是 ，逗号，这样不会导致由于后半段出现异常，
		输出了一半的情况

error: checktype:  isinstance(key, (int,long))
	IndexError:
		list index out of bound
	TypeError:
		index type not correct
	KeyError:
		dict's key not found??
