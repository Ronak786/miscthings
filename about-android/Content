权限：
    静态申请： <uses-persmissoin xxxxx>, 危险权限这样是不够的,需要动态申请
    动态申请 if ContextCompat.checkselefpermission(context,, mainfest.persmissoin.callphone) != packagemanager.permission_granted
                activitycompat.requestpermissions(context, string[]{}, 1)

            然后覆盖onrequestpermissionresult, 通过最后这个resultcode之后，
                查看result中是否有对应的Granted表示，有就访问，不然不访问

content resolver
    content.getcontentresolver()
    query:
            输入uri.parse("content://pkgname.provider/tablename");
            resolver.query(uri, (columns), where xxx , []{xx,xx,xx}, ordreby)
            返回cursora进行操作
    insert(uri, contentvalues);
    update(uri, contentvalues, where xxx, []{xxx});
    delete(uri, where xxx, []{xxx});

    电话簿的uri：
        ContactsContract.CommonDataKinds.Phone.CONTENT_URI

    permission 需要manifest里写，如果危险权限，还需要动态使用
        1 ContextCompat.checkpermission == packagemanger.permission_granted
        2 if not, activitycompat.reqeustpermission,

        3 overload onreequstpermissionresult()
            if grantedresult = granted, then call your function
        

自定义provider：
    选择other-》content provider
    也可以自己manifest里添加，authority就是名字，name指定对应的类

    继承contentprovider实现query, delete udpate delete gettype
        最后这个具体形式是vnd.adnroid.cursor.dir(item)/vnd.(authority_name).表名

    使用urimatcher构造每个authority 加上后面的部分的uri，
    后面是表名+id ，可以*表示所有字符， #表示所有数字
    然后每个query等里面urimatcher.match(uri) 更具对应分配的id进行识别执行
        对应的数据库操作

    利用uri.getpathsegment.get(0)/get(1) 可以获取后面那段自定义部分的id或者名字

    注意关闭cursor
