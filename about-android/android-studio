目录结构使用project模式看，build.gradle里面是可以引用的库的位置，包括jar
    以及远程库

shift+f10 编译
创建目录如果使用noactivity可能layout不能创建一个layout这样干净的名字，不要紧，
成功创建后可以refactor里面rename改回去

manifest里面添加activity的label的main那个会作为home屏幕上面的名字

找到view
        使用findviewbyid 获取id对应的view对象
            使用setxxxlistener（new xxxx() {} );直接在参数上实现类内的覆盖函数
toast:
    toast.maketext(context, text, time).show()

menu:
    资源文件定义res/menu/main.xml 内部定义<item id=xxx title=xxx />
    activity中overload onCreateOptionsmenu(menu),
        getmenuinflator().inflate(R.menu.main, menu)

    操作menu的感应：
        onoptionsitemselected(item)
        switch(item.getitemid) {
        case xxx:
        default return true;
        }

destroy:
    finish();

intent:
        intent 显式:
            Intent intent = new Intent(context, newclass.class);
            startActivity(intent);
        隐式： 注意要删除应用重新装，不能和上面的直接混用
            in manifest: intent-filter: action  自定义一个名字,需要你的package前缀？
                                        category 默认default
            Intent intent = new Intent(action name);
            intent.addcategory("xxx");
            加入在manifest中自定义的category，也是可以的，仿照自添加action
            注意要完全对应，除了default不用加

            2: Intent intent = new Intent(Intent.ACTION_VIEW); 
                intent.setData(Uri.parse("xxx"));
                设置内置的一些id，actionview接受一个uri
                在对应的intentfilter的<data>中可以具体设置schema, host port path mimeType
                    来精确匹配

                这里的data是用来匹配data标签的，应该也可以拿出来？

        传递数据
            intent.putExtra("keyname", data);
            在called activity：
                intent = getIntent();
                intent.getStringExtra("keyname"); 获取string
                intent.getBoolExtre("xxx"): 获取bool

            
        返回数据：
            1 caller 设置 startactviityforresult, 传入一个id作为返回后的筛选id
            2 callee 在需要返回的时候,比如在onBackPressed或者自定义的按钮里面
                    intent = new intent(), intent.putExtra("key", data");
                    setResult(RESULT_OK, intent);
                    finish()
            3 caller 重写onActivityResult 判断reqeustcode 筛选值，然后
                利用传回来的intent获取数据即可

activity状态：
    create->start->resume ->pause->stop->destroy 完整周期
    无论何时：按返回 pause->stop->destroy  重新从任务列表出来 oncreate->start->resume, 可见周期，
    按home  pause->stop  restart->start->resume 运行周期
    显示新的小对话框 pause -> onresume

如何显示小对话框
    在manifest中设置activity的android:theme=@style/Theme.AppTheme.Dialog
            如果继承的不是compat的actvity，直接使用@android:style/Theme.Dialog

系统保存数据：
    如果系统移除了后台actvity，为了获取可用内存，会调用onsaveinstancestate，你可以在
        bundle中保存数据，oncreate的时候取出，这个和intent传数据一样，也可以在
        intent中保存整个bundle

启动模式：
    standard 多次启动会重复启动新的实例
    singletop 如果启动的就是栈顶的一样的，直接pause然后resume
    singletask 如果启动的就在栈里面，把他上面的全部destroy，本身则restart
    singleinstance 放在单独的返回站，相当于一个单独应用的启动，虽然其实是和其他actviity属于同一个应用的，
            好处是多个其他activity会使用同一个这个activity共享

获取当前activity的类名
    getClass().getSimpleName();
    技巧，利用所有activity继承一个公共的class，本身继承appcompatactvity，然后实现这个方法，
        可以在每个类进入的时候获取名字

控制所有activity的删除：
    利用一个类，实现静态的addactivity到一个list
    然后需要的时候对这个list的每个调用finish（）
    为确保删除干净，而没有留在栈上，再调用android.so.killProcess(android.Process.myPid());

提供给别人调用intent的接口
    实现一个actionstart的方法，接受contenxt和数据，然后负责调用startactiity，
    好处是别人通过参数知道可以传入和之后获取的参数数量和名字，便于多人交互
