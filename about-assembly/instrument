div:
  dividor: 8bit, 
  dividing: ax, 
  result, al : quote
		  ah: remainder

  dividor: 16bit
  dividing: dx, ax
  result: ax :quote
		  dx : remainder

mul
  al, result ax
  ax, result ax, dx(higher)

procedure:
	call xxx

xxx: aa
	bb
	ret

psw:
	zf: add sub mul div inc or and , if result is 0, zf = 1
		else zf = 0;
	pf: if result 's has even number of 1, then pf = 1, else 0
	sf: if negative, 1, else 0
	cf: unsigned, if 进位  or 借位, cf = 1, else = 0
		inc do not effect cf !!
	of: 有符号溢出，上或者下溢出, 
		cf of 变化没关系的

adc 
sbb  use cf when do add and sub

cmp : do sub, but not save result, only affect psw
	for unsigned: zf = 1,  ax == bx
				  cf = 1,  ax < bx
				  zf = 0, ax != bx
				  cf = 0, ax >= bx
	for sign:	  sf = 1, of = 0,  ax < bx !!
				  sf = 1, of = 1,  ax > bx
				  sf = 0, of = 1, ax < bx !!
				  sf = 0, of = 0, ax >= bx(see zf)
				of = 1 意思是实际正负和这里逻辑sf表达的正负
					正好相反

je jne  zf
jb jnb cf
ja jna cf zf

					df: 方向，置位表示-1 ，否则+1， si di
					cld(clear) , std(set)

					movsb movsw 执行一次 from ds:si to es:di
					rep movsb, rep movsw 执行cx次

中断：
	中断向量表256项，在0地址处，
	存放地址共4个字节
	中断过程：
		取得类型码
		pushf
		psw中tf if置位0
		push cs
		push ip
		ip = 类型码*4  cs = *4+2

		return: iret  (pop ip, pop cs, popf)
		
	更改中断处理函数：
		更改中断向量，
		把你的函数复制到内存中，注意数据放在同一个段里，
		通过段头的jmp short跳到数据后面去，要相对位移才行

		tf cpu处理完一条指令后，检测tf的值，如果1，就产生
			1号中断，设置tf=0，if=0
		if 执行完一条指令后如果if没有设置，不响应外部可屏蔽中断
			sti
			cli 开关可屏蔽中断
				在设置中断向量的时候记住要做这个
				不然cs ip的设置就乱了
				设置ss的时候会自动设置sp而不进入单步中断
				 因为要连续设置栈
			不可屏蔽中断，这个不能屏蔽，固定2号，执行完当前
				指令一定出发

	bios中断
		10h 可以放置光标位置
		21h 可以在光标位置显示字符串

端口：
	接口芯片操作需要端口号，数据只能通过al ax传输，
	端口号255以内直接写，其他到64k的放在dx中
	coms 读写： 70h送入地址 71h读写数据
	in al, 71h
	out 71h, al

shl, shr
	逻辑左右移动，大于一位时要放在cl中，移除的放在cf中

ret n
	pop ip
	add sp, n

bool:
	win64 bool:  if source is 32, dest 64 only affect lower 32bit
				if source is less than 32, dest 64 affect all
	and:
		always clear  c and o,  and ax, ax ,then you can test other cflags to test value of ax(>0 <0 == 0?)
	or:
		always clear c and o,    and ax, ax ,then you can test other cflags to test value of ax(>0 <0 == 0?)
	xor:
		x ^ y ^ y = x !!!
		x ^ 0 == 0 and pf flag will be set, so this will test pf 奇偶校验
		a ^ b  奇偶特性和a b拼起来的一样，因为xor把对应位置的一起消掉了，剩下的再合并了起来
	not:
		do not affect flag
	test == and
	cmp = sub     but not affect real number
		cmp unsigned : == zf = 1, cf = 0
						< zf = 0, cf = 1
						> zf = 0, cf = 0
			signed   :== zf = 1
					 >   sf = 0, of = 0 or zf = 1, of = 1
					 <	 sf = 1, of = 0 or sf = 0, of = 1

	set zf:
		test al, 0 zf = 1
		and al, 0 zf = 1
		or al, 1  zf = 0

	set sf:
		or al, 80h sf = 1
		and al, 7fh sf = 0
	set cf:
		stc
		clc
	set of
		mov al, 7f
		inc al   of = 1
		or eax, 0  of = 0

	jz jnz jp jnp jc jnc jo jno js jns
	jcxz jecxz jrcxz
	ja jb jnbe jae jnb , these will combine zf , cf , of, so no worry about that!!
	jg jl 

	loopz loopnz
	loope loopne   if ecx > 0 &&  zf == 1   ( or zf == 0)  , then jump

	有限状态机，转化为汇编很容易

	shl shr sal sar   rol ror  rcl rcr 
		所有都会影响cf标记，但是只有rcl rcr 会把循环移动到cf中，把cf移动到填充的位上
		如果移动后符号和以前不一样，of置位
		shld shrd  移动目的，缺的用源补， 样子是 目的 源 这样拼起来

	mul 
		乘法结果如果高位不为0， cf标记设置

stack frame call style:
	C call style:
		caller: push args,
		call xxx
		caller: add sp, sizeof(args)

	stdcall style:
		caller: push args,
		call xxx:
			ret  n


cld
std : reverse direction
movsb/w/d  si -> di
cmpsb		compare si and di   : jump   ja,  repe 
scasb		compare al/ax/eax to di : repne  (repeat until not equal) + jnz 跳出完全不匹配的情况
stosb		store ax to di
lodsb		load di to ax
rep			repeat until cx is 0
repz/repe   until cx 0 and or zf != 0
repnz/repne until cx 0 or zf == 0


结构体
XXX STRUCT
	A BYTE "xxxxx"
	ALIGN WORD    // align 获得更好的性能
	X WORD ?
	Y WORD ?
	D BYTE 30 dup(0)
	ALIGN DWORD
	E dword 0,0,0,0
XXX ENDS
使用： 
	ALIGN DWORD
	var XXX <yy,,zz, 2 dup(0)(仅仅初始化数组中的两个> ,可以跳过字段
			还可以{}
			还可以 <> 默认字段

	引用： var.fielename

macro:
	xxx MACRO param1, param2
	...
	...
	ENDM

	调用： XXX
