assume cs: codecs, ds: codeds:, ss: codess
	 mov ax, codecs 段名就是标记，就是地址
	这个是需要的，assume不会去主动填写段名到寄存器
mov ax, 0fff0h  最前面的0是需要的，不然masm会识别成变量，然后报错

语法奇特
	mov ax, [0] 表示把0 赋值给 ax
	mov ax, ds:[0] 表示一个内存地址里的内容，
	mov ax, [bx]
	mov ax, [bx + 20]  or mov ax, 20[b]
	mov ax, [bx + si] , mov ax, [bx + di], 
	mov ax, [bx][si]
	mov ax, [bx + si + 20], 20[bx] [si]
	mov ax, [bp + si/di]
	bp 对应段地址在ｓｓ中，不同于ｂｘ
	存取内存的只能是这些寄存器，其他那些不行的
	也可以mov bx, 0, 
		
	这个和直接debug里编写程序不一样，太奇怪了

定义数据
	dw xx,xx,xx,xx,xx,xx 定义的是双字节
	db 1,2,3,4
	db 'abcd'
	dd 双字
	db 3 dup ('123','456') :
			123456123456123456
	dd 3 dup(0)  :0,0,0

	start：

	end start
	end后面加上的是程序入口位置，不然
		程序会从载入第一条指令开始执行的

	mov al, 'a' 也可以

分配段：
	分配段的时候，是按照１６字节对齐的，因为
	段地址必须１６字节对齐呀，偏移１６位的

指明内存区域的长度
	mov byte ptr ds: [0], 1
	mov word ptr ds: [0], 2

mov ax, offset label
mov ax,	offset a - offset b, 传入差
	传递标号处的地址
	汇编器可以处理+ - * / , mov ax, (5+2)/33

jmp 
	段内： jmp short label, 机器码里面是相对于当前ip的值，
		也就是下一条指令的相对偏移，范围是-128 , 127
	段内附近：
		jmp near ptr label (16bit)
	段间：
		jmp far ptr cs:ip

	jmp ax ,  ( in section)
	jmp word ptr [xxx]
	jmp dword ptr [xxx]   (双子，高地址是cs）
	jcxz xxx ; jump only when cx is 0 (short)

dos display: b800:0000 ffff

ret: pop ip
retf: pop ip, pop cs
call addr: (16bit)
	push ip / ip,cs
	jmp ip / ip,cs

call far ptr label:
	push cs, push ip, jmp far ptr label
call word ptr []; == call addr
call dword ptr [];  == far ptr
	call 不能短转移，一定是设置ip的


标号： 数据标签都是十六位的
	a: db 'abcde' 
	mov ax, offset a

	a db 'abcde'
	mov  a, 'c'  这种标号还代表了长度
	mov a[2], 'e'

	带冒号的是地址标号，只能在代码段

	可以把数据标号直接当做地址使用,还可以用来定义成为数据，
		a db 1,2,3,4,5
		b dw 0
		c dw a, b  定义了a b偏移地址

		c dd a, b 定义了a b的偏移和段地址
			相当于 c dd offset a, seg a, offset b, seg b

		使用：直接定制表格
			label db 'xxxxxxx'
			使用
			label[si]
			
masm 处理jmp
	各种jmp只要在最小范围内，都按照最小范围递增来处理，
	能short就short的偏移，不然就near，再不行就far，
	如果jmp在标号前面，会预留位置，所以如果后期用了最小
		处理，会多出一些nop
