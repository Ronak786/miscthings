rsync  :just use rsync -aAXv --numeric-ids --exclude={"dev/*","proc/*","tmp/*","run/*","mnt/*","media/*","lost+found","home/sora/*","sys/*"}  /  root@host:/path/to/folder   to remote sync

ftp:  use lftp ,can login , can download

**************************************************************************************************************************************************************************************************

pacman:  (use --needed to avoid reinstall !!!!)
	install : 			pacman -S 
	install by search pattern : 	pacman -S $(pacman -Ssq pattern)
	install from specific repo:  	pacman -S repo/XXX
	install some package of same prefix:  pacman -S aaa-{bbb,ccc-{ddd,eee}}

	group:
	install some in the group: 	pacman -S groupname;  then  choose  number  1-9 10 ^12(not 12) ^5-8(not 5 to 8)
	see what a group have:          pacman -Sg  groupname (have no groupinfo , just a group package list)

	remove:
	remove a single package : 	pacman -R
	remove also depencies installed along with that(not used by others) : pacman -Rs
	remove all dependencies and dependent on that packages : 	pacman -Rsc
	remove  without remove the dependent package (the packmage depend on this removing one) : pacman -Rdd
	remove also clean conf files( not save as .pacsave) , :  	pacman -Rn

	update: (  the old conf file about to remove will be saved as *.pacsave , and new files overide user modified one will be named *.pacnew
	update all: pacman -Syu
	
	after update : see /var/log/pacman.log to see which conf file saved to .pacsave , which new one be renamed to pacnew ,and deal with that manually

	
	search:
	pacman -Qs :  installed names or descriptions( if have more than one string , means AND ,not OR)
	pacman -S  :  sync database
	pacman -Ss : search name and description
	pacman -Ss '^xxx'  search only names

	info
	pacman -Qi -Si
	pacman -Qii also list backup files and modify state

	list files , check files:
	pacman -Ql
	pacman -Qk
	
	list not needed packages,installed as dependencies bedore,(orphans): pacman -Qdt
	list explictly installed but not as a dependency: pacman -Qet

	files belong to which package:
	pacman -Qo


pactree
	list packages this package depend on  in a tree:  pactree XXX
	list packages depend on this package : 		  pactree -r XXX

pkgfile
	list files in a package in syncdatabase:  pkgfile -l xxx
	list just like yum whatprovides : 	pkgfile Xxx

paccache : used to delete caches  from last 3 ,  
	paccache -r
	paccache -ruk0 clean not installed all caches

pacman conf: in /etc/pacman.conf , we can choose the repo to sync
pacman database: /var/lib/pacman/local  /var/lib/pacman/sync/{there are sync database's gzip tar ball,in which are those packages' description infos)
pacman cache packages: /var/cache/pacman/pkg
	clean cache pacs not currently installed ( removed or updated) : pacman -Sc , pacman -Scc to clean all cache


	only download:
		pacman -Sw (also dependencies will be download not installed , you can use pacman -Sc to clean those)

	install use user specify path:
		pacman -U  XXX.pkg.tar.gz
		pacman -U  file://xxx.pkg.tar.gz  also add into local cache
		pacman -U  http://XXXXX  remote install

	-p:  
		with -S -R -U , will just print path , not install
		with -Q , will query a file , not an entry in the database , just like rpm -qp


in pacman : packages distinguished into two types:
	installed explictly , installed as a dependency
	pacman -Qe  see former
	pacman -Qd  see latter

	pacman -S --asdeps to change installing one to a dependency
	pacman -D --asdeps to change a installed one to dependency   
		use --asexplicit as the opposite

pacman.conf
	see man page for detail
	have colour optins
	Hooks may be run in /usr/share/libalpm/hooks , and trigger condition see man alpm-hooks,(usually after or before some packages' installation)

trouble shoot:
	if have trouble with one file in package,  just use pacman -S --force may have effect(may be that file not in state same with that in /var/lib/pacman/local/$(pkgname)/file
	pacman has live cd's do methods , use some options like -r/--root to specify a mounted root
	

**************************************************************************************************************************************************************************************************



repos:
	we have core , extra , commmunity and other repos
	must be in order the former will be installed , regardless the level of the latter


arch build system:
	install abs , then run abs ,to get the build system PKGBUILD script of all packages in the repos specified in the abs.conf , the AUR ones should be download manually
	then make your own dir as a non root user , copy that directory of that package in the /var/abs dir , cd into it 
	run makepkg -s 
	trouble:  gpg may fail , should use gpg --recv-key XXX to receive keys , import and trust if needed ,  modify download pages from the official to ustc to speed up , 
		modify make flags to fully use cpus, change flags and so on...
	now you can install with pacman -U .... 

	you can also modify the groups in the PKGBUILD , then add in pacman.conf the IgnoreGroup=xxx to ignore the official same name package from overriding the one you manually built and
		installed into the system
